====__future__.py(file) start====
''

all_feature_names=[
"nested_scopes",
"generators",
"division",
"absolute_import",
"with_statement",
"print_function",
"unicode_literals",
"barry_as_FLUFL",
]

__all__=["all_feature_names"]+all_feature_names

CO_NESTED=0x0010
CO_GENERATOR_ALLOWED=0
CO_FUTURE_DIVISION=0x2000
CO_FUTURE_ABSOLUTE_IMPORT=0x4000
CO_FUTURE_WITH_STATEMENT=0x8000
CO_FUTURE_PRINT_FUNCTION=0x10000
CO_FUTURE_UNICODE_LITERALS=0x20000
CO_FUTURE_BARRY_AS_BDFL=0x40000

class _Feature:
 def __init__(self,optionalRelease,mandatoryRelease,compiler_flag):
  self. optional=optionalRelease
  self. mandatory=mandatoryRelease
  self. compiler_flag=compiler_flag

 def getOptionalRelease(self):
  ''

  return self. optional

 def getMandatoryRelease(self):
  ''

  return self. mandatory

 def __repr__(self):
  return"_Feature"+repr((self. optional,
  self. mandatory,
  self. compiler_flag))

nested_scopes=_Feature((2,1,0,"beta",1),
(2,2,0,"alpha",0),
CO_NESTED)

generators=_Feature((2,2,0,"alpha",1),
(2,3,0,"final",0),
CO_GENERATOR_ALLOWED)

division=_Feature((2,2,0,"alpha",2),
(3,0,0,"alpha",0),
CO_FUTURE_DIVISION)

absolute_import=_Feature((2,5,0,"alpha",1),
(3,0,0,"alpha",0),
CO_FUTURE_ABSOLUTE_IMPORT)

with_statement=_Feature((2,5,0,"alpha",1),
(2,6,0,"alpha",0),
CO_FUTURE_WITH_STATEMENT)

print_function=_Feature((2,6,0,"alpha",2),
(3,0,0,"alpha",0),
CO_FUTURE_PRINT_FUNCTION)

unicode_literals=_Feature((2,6,0,"alpha",2),
(3,0,0,"alpha",0),
CO_FUTURE_UNICODE_LITERALS)

barry_as_FLUFL=_Feature((3,1,0,"alpha",2),
(3,9,0,"alpha",0),
CO_FUTURE_BARRY_AS_BDFL)
====__future__.py(file) end====

====_abcoll.py(file) start====


import sys

__all__=["Hashable","Iterable","Iterator",
"Sized","Container","Callable",
"Set","MutableSet",
"Mapping","MutableMapping",
"MappingView","KeysView","ItemsView","ValuesView",
"Sequence","MutableSequence",
"ByteString",
]

def abstractmethod(self):
 return self

class Iterable:

 @abstractmethod
 def __iter__(self):
  while False :
   yield None

 @classmethod
 def __subclasshook__(cls,C):
  if cls is Iterable:
   if any("__iter__"in B. __dict__ for B in C. __mro__):
    return True
  return NotImplemented

class Sized:

 @abstractmethod
 def __len__(self):
  return 0

 @classmethod
 def __subclasshook__(cls,C):
  if cls is Sized:
   if any("__len__"in B. __dict__ for B in C. __mro__):
    return True
  return NotImplemented

class Container:

 @abstractmethod
 def __contains__(self,x):
  return False

 @classmethod
 def __subclasshook__(cls,C):
  if cls is Container:
   if any("__contains__"in B. __dict__ for B in C. __mro__):
    return True
  return NotImplemented

class Mapping(Sized,Iterable,Container):

 @abstractmethod
 def __getitem__(self,key):
  raise KeyError

 def get(self,key,default=None ):
  try :
   return self[key]
  except KeyError:
   return default

 def __contains__(self,key):
  try :
   self[key]
  except KeyError:
   return False
  else :
   return True

 def keys(self):
  return KeysView(self)

 def items(self):
  return ItemsView(self)

 def values(self):
  return ValuesView(self)

 def __eq__(self,other):
  if not isinstance(other,Mapping):
   return NotImplemented
  return dict(self. items())==dict(other. items())

 def __ne__(self,other):
  return not (self ==other)

class MutableMapping(Mapping):

 @abstractmethod
 def __setitem__(self,key,value):
  raise KeyError

 @abstractmethod
 def __delitem__(self,key):
  raise KeyError

 __marker=object()

 def pop(self,key,default=__marker):
  try :
   value=self[key]
  except KeyError:
   if default is self. __marker:
    raise
   return default
  else :
   del self[key]
   return value

 def popitem(self):
  try :
   key=next(iter(self))
  except StopIteration:
   raise KeyError
  value=self[key]
  del self[key]
  return key,value

 def clear(self):
  try :
   while True :
    self. popitem()
  except KeyError:
   pass

 def update(*args,**kwds):
  if len(args)>2:
   raise TypeError("update() takes at most 2 positional "
   "arguments ({} given)". format(len(args)))
  elif not args:
   raise TypeError("update() takes at least 1 argument (0 given)")
  self=args[0]
  other=args[1]if len(args)>=2 else ()

  if isinstance(other,Mapping):
   for key in other:
    self[key]=other[key]
  elif hasattr(other,"keys"):
   for key in other. keys():
    self[key]=other[key]
  else :
   for key,value in other:
    self[key]=value
  for key,value in kwds. items():
   self[key]=value

 def setdefault(self,key,default=None ):
  try :
   return self[key]
  except KeyError:
   self[key]=default
  return default

====_abcoll.py(file) end====

====_ajax.js(file) start====
// ajax
var $module = (function($B){

eval($B.InjectBuiltins())
var $N = $B.builtins.None

function ajax1(){
    if (window.XMLHttpRequest){// code for IE7+, Firefox, Chrome, Opera, Safari
        var xmlhttp = new XMLHttpRequest();
    }else{// code for IE6, IE5
        var xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function(){
        // here, "this" refers to xmlhttp
        var state = this.readyState
        var timer = this.$requestTimer
        if(state===0 && this.onuninitialized){this.onuninitialized()}
        else if(state===1 && this.onloading){this.onloading()}
        else if(state===2 && this.onloaded){this.onloaded()}
        else if(state===3 && this.oninteractive){this.oninteractive()}
        else if(state===4 && this.oncomplete){
            if(timer !== null){window.clearTimeout(timer)}
            this.oncomplete()
        }
    }
    return {
        __class__: ajax.$dict, 
        js: xmlhttp,
        headers: {}
    }
}
ajax1.__class__ = $B.$factory

ajax.__class__ = $B.$factory

function ajax(){

    if (window.XMLHttpRequest){// code for IE7+, Firefox, Chrome, Opera, Safari
        var xmlhttp=new XMLHttpRequest();
    }else{// code for IE6, IE5
        var xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function(){
        // here, "this" refers to xmlhttp
        var state = this.readyState
        res.js.text = this.responseText
        var timer = this.$requestTimer
        if(state===0 && this.onuninitialized){this.onuninitialized(res)}
        else if(state===1 && this.onloading){this.onloading(res)}
        else if(state===2 && this.onloaded){this.onloaded(res)}
        else if(state===3 && this.oninteractive){this.oninteractive(res)}
        else if(state===4 && this.oncomplete){
            if(timer !== null){window.clearTimeout(timer)}
            this.oncomplete(res)
        }
    }
    var res = {
        __class__: ajax.$dict, 
        js: xmlhttp,
        headers: {}
    }
    return res
}

var add_to_res = function(res,key,val) {
    if (isinstance(val,list)) {
        for (j = 0; j < val.length; j++) {
            add_to_res(res,key,val[j])
        }
    } else if (val instanceof File || val instanceof Blob) {
        res.append(key,val)
    } else res.append(key,str(val))
}

ajax.$dict = {

    __class__:$B.$type,
    __name__:'ajax',
    $factory: ajax,

    __getattribute__ : function(self, attr){
        // Special case for send : accept dict as parameters
        if(attr=='send'){
            return function(params){
                return ajax.$dict.send(self, params)
            }
        }
        // Otherwise default to JSObject method
        return $B.JSObject.$dict.__getattribute__(self, attr)
    },

    __repr__ : function(self){return '<object Ajax>'},
    __str__ : function(self){return '<object Ajax>'},

    bind : function(self, evt, func){
        // req.bind(evt,func) is the same as req.onevt = func
        self.js['on'+evt] = function(){
            try{
                return func.apply(null, arguments)
            }catch(err){
                if(err.__class__!==undefined){
                    var msg = _b_.getattr(err, 'info')+
                        '\n'+err.__class__.__name__
                    if(err.args){msg += ': '+err.args[0]}
                    try{getattr($B.stderr,"write")(msg)}
                    catch(err){console.log(msg)}
                }else{
                    try{getattr($B.stderr,"write")(err)}
                    catch(err1){console.log(err)}
                }
            }
        }
        return $N
    },

    send : function(self,params){
        // params can be Python dictionary or string
        //self.js.onreadystatechange = function(ev){console.log(ev.target)}
        var res = ''
        if(!params){
            self.js.send();
            return $N;
        }else if(isinstance(params,str)){
            res = params
        }else if(isinstance(params,dict)){
            if(self.headers['content-type'] == 'multipart/form-data'){
                // The FormData object serializes the data in the 'multipart/form-data'
                // content-type so we may as well override that header if it was set
                // by the user.
                res = new FormData()
                var items = _b_.list(_b_.dict.$dict.items(params))
                for(var i=0, _len_i = items.length; i < _len_i;i++){
                    add_to_res(res,str(items[i][0]),items[i][1])
                }
            }else{
                var items = _b_.list(_b_.dict.$dict.items(params))
                for(var i=0, _len_i = items.length; i < _len_i;i++){
                    var key = encodeURIComponent(str(items[i][0]));
                    if (isinstance(items[i][1],list)) {
                        for (j = 0; j < items[i][1].length; j++) {
                            res += key +'=' + encodeURIComponent(str(items[i][1][j])) + '&'
                        }
                    } else {
                        res += key + '=' + encodeURIComponent(str(items[i][1])) + '&'
                    }
                }
                res = res.substr(0,res.length-1)
            }
        }else{
            throw _b_.TypeError("send() argument must be string or dictionary, not '"+str(params.__class__)+"'")
        }
        self.js.send(res)
        return $N
    },

    set_header : function(self,key,value){
        self.js.setRequestHeader(key,value)
        self.headers[key.toLowerCase()] = value.toLowerCase()
    },

    set_timeout : function(self,seconds,func){
        self.js.$requestTimer = setTimeout(
            function() {self.js.abort();func()},
            seconds*1000);
    }
}

ajax.$dict.__mro__ = [$B.JSObject.$dict, _b_.object.$dict]

$B.set_func_names(ajax.$dict)

return {ajax:ajax, ajax1:ajax1}

})(__BRYTHON__)
====_ajax.js(file) end====

====_codecs.py(file) start====

def ascii_decode(*args,**kw):
 pass

def ascii_encode(*args,**kw):
 pass

def charbuffer_encode(*args,**kw):
 pass

def charmap_build(*args,**kw):
 pass

def charmap_decode(*args,**kw):
 pass

def charmap_encode(*args,**kw):
 pass

def decode(*args,**kw):
 ''

 pass

def encode(*args,**kw):
 ''

 obj=args[0]
 if len(args)==2:
  encoding=args[1]
 else :
  encoding='utf-8'
 if isinstance(obj,str):
  return obj. encode(encoding)

def escape_decode(*args,**kw):
 pass

def escape_encode(*args,**kw):
 pass

def latin_1_decode(*args,**kw):
 pass

def latin_1_encode(*args,**kw):
 pass

def lookup(encoding):
 ''

 if encoding in ('utf-8','utf_8'):
  from javascript import console
  console. log('encoding',encoding)
  import encodings. utf_8
  return encodings. utf_8. getregentry()

 LookupError(encoding)

def lookup_error(*args,**kw):
 ''

 pass

def mbcs_decode(*args,**kw):
 pass

def mbcs_encode(*args,**kw):
 pass

def raw_unicode_escape_decode(*args,**kw):
 pass

def raw_unicode_escape_encode(*args,**kw):
 pass

def readbuffer_encode(*args,**kw):
 pass

def register(*args,**kw):
 ''

 pass

def register_error(*args,**kw):
 ''

 pass

def unicode_escape_decode(*args,**kw):
 pass

def unicode_escape_encode(*args,**kw):
 pass

def unicode_internal_decode(*args,**kw):
 pass

def unicode_internal_encode(*args,**kw):
 pass

def utf_16_be_decode(*args,**kw):
 pass

def utf_16_be_encode(*args,**kw):
 pass

def utf_16_decode(*args,**kw):
 pass

def utf_16_encode(*args,**kw):
 pass

def utf_16_ex_decode(*args,**kw):
 pass

def utf_16_le_decode(*args,**kw):
 pass

def utf_16_le_encode(*args,**kw):
 pass

def utf_32_be_decode(*args,**kw):
 pass

def utf_32_be_encode(*args,**kw):
 pass

def utf_32_decode(*args,**kw):
 pass

def utf_32_encode(*args,**kw):
 pass

def utf_32_ex_decode(*args,**kw):
 pass

def utf_32_le_decode(*args,**kw):
 pass

def utf_32_le_encode(*args,**kw):
 pass

def utf_7_decode(*args,**kw):
 pass

def utf_7_encode(*args,**kw):
 pass

def utf_8_decode(*args,**kw):
 pass

def utf_8_encode(*args,**kw):
 input=args[0]
 if len(args)==2:
  errors=args[1]
 else :
  errors=kw. get('errors','strict')

 return (bytes([_f for _f in input],'utf-8'),len(input))
====_codecs.py(file) end====

====_collections.py(file) start====


import operator

def _thread_ident():
 return -1

n=30
LFTLNK=n
RGTLNK=n+1
BLOCKSIZ=n+2

class deque:

 def __new__(cls,iterable=(),*args,**kw):

  self=object. __new__(cls,*args,**kw)
  self. clear()
  return self

 def __init__(self,iterable=(),maxlen=None ):
  object. __init__(self)
  self. clear()
  if maxlen is not None :
   if maxlen <0:
    raise ValueError("maxlen must be non-negative")
  self. _maxlen=maxlen
  add=self. append
  for elem in iterable:
   add(elem)

 @property
 def maxlen(self):
  return self. _maxlen

 def clear(self):
  self. right=self. left=[None ]*BLOCKSIZ
  self. rightndx=n //2
  self. leftndx=n //2+1
  self. length=0
  self. state=0

 def append(self,x):
  self. state +=1
  self. rightndx +=1
  if self. rightndx ==n:
   newblock=[None ]*BLOCKSIZ
   self. right[RGTLNK]=newblock
   newblock[LFTLNK]=self. right
   self. right=newblock
   self. rightndx=0
  self. length +=1
  self. right[self. rightndx]=x
  if self. maxlen is not None and self. length >self. maxlen:
   self. popleft()

 def appendleft(self,x):
  self. state +=1
  self. leftndx -=1
  if self. leftndx ==-1:
   newblock=[None ]*BLOCKSIZ
   self. left[LFTLNK]=newblock
   newblock[RGTLNK]=self. left
   self. left=newblock
   self. leftndx=n -1
  self. length +=1
  self. left[self. leftndx]=x
  if self. maxlen is not None and self. length >self. maxlen:
   self. pop()

 def extend(self,iterable):
  if iterable is self:
   iterable=list(iterable)
  for elem in iterable:
   self. append(elem)

 def extendleft(self,iterable):
  if iterable is self:
   iterable=list(iterable)
  for elem in iterable:
   self. appendleft(elem)

 def pop(self):
  if self. left is self. right and self. leftndx >self. rightndx:

   raise IndexError("pop from an empty deque")
  x=self. right[self. rightndx]
  self. right[self. rightndx]=None
  self. length -=1
  self. rightndx -=1
  self. state +=1
  if self. rightndx ==-1:
   prevblock=self. right[LFTLNK]
   if prevblock is None :

    self. rightndx=n //2
    self. leftndx=n //2+1
   else :
    prevblock[RGTLNK]=None
    self. right[LFTLNK]=None
    self. right=prevblock
    self. rightndx=n -1
  return x

 def popleft(self):
  if self. left is self. right and self. leftndx >self. rightndx:

   raise IndexError("pop from an empty deque")
  x=self. left[self. leftndx]
  self. left[self. leftndx]=None
  self. length -=1
  self. leftndx +=1
  self. state +=1
  if self. leftndx ==n:
   prevblock=self. left[RGTLNK]
   if prevblock is None :

    self. rightndx=n //2
    self. leftndx=n //2+1
   else :
    prevblock[LFTLNK]=None
    self. left[RGTLNK]=None
    self. left=prevblock
    self. leftndx=0
  return x

 def count(self,value):
  c=0
  for item in self:
   if item ==value:
    c +=1
  return c

 def remove(self,value):

  for i in range(len(self)):
   if self[i]==value:
    del self[i]
    return
  raise ValueError("deque.remove(x): x not in deque")

 def rotate(self,n=1):
  length=len(self)
  if length ==0:
   return
  halflen=(length+1)>>1
  if n >halflen or n <-halflen:
   n %=length
   if n >halflen:
    n -=length
   elif n <-halflen:
    n +=length
  while n >0:
   self. appendleft(self. pop())
   n -=1
  while n <0:
   self. append(self. popleft())
   n +=1

 def reverse(self):
  ''
  leftblock=self. left
  rightblock=self. right
  leftindex=self. leftndx
  rightindex=self. rightndx
  for i in range(self. length //2):

   assert leftblock !=rightblock or leftindex <rightindex

   (rightblock[rightindex],leftblock[leftindex])=(
   leftblock[leftindex],rightblock[rightindex])

   leftindex +=1
   if leftindex ==n:
    leftblock=leftblock[RGTLNK]
    assert leftblock is not None
    leftindex=0

   rightindex -=1
   if rightindex ==-1:
    rightblock=rightblock[LFTLNK]
    assert rightblock is not None
    rightindex=n -1

 def __repr__(self):
  threadlocalattr='__repr'+str(_thread_ident())
  if threadlocalattr in self. __dict__:
   return'deque([...])'
  else :
   self. __dict__[threadlocalattr]=True
   try :
    if self. maxlen is not None :
     return'deque(%r, maxlen=%s)'%(list(self),self. maxlen)
    else :
     return'deque(%r)'%(list(self),)
   finally :
    del self. __dict__[threadlocalattr]

 def __iter__(self):
  return deque_iterator(self,self. _iter_impl)

 def _iter_impl(self,original_state,giveup):
  if self. state !=original_state:
   giveup()
  block=self. left
  while block:
   l,r=0,n
   if block is self. left:
    l=self. leftndx
   if block is self. right:
    r=self. rightndx+1
   for elem in block[l:r]:
    yield elem
    if self. state !=original_state:
     giveup()
   block=block[RGTLNK]

 def __reversed__(self):
  return deque_iterator(self,self. _reversed_impl)

 def _reversed_impl(self,original_state,giveup):
  if self. state !=original_state:
   giveup()
  block=self. right
  while block:
   l,r=0,n
   if block is self. left:
    l=self. leftndx
   if block is self. right:
    r=self. rightndx+1
   for elem in reversed(block[l:r]):
    yield elem
    if self. state !=original_state:
     giveup()
   block=block[LFTLNK]

 def __len__(self):

  return self. length

 def __getref(self,index):
  if index >=0:
   block=self. left
   while block:
    l,r=0,n
    if block is self. left:
     l=self. leftndx
    if block is self. right:
     r=self. rightndx+1
    span=r -l
    if index <span:
     return block,l+index
    index -=span
    block=block[RGTLNK]
  else :
   block=self. right
   while block:
    l,r=0,n
    if block is self. left:
     l=self. leftndx
    if block is self. right:
     r=self. rightndx+1
    negative_span=l -r
    if index >=negative_span:
     return block,r+index
    index -=negative_span
    block=block[LFTLNK]
  raise IndexError("deque index out of range")

 def __getitem__(self,index):
  block,index=self. __getref(index)
  return block[index]

 def __setitem__(self,index,value):
  block,index=self. __getref(index)
  block[index]=value

 def __delitem__(self,index):
  length=len(self)
  if index >=0:
   if index >=length:
    raise IndexError("deque index out of range")
   self. rotate(-index)
   self. popleft()
   self. rotate(index)
  else :

   index=index ^(2 **31)
   if index >=length:
    raise IndexError("deque index out of range")
   self. rotate(index)
   self. pop()
   self. rotate(-index)

 def __reduce_ex__(self,proto):
  return type(self),(list(self),self. maxlen)

 def __hash__(self):

  raise TypeError("deque objects are unhashable")

 def __copy__(self):
  return self. __class__(self,self. maxlen)

 def __eq__(self,other):
  if isinstance(other,deque):
   return list(self)==list(other)
  else :
   return NotImplemented

 def __ne__(self,other):
  if isinstance(other,deque):
   return list(self)!=list(other)
  else :
   return NotImplemented

 def __lt__(self,other):
  if isinstance(other,deque):
   return list(self)<list(other)
  else :
   return NotImplemented

 def __le__(self,other):
  if isinstance(other,deque):
   return list(self)<=list(other)
  else :
   return NotImplemented

 def __gt__(self,other):
  if isinstance(other,deque):
   return list(self)>list(other)
  else :
   return NotImplemented

 def __ge__(self,other):
  if isinstance(other,deque):
   return list(self)>=list(other)
  else :
   return NotImplemented

 def __iadd__(self,other):
  self. extend(other)
  return self

class deque_iterator(object):

 def __init__(self,deq,itergen):
  self. counter=len(deq)
  def giveup():
   self. counter=0

   raise RuntimeError("deque mutated during iteration")
  self. _gen=itergen(deq. state,giveup)

 def next(self):
  res=self. _gen. next()
  self. counter -=1
  return res

 def __iter__(self):
  return self

class defaultdict(dict):

 def __init__(self,*args,**kwds):
  if len(args)>0:
   default_factory=args[0]
   args=args[1:]
   if not callable(default_factory)and default_factory is not None :
    raise TypeError("first argument must be callable")
  else :
   default_factory=None
  dict. __init__(self,args,kwds)
  self. default_factory=default_factory
  self. update(args,kwds)
  super(defaultdict,self). __init__(*args,**kwds)

 def __missing__(self,key):

  if self. default_factory is None :
   raise KeyError(key)
  self[key]=value=self. default_factory()
  return value

 def __repr__(self,recurse=set()):
  if id(self)in recurse:
   return"defaultdict(...)"
  try :
   recurse. add(id(self))
   return"defaultdict(%s, %s)"%(repr(self. default_factory),super(defaultdict,self). __repr__())
  finally :
   recurse. remove(id(self))

 def copy(self):
  return type(self)(self. default_factory,self)

 def __copy__(self):
  return self. copy()

 def __reduce__(self):

  return (type(self),(self. default_factory,),None ,None ,self. items())

from operator import itemgetter as _itemgetter
from keyword import iskeyword as _iskeyword
import sys as _sys

def namedtuple(typename,field_names,verbose=False ,rename=False ):
 ''

 if isinstance(field_names,str):
  field_names=field_names. replace(',',' '). split()
 field_names=tuple(map(str,field_names))
 if rename:
  names=list(field_names)
  seen=set()
  for i,name in enumerate(names):
   if (not min(c. isalnum()or c =='_'for c in name)or _iskeyword(name)
   or not name or name[0]. isdigit()or name. startswith('_')
   or name in seen):
    names[i]='_%d'%i
   seen. add(name)
  field_names=tuple(names)
 for name in (typename,)+field_names:
  if not min(c. isalnum()or c =='_'for c in name):
   raise ValueError('Type names and field names can only contain alphanumeric characters and underscores: %r'%name)
  if _iskeyword(name):
   raise ValueError('Type names and field names cannot be a keyword: %r'%name)
  if name[0]. isdigit():
   raise ValueError('Type names and field names cannot start with a number: %r'%name)
 seen_names=set()
 for name in field_names:
  if name. startswith('_')and not rename:
   raise ValueError('Field names cannot start with an underscore: %r'%name)
  if name in seen_names:
   raise ValueError('Encountered duplicate field name: %r'%name)
  seen_names. add(name)

 numfields=len(field_names)
 argtxt=repr(field_names). replace("'","")[1:-1]
 reprtxt=', '. join('%s=%%r'%name for name in field_names)

 template='''class %(typename)s(tuple):
        '%(typename)s(%(argtxt)s)' \n
        __slots__ = () \n
        _fields = %(field_names)r \n
        def __new__(_cls, %(argtxt)s):
            return tuple.__new__(_cls, (%(argtxt)s)) \n
        @classmethod
        def _make(cls, iterable, new=tuple.__new__, len=len):
            'Make a new %(typename)s object from a sequence or iterable'
            result = new(cls, iterable)
            if len(result) != %(numfields)d:
                raise TypeError('Expected %(numfields)d arguments, got %%d' %% len(result))
            return result \n
        def __repr__(self):
            return '%(typename)s(%(reprtxt)s)' %% self \n
        def _asdict(self):
            'Return a new dict which maps field names to their values'
            return dict(zip(self._fields, self)) \n
        def _replace(_self, **kwds):
            'Return a new %(typename)s object replacing specified fields with new values'
            result = _self._make(map(kwds.pop, %(field_names)r, _self))
            if kwds:
                raise ValueError('Got unexpected field names: %%r' %% kwds.keys())
            return result \n
        def __getnewargs__(self):
            return tuple(self) \n\n'''%locals()
 for i,name in enumerate(field_names):
  template +='        %s = _property(_itemgetter(%d))\n'%(name,i)

 if verbose:
  print(template)

 namespace=dict(_itemgetter=_itemgetter,__name__='namedtuple_%s'%typename,
 _property=property,_tuple=tuple)
 try :
  exec(template,namespace)
 except SyntaxError as e:
  raise SyntaxError(e. message+':\n'+template)
 result=namespace[typename]

 try :
  result. __module__=_sys. _getframe(1). f_globals. get('__name__','__main__')
 except (AttributeError,ValueError):
  pass

 return result

if __name__ =='__main__':
 Point=namedtuple('Point',['x','y'])
 p=Point(11,y=22)
 print(p[0]+p[1])
 x,y=p
 print(x,y)
 print(p. x+p. y)
 print(p)
====_collections.py(file) end====

====_dummy_thread.py(file) start====
''

__all__=['error','start_new_thread','exit','get_ident','allocate_lock',
'interrupt_main','LockType']

TIMEOUT_MAX=2 **31

error=RuntimeError

def start_new_thread(function,args,kwargs={}):
 ''

 if type(args)!=type(tuple()):
  raise TypeError("2nd arg must be a tuple")
 if type(kwargs)!=type(dict()):
  raise TypeError("3rd arg must be a dict")
 global _main
 _main=False
 try :
  function(*args,**kwargs)
 except SystemExit:
  pass
 except :
  import traceback
  traceback. print_exc()
 _main=True
 global _interrupt
 if _interrupt:
  _interrupt=False
  raise KeyboardInterrupt

def exit():
 ''
 raise SystemExit

def get_ident():
 ''

 return -1

def allocate_lock():
 ''
 return LockType()

def stack_size(size=None ):
 ''
 if size is not None :
  raise error("setting thread stack size not supported")
 return 0

class LockType(object):
 ''

 def __init__(self):
  self. locked_status=False

 def acquire(self,waitflag=None ,timeout=-1):
  ''

  if waitflag is None or waitflag:
   self. locked_status=True
   return True
  else :
   if not self. locked_status:
    self. locked_status=True
    return True
   else :
    if timeout >0:
     import time
     time. sleep(timeout)
    return False

 __enter__=acquire

 def __exit__(self,typ,val,tb):
  self. release()

 def release(self):
  ''

  if not self. locked_status:
   raise error
  self. locked_status=False
  return True

 def locked(self):
  return self. locked_status

_interrupt=False

_main=True

def interrupt_main():
 ''

 if _main:
  raise KeyboardInterrupt
 else :
  global _interrupt
  _interrupt=True
====_dummy_thread.py(file) end====

====_sre.py(file) start====

''

MAXREPEAT=2147483648

import operator,sys
from sre_constants import ATCODES,OPCODES,CHCODES
from sre_constants import SRE_INFO_PREFIX,SRE_INFO_LITERAL
from sre_constants import SRE_FLAG_UNICODE,SRE_FLAG_LOCALE

import sys

MAGIC=20031017

CODESIZE=4

copyright="_sre.py 2.4c Copyright 2005 by Nik Haldimann"

def getcodesize():
 return CODESIZE

def compile(pattern,flags,code,groups=0,groupindex={},indexgroup=[None ]):
 ''

 return SRE_Pattern(pattern,flags,code,groups,groupindex,indexgroup)

def getlower(char_ord,flags):
 if (char_ord <128)or (flags&SRE_FLAG_UNICODE) or (flags&SRE_FLAG_LOCALE and char_ord <256):

  return ord(chr(char_ord). lower())
 else :
  return char_ord

class SRE_Pattern:

 def __init__(self,pattern,flags,code,groups=0,groupindex={},indexgroup=[None ]):
  self. pattern=pattern
  self. flags=flags
  self. groups=groups
  self. groupindex=groupindex
  self. _indexgroup=indexgroup
  self. _code=code

 def match(self,string,pos=0,endpos=sys. maxsize):
  ''

  state=_State(string,pos,endpos,self. flags)
  if state. match(self. _code):
   return SRE_Match(self,state)
  return None

 def search(self,string,pos=0,endpos=sys. maxsize):
  ''

  state=_State(string,pos,endpos,self. flags)
  if state. search(self. _code):
   return SRE_Match(self,state)
  else :
   return None

 def findall(self,string,pos=0,endpos=sys. maxsize):
  ''
  matchlist=[]
  state=_State(string,pos,endpos,self. flags)
  while state. start <=state. end:
   state. reset()
   state. string_position=state. start
   if not state. search(self. _code):
    break
   match=SRE_Match(self,state)
   if self. groups ==0 or self. groups ==1:
    item=match. group(self. groups)
   else :
    item=match. groups("")
   matchlist. append(item)
   if state. string_position ==state. start:
    state. start +=1
   else :
    state. start=state. string_position
  return matchlist

 def _subx(self,template,string,count=0,subn=False ):
  filter=template
  if not callable(template)and"\\"in template:

   import re as sre
   filter=sre. _subx(self,template)
  state=_State(string,0,sys. maxsize,self. flags)
  sublist=[]

  n=last_pos=0
  while not count or n <count:
   state. reset()
   state. string_position=state. start
   if not state. search(self. _code):
    break
   if last_pos <state. start:
    sublist. append(string[last_pos:state. start])
   if not (last_pos ==state. start and
   last_pos ==state. string_position and n >0):

    if callable(filter):
     sublist. append(filter(SRE_Match(self,state)))
    else :
     sublist. append(filter)
    last_pos=state. string_position
    n +=1
   if state. string_position ==state. start:
    state. start +=1
   else :
    state. start=state. string_position

  if last_pos <state. end:
   sublist. append(string[last_pos:state. end])
  item="". join(sublist)
  if subn:
   return item,n
  else :
   return item

 def sub(self,repl,string,count=0):
  ''

  return self. _subx(repl,string,count,False )

 def subn(self,repl,string,count=0):
  ''

  return self. _subx(repl,string,count,True )

 def split(self,string,maxsplit=0):
  ''
  splitlist=[]
  state=_State(string,0,sys. maxsize,self. flags)
  n=0
  last=state. start
  while not maxsplit or n <maxsplit:
   state. reset()
   state. string_position=state. start
   if not state. search(self. _code):
    break
   if state. start ==state. string_position:
    if last ==state. end:
     break
    state. start +=1
    continue
   splitlist. append(string[last:state. start])

   if self. groups:
    match=SRE_Match(self,state)
    splitlist. extend(list(match. groups(None )))
   n +=1
   last=state. start=state. string_position
  splitlist. append(string[last:state. end])
  return splitlist

 def finditer(self,string,pos=0,endpos=sys. maxsize):
  ''

  _list=[]
  _m=self. scanner(string,pos,endpos)
  _re=SRE_Scanner(self,string,pos,endpos)
  _m=_re. search()
  while _m:
   _list. append(_m)
   _m=_re. search()
  return _list

 def scanner(self,string,start=0,end=sys. maxsize):
  return SRE_Scanner(self,string,start,end)

 def __copy__(self):
  raise TypeError("cannot copy this pattern object")

 def __deepcopy__(self):
  raise TypeError("cannot copy this pattern object")

class SRE_Scanner:
 ''

 def __init__(self,pattern,string,start,end):
  self. pattern=pattern
  self. _state=_State(string,start,end,self. pattern. flags)

 def _match_search(self,matcher):
  state=self. _state
  state. reset()
  state. string_position=state. start
  match=None
  if matcher(self. pattern. _code):
   match=SRE_Match(self. pattern,state)
  if match is None or state. string_position ==state. start:
   state. start +=1
  else :
   state. start=state. string_position
  return match

 def match(self):
  return self. _match_search(self. _state. match)

 def search(self):
  return self. _match_search(self. _state. search)

class SRE_Match:

 def __init__(self,pattern,state):
  self. re=pattern
  self. string=state. string
  self. pos=state. pos
  self. endpos=state. end
  self. lastindex=state. lastindex
  if self. lastindex <0:
   self. lastindex=None
  self. regs=self. _create_regs(state)

  if self. lastindex is not None and pattern. _indexgroup and 0 <=self. lastindex <len(pattern. _indexgroup):

   self. lastgroup=pattern. _indexgroup[self. lastindex]
  else :
   self. lastgroup=None

 def _create_regs(self,state):
  ''
  regs=[(state. start,state. string_position)]
  for group in range(self. re. groups):
   mark_index=2 *group
   if mark_index+1 <len(state. marks)   and state. marks[mark_index]is not None   and state. marks[mark_index+1]is not None :
    regs. append((state. marks[mark_index],state. marks[mark_index+1]))
   else :
    regs. append((-1,-1))
  return tuple(regs)

 def _get_index(self,group):
  if isinstance(group,int):
   if group >=0 and group <=self. re. groups:
    return group
  else :
   if group in self. re. groupindex:
    return self. re. groupindex[group]
  raise IndexError("no such group")

 def _get_slice(self,group,default):
  group_indices=self. regs[group]
  if group_indices[0]>=0:
   return self. string[group_indices[0]:group_indices[1]]
  else :
   return default

 def start(self,group=0):
  ''

  return self. regs[self. _get_index(group)][0]

 def end(self,group=0):
  ''

  return self. regs[self. _get_index(group)][1]

 def span(self,group=0):
  ''
  return self. start(group),self. end(group)

 def expand(self,template):
  ''

  import sre
  return sre. _expand(self. re,self,template)

 def groups(self,default=None ):
  ''

  groups=[]
  for indices in self. regs[1:]:
   if indices[0]>=0:
    groups. append(self. string[indices[0]:indices[1]])
   else :
    groups. append(default)
  return tuple(groups)

 def groupdict(self,default=None ):
  ''

  groupdict={}
  for key,value in self. re. groupindex. items():
   groupdict[key]=self. _get_slice(value,default)
  return groupdict

 def group(self,*args):
  ''

  if len(args)==0:
   args=(0,)
  grouplist=[]
  for group in args:
   grouplist. append(self. _get_slice(self. _get_index(group),None ))
  if len(grouplist)==1:
   return grouplist[0]
  else :
   return tuple(grouplist)

 def __copy__():
  raise TypeError("cannot copy this pattern object")

 def __deepcopy__():
  raise TypeError("cannot copy this pattern object")

class _State:

 def __init__(self,string,start,end,flags):
  self. string=string
  if start <0:
   start=0
  if end >len(string):
   end=len(string)
  self. start=start
  self. string_position=self. start
  self. end=end
  self. pos=start
  self. flags=flags
  self. reset()

 def reset(self):
  self. marks=[]
  self. lastindex=-1
  self. marks_stack=[]
  self. context_stack=[]
  self. repeat=None

 def match(self,pattern_codes):

  dispatcher=_OpcodeDispatcher()
  self. context_stack. append(_MatchContext(self,pattern_codes))
  has_matched=None
  while len(self. context_stack)>0:
   context=self. context_stack[-1]
   has_matched=dispatcher. match(context)
   if has_matched is not None :
    self. context_stack. pop()
  return has_matched

 def search(self,pattern_codes):
  flags=0
  if pattern_codes[0]==OPCODES["info"]:

   if pattern_codes[2]&SRE_INFO_PREFIX and pattern_codes[5]>1:
    return self. fast_search(pattern_codes)
   flags=pattern_codes[2]
   pattern_codes=pattern_codes[pattern_codes[1]+1:]

  string_position=self. start
  if pattern_codes[0]==OPCODES["literal"]:

   character=pattern_codes[1]
   while True :
    while string_position <self. end    and ord(self. string[string_position])!=character:
     string_position +=1
    if string_position >=self. end:
     return False
    self. start=string_position
    string_position +=1
    self. string_position=string_position
    if flags&SRE_INFO_LITERAL:
     return True
    if self. match(pattern_codes[2:]):
     return True
   return False

  while string_position <=self. end:
   self. reset()
   self. start=self. string_position=string_position
   if self. match(pattern_codes):
    return True
   string_position +=1
  return False

 def fast_search(self,pattern_codes):
  ''

  flags=pattern_codes[2]
  prefix_len=pattern_codes[5]
  prefix_skip=pattern_codes[6]
  prefix=pattern_codes[7:7+prefix_len]
  overlap=pattern_codes[7+prefix_len -1:pattern_codes[1]+1]
  pattern_codes=pattern_codes[pattern_codes[1]+1:]
  i=0
  string_position=self. string_position
  while string_position <self. end:
   while True :
    if ord(self. string[string_position])!=prefix[i]:
     if i ==0:
      break
     else :
      i=overlap[i]
    else :
     i +=1
     if i ==prefix_len:

      self. start=string_position+1 -prefix_len
      self. string_position=string_position+1      -prefix_len+prefix_skip
      if flags&SRE_INFO_LITERAL:
       return True
      if self. match(pattern_codes[2 *prefix_skip:]):
       return True
      i=overlap[i]
     break
   string_position +=1
  return False

 def set_mark(self,mark_nr,position):
  if mark_nr&1:

   self. lastindex=mark_nr //2+1
  if mark_nr >=len(self. marks):
   self. marks. extend([None ]*(mark_nr -len(self. marks)+1))
  self. marks[mark_nr]=position

 def get_marks(self,group_index):
  marks_index=2 *group_index
  if len(self. marks)>marks_index+1:
   return self. marks[marks_index],self. marks[marks_index+1]
  else :
   return None ,None

 def marks_push(self):
  self. marks_stack. append((self. marks[:],self. lastindex))

 def marks_pop(self):
  self. marks,self. lastindex=self. marks_stack. pop()

 def marks_pop_keep(self):
  self. marks,self. lastindex=self. marks_stack[-1]

 def marks_pop_discard(self):
  self. marks_stack. pop()

 def lower(self,char_ord):
  return getlower(char_ord,self. flags)

class _MatchContext:

 def __init__(self,state,pattern_codes):
  self. state=state
  self. pattern_codes=pattern_codes
  self. string_position=state. string_position
  self. code_position=0
  self. has_matched=None

 def push_new_context(self,pattern_offset):
  ''

  child_context=_MatchContext(self. state,
  self. pattern_codes[self. code_position+pattern_offset:])

  self. state. context_stack. append(child_context)
  return child_context

 def peek_char(self,peek=0):
  return self. state. string[self. string_position+peek]

 def skip_char(self,skip_count):
  self. string_position +=skip_count

 def remaining_chars(self):
  return self. state. end -self. string_position

 def peek_code(self,peek=0):
  return self. pattern_codes[self. code_position+peek]

 def skip_code(self,skip_count):
  self. code_position +=skip_count

 def remaining_codes(self):
  return len(self. pattern_codes)-self. code_position

 def at_beginning(self):
  return self. string_position ==0

 def at_end(self):
  return self. string_position ==self. state. end

 def at_linebreak(self):
  return not self. at_end()and _is_linebreak(self. peek_char())

 def at_boundary(self,word_checker):
  if self. at_beginning()and self. at_end():
   return False
  that=not self. at_beginning()and word_checker(self. peek_char(-1))
  this=not self. at_end()and word_checker(self. peek_char())
  return this !=that

class _RepeatContext(_MatchContext):

 def __init__(self,context):
  _MatchContext. __init__(self,context. state,
  context. pattern_codes[context. code_position:])
  self. count=-1

  self. previous=context. state. repeat
  self. last_position=None

class _Dispatcher:

 DISPATCH_TABLE=None

 def dispatch(self,code,context):
  method=self. DISPATCH_TABLE. get(code,self. __class__. unknown)
  return method(self,context)

 def unknown(self,code,ctx):
  raise NotImplementedError()

 def build_dispatch_table(cls,code_dict,method_prefix):
  if cls. DISPATCH_TABLE is not None :
   return
  table={}
  for key,value in code_dict. items():
   if hasattr(cls,"%s%s"%(method_prefix,key)):
    table[value]=getattr(cls,"%s%s"%(method_prefix,key))
  cls. DISPATCH_TABLE=table

 build_dispatch_table=classmethod(build_dispatch_table)

class _OpcodeDispatcher(_Dispatcher):

 def __init__(self):
  self. executing_contexts={}
  self. at_dispatcher=_AtcodeDispatcher()
  self. ch_dispatcher=_ChcodeDispatcher()
  self. set_dispatcher=_CharsetDispatcher()

 def match(self,context):
  ''

  while context. remaining_codes()>0 and context. has_matched is None :
   opcode=context. peek_code()
   if not self. dispatch(opcode,context):
    return None
  if context. has_matched is None :
   context. has_matched=False
  return context. has_matched

 def dispatch(self,opcode,context):
  ''

  if id(context)in self. executing_contexts:
   generator=self. executing_contexts[id(context)]
   del self. executing_contexts[id(context)]
   has_finished=next(generator)
  else :
   method=self. DISPATCH_TABLE. get(opcode,_OpcodeDispatcher. unknown)
   has_finished=method(self,context)
   if hasattr(has_finished,"__next__"):
    generator=has_finished
    has_finished=next(generator)
  if not has_finished:
   self. executing_contexts[id(context)]=generator
  return has_finished

 def op_success(self,ctx):

  ctx. state. string_position=ctx. string_position
  ctx. has_matched=True
  return True

 def op_failure(self,ctx):

  ctx. has_matched=False
  return True

 def general_op_literal(self,ctx,compare,decorate=lambda x:x):

  if ctx. at_end()or not compare(decorate(ord(ctx. peek_char())),
  decorate(ctx. peek_code(1))):
   ctx. has_matched=False
  ctx. skip_code(2)
  ctx. skip_char(1)

 def op_literal(self,ctx):

  self. general_op_literal(ctx,operator. eq)
  return True

 def op_not_literal(self,ctx):

  self. general_op_literal(ctx,operator. ne)
  return True

 def op_literal_ignore(self,ctx):

  self. general_op_literal(ctx,operator. eq,ctx. state. lower)
  return True

 def op_not_literal_ignore(self,ctx):

  self. general_op_literal(ctx,operator. ne,ctx. state. lower)
  return True

 def op_at(self,ctx):

  if not self. at_dispatcher. dispatch(ctx. peek_code(1),ctx):
   ctx. has_matched=False

   return True
  ctx. skip_code(2)
  return True

 def op_category(self,ctx):

  if ctx. at_end()or not self. ch_dispatcher. dispatch(ctx. peek_code(1),ctx):
   ctx. has_matched=False

   return True
  ctx. skip_code(2)
  ctx. skip_char(1)
  return True

 def op_any(self,ctx):

  if ctx. at_end()or ctx. at_linebreak():
   ctx. has_matched=False

   return True
  ctx. skip_code(1)
  ctx. skip_char(1)
  return True

 def op_any_all(self,ctx):

  if ctx. at_end():
   ctx. has_matched=False

   return True
  ctx. skip_code(1)
  ctx. skip_char(1)
  return True

 def general_op_in(self,ctx,decorate=lambda x:x):

  if ctx. at_end():
   ctx. has_matched=False

   return
  skip=ctx. peek_code(1)
  ctx. skip_code(2)

  if not self. check_charset(ctx,decorate(ord(ctx. peek_char()))):

   ctx. has_matched=False
   return
  ctx. skip_code(skip -1)
  ctx. skip_char(1)

 def op_in(self,ctx):

  self. general_op_in(ctx)
  return True

 def op_in_ignore(self,ctx):

  self. general_op_in(ctx,ctx. state. lower)
  return True

 def op_jump(self,ctx):

  ctx. skip_code(ctx. peek_code(1)+1)
  return True

 op_info=op_jump

 def op_mark(self,ctx):

  ctx. state. set_mark(ctx. peek_code(1),ctx. string_position)
  ctx. skip_code(2)
  return True

 def op_branch(self,ctx):

  ctx. state. marks_push()
  ctx. skip_code(1)
  current_branch_length=ctx. peek_code(0)
  while current_branch_length:

   if not (ctx. peek_code(1)==OPCODES["literal"]and   (ctx. at_end()or ctx. peek_code(2)!=ord(ctx. peek_char()))):
    ctx. state. string_position=ctx. string_position
    child_context=ctx. push_new_context(1)

    yield False
    if child_context. has_matched:
     ctx. has_matched=True
     yield True
    ctx. state. marks_pop_keep()
   ctx. skip_code(current_branch_length)
   current_branch_length=ctx. peek_code(0)
  ctx. state. marks_pop_discard()
  ctx. has_matched=False

  yield True

 def op_repeat_one(self,ctx):

  mincount=ctx. peek_code(2)
  maxcount=ctx. peek_code(3)

  if ctx. remaining_chars()<mincount:
   ctx. has_matched=False
   yield True
  ctx. state. string_position=ctx. string_position
  count=self. count_repetitions(ctx,maxcount)
  ctx. skip_char(count)
  if count <mincount:
   ctx. has_matched=False
   yield True
  if ctx. peek_code(ctx. peek_code(1)+1)==OPCODES["success"]:

   ctx. state. string_position=ctx. string_position
   ctx. has_matched=True
   yield True

  ctx. state. marks_push()
  if ctx. peek_code(ctx. peek_code(1)+1)==OPCODES["literal"]:

   char=ctx. peek_code(ctx. peek_code(1)+2)
   while True :
    while count >=mincount and    (ctx. at_end()or ord(ctx. peek_char())!=char):
     ctx. skip_char(-1)
     count -=1
    if count <mincount:
     break
    ctx. state. string_position=ctx. string_position
    child_context=ctx. push_new_context(ctx. peek_code(1)+1)

    yield False
    if child_context. has_matched:
     ctx. has_matched=True
     yield True
    ctx. skip_char(-1)
    count -=1
    ctx. state. marks_pop_keep()

  else :

   while count >=mincount:
    ctx. state. string_position=ctx. string_position
    child_context=ctx. push_new_context(ctx. peek_code(1)+1)
    yield False
    if child_context. has_matched:
     ctx. has_matched=True
     yield True
    ctx. skip_char(-1)
    count -=1
    ctx. state. marks_pop_keep()

  ctx. state. marks_pop_discard()
  ctx. has_matched=False

  yield True

 def op_min_repeat_one(self,ctx):

  mincount=ctx. peek_code(2)
  maxcount=ctx. peek_code(3)

  if ctx. remaining_chars()<mincount:
   ctx. has_matched=False
   yield True
  ctx. state. string_position=ctx. string_position
  if mincount ==0:
   count=0
  else :
   count=self. count_repetitions(ctx,mincount)
   if count <mincount:
    ctx. has_matched=False

    yield True
   ctx. skip_char(count)
  if ctx. peek_code(ctx. peek_code(1)+1)==OPCODES["success"]:

   ctx. state. string_position=ctx. string_position
   ctx. has_matched=True
   yield True

  ctx. state. marks_push()
  while maxcount ==MAXREPEAT or count <=maxcount:
   ctx. state. string_position=ctx. string_position
   child_context=ctx. push_new_context(ctx. peek_code(1)+1)

   yield False
   if child_context. has_matched:
    ctx. has_matched=True
    yield True
   ctx. state. string_position=ctx. string_position
   if self. count_repetitions(ctx,1)==0:
    break
   ctx. skip_char(1)
   count +=1
   ctx. state. marks_pop_keep()

  ctx. state. marks_pop_discard()
  ctx. has_matched=False
  yield True

 def op_repeat(self,ctx):

  repeat=_RepeatContext(ctx)
  ctx. state. repeat=repeat
  ctx. state. string_position=ctx. string_position
  child_context=ctx. push_new_context(ctx. peek_code(1)+1)

  yield False
  ctx. state. repeat=repeat. previous
  ctx. has_matched=child_context. has_matched
  yield True

 def op_max_until(self,ctx):

  repeat=ctx. state. repeat

  if repeat is None :

   raise RuntimeError("Internal re error: MAX_UNTIL without REPEAT.")
  mincount=repeat. peek_code(2)
  maxcount=repeat. peek_code(3)
  ctx. state. string_position=ctx. string_position
  count=repeat. count+1

  if count <mincount:

   repeat. count=count
   child_context=repeat. push_new_context(4)
   yield False
   ctx. has_matched=child_context. has_matched
   if not ctx. has_matched:
    repeat. count=count -1
    ctx. state. string_position=ctx. string_position
   yield True

  if (count <maxcount or maxcount ==MAXREPEAT)  and ctx. state. string_position !=repeat. last_position:

   repeat. count=count
   ctx. state. marks_push()
   save_last_position=repeat. last_position
   repeat. last_position=ctx. state. string_position
   child_context=repeat. push_new_context(4)
   yield False
   repeat. last_position=save_last_position
   if child_context. has_matched:
    ctx. state. marks_pop_discard()
    ctx. has_matched=True
    yield True
   ctx. state. marks_pop()
   repeat. count=count -1
   ctx. state. string_position=ctx. string_position

  ctx. state. repeat=repeat. previous
  child_context=ctx. push_new_context(1)

  yield False
  ctx. has_matched=child_context. has_matched
  if not ctx. has_matched:
   ctx. state. repeat=repeat
   ctx. state. string_position=ctx. string_position
  yield True

 def op_min_until(self,ctx):

  repeat=ctx. state. repeat
  if repeat is None :
   raise RuntimeError("Internal re error: MIN_UNTIL without REPEAT.")
  mincount=repeat. peek_code(2)
  maxcount=repeat. peek_code(3)
  ctx. state. string_position=ctx. string_position
  count=repeat. count+1

  if count <mincount:

   repeat. count=count
   child_context=repeat. push_new_context(4)
   yield False
   ctx. has_matched=child_context. has_matched
   if not ctx. has_matched:
    repeat. count=count -1
    ctx. state. string_position=ctx. string_position
   yield True

  ctx. state. marks_push()
  ctx. state. repeat=repeat. previous
  child_context=ctx. push_new_context(1)

  yield False
  if child_context. has_matched:
   ctx. has_matched=True
   yield True
  ctx. state. repeat=repeat
  ctx. state. string_position=ctx. string_position
  ctx. state. marks_pop()

  if count >=maxcount and maxcount !=MAXREPEAT:
   ctx. has_matched=False

   yield True
  repeat. count=count
  child_context=repeat. push_new_context(4)
  yield False
  ctx. has_matched=child_context. has_matched
  if not ctx. has_matched:
   repeat. count=count -1
   ctx. state. string_position=ctx. string_position
  yield True

 def general_op_groupref(self,ctx,decorate=lambda x:x):
  group_start,group_end=ctx. state. get_marks(ctx. peek_code(1))
  if group_start is None or group_end is None or group_end <group_start:
   ctx. has_matched=False
   return True
  while group_start <group_end:
   if ctx. at_end()or decorate(ord(ctx. peek_char()))   !=decorate(ord(ctx. state. string[group_start])):
    ctx. has_matched=False

    return True
   group_start +=1
   ctx. skip_char(1)
  ctx. skip_code(2)
  return True

 def op_groupref(self,ctx):

  return self. general_op_groupref(ctx)

 def op_groupref_ignore(self,ctx):

  return self. general_op_groupref(ctx,ctx. state. lower)

 def op_groupref_exists(self,ctx):

  group_start,group_end=ctx. state. get_marks(ctx. peek_code(1))
  if group_start is None or group_end is None or group_end <group_start:
   ctx. skip_code(ctx. peek_code(2)+1)
  else :
   ctx. skip_code(3)
  return True

 def op_assert(self,ctx):

  ctx. state. string_position=ctx. string_position -ctx. peek_code(2)
  if ctx. state. string_position <0:
   ctx. has_matched=False
   yield True
  child_context=ctx. push_new_context(3)
  yield False
  if child_context. has_matched:
   ctx. skip_code(ctx. peek_code(1)+1)
  else :
   ctx. has_matched=False
  yield True

 def op_assert_not(self,ctx):

  ctx. state. string_position=ctx. string_position -ctx. peek_code(2)
  if ctx. state. string_position >=0:
   child_context=ctx. push_new_context(3)
   yield False
   if child_context. has_matched:
    ctx. has_matched=False
    yield True
  ctx. skip_code(ctx. peek_code(1)+1)
  yield True

 def unknown(self,ctx):

  raise RuntimeError("Internal re error. Unknown opcode: %s"%ctx. peek_code())

 def check_charset(self,ctx,char):
  ''

  self. set_dispatcher. reset(char)
  save_position=ctx. code_position
  result=None
  while result is None :
   result=self. set_dispatcher. dispatch(ctx. peek_code(),ctx)
  ctx. code_position=save_position

  return result

 def count_repetitions(self,ctx,maxcount):
  ''

  count=0
  real_maxcount=ctx. state. end -ctx. string_position
  if maxcount <real_maxcount and maxcount !=MAXREPEAT:
   real_maxcount=maxcount

  code_position=ctx. code_position
  string_position=ctx. string_position
  ctx. skip_code(4)
  reset_position=ctx. code_position
  while count <real_maxcount:

   ctx. code_position=reset_position
   self. dispatch(ctx. peek_code(),ctx)

   if ctx. has_matched is False :
    break
   count +=1
  ctx. has_matched=None
  ctx. code_position=code_position
  ctx. string_position=string_position
  return count

 def _log(self,context,opname,*args):
  arg_string=("%s "*len(args))%args
  _log("|%s|%s|%s %s"%(context. pattern_codes,
  context. string_position,opname,arg_string))

_OpcodeDispatcher. build_dispatch_table(OPCODES,"op_")

class _CharsetDispatcher(_Dispatcher):

 def __init__(self):
  self. ch_dispatcher=_ChcodeDispatcher()

 def reset(self,char):
  self. char=char
  self. ok=True

 def set_failure(self,ctx):
  return not self. ok
 def set_literal(self,ctx):

  if ctx. peek_code(1)==self. char:
   return self. ok
  else :
   ctx. skip_code(2)
 def set_category(self,ctx):

  if self. ch_dispatcher. dispatch(ctx. peek_code(1),ctx):
   return self. ok
  else :
   ctx. skip_code(2)
 def set_charset(self,ctx):

  char_code=self. char
  ctx. skip_code(1)
  if CODESIZE ==2:
   if char_code <256 and ctx. peek_code(char_code >>4)   &(1 <<(char_code&15)):
    return self. ok
   ctx. skip_code(16)
  else :
   if char_code <256 and ctx. peek_code(char_code >>5)   &(1 <<(char_code&31)):
    return self. ok
   ctx. skip_code(8)
 def set_range(self,ctx):

  if ctx. peek_code(1)<=self. char <=ctx. peek_code(2):
   return self. ok
  ctx. skip_code(3)
 def set_negate(self,ctx):
  self. ok=not self. ok
  ctx. skip_code(1)

 def set_bigcharset(self,ctx):
  raise NotImplementationError("_sre.py: set_bigcharset, array not implemented")

  char_code=self. char
  count=ctx. peek_code(1)
  ctx. skip_code(2)
  if char_code <65536:
   block_index=char_code >>8

   a=array. array("B")
   a. fromstring(array. array(CODESIZE ==2 and"H"or"I",
   [ctx. peek_code(block_index //CODESIZE)]). tostring())
   block=a[block_index %CODESIZE]
   ctx. skip_code(256 //CODESIZE)
   block_value=ctx. peek_code(block *(32 //CODESIZE)
   +((char_code&255)>>(CODESIZE ==2 and 4 or 5)))
   if block_value&(1 <<(char_code&((8 *CODESIZE)-1))):
    return self. ok
  else :
   ctx. skip_code(256 //CODESIZE)
  ctx. skip_code(count *(32 //CODESIZE))

 def unknown(self,ctx):
  return False

_CharsetDispatcher. build_dispatch_table(OPCODES,"set_")

class _AtcodeDispatcher(_Dispatcher):

 def at_beginning(self,ctx):
  return ctx. at_beginning()
 at_beginning_string=at_beginning
 def at_beginning_line(self,ctx):
  return ctx. at_beginning()or _is_linebreak(ctx. peek_char(-1))
 def at_end(self,ctx):
  return (ctx. remaining_chars()==1 and ctx. at_linebreak())or ctx. at_end()
 def at_end_line(self,ctx):
  return ctx. at_linebreak()or ctx. at_end()
 def at_end_string(self,ctx):
  return ctx. at_end()
 def at_boundary(self,ctx):
  return ctx. at_boundary(_is_word)
 def at_non_boundary(self,ctx):
  return not ctx. at_boundary(_is_word)
 def at_loc_boundary(self,ctx):
  return ctx. at_boundary(_is_loc_word)
 def at_loc_non_boundary(self,ctx):
  return not ctx. at_boundary(_is_loc_word)
 def at_uni_boundary(self,ctx):
  return ctx. at_boundary(_is_uni_word)
 def at_uni_non_boundary(self,ctx):
  return not ctx. at_boundary(_is_uni_word)
 def unknown(self,ctx):
  return False

_AtcodeDispatcher. build_dispatch_table(ATCODES,"")

class _ChcodeDispatcher(_Dispatcher):

 def category_digit(self,ctx):
  return _is_digit(ctx. peek_char())
 def category_not_digit(self,ctx):
  return not _is_digit(ctx. peek_char())
 def category_space(self,ctx):
  return _is_space(ctx. peek_char())
 def category_not_space(self,ctx):
  return not _is_space(ctx. peek_char())
 def category_word(self,ctx):
  return _is_word(ctx. peek_char())
 def category_not_word(self,ctx):
  return not _is_word(ctx. peek_char())
 def category_linebreak(self,ctx):
  return _is_linebreak(ctx. peek_char())
 def category_not_linebreak(self,ctx):
  return not _is_linebreak(ctx. peek_char())
 def category_loc_word(self,ctx):
  return _is_loc_word(ctx. peek_char())
 def category_loc_not_word(self,ctx):
  return not _is_loc_word(ctx. peek_char())
 def category_uni_digit(self,ctx):
  return ctx. peek_char(). isdigit()
 def category_uni_not_digit(self,ctx):
  return not ctx. peek_char(). isdigit()
 def category_uni_space(self,ctx):
  return ctx. peek_char(). isspace()
 def category_uni_not_space(self,ctx):
  return not ctx. peek_char(). isspace()
 def category_uni_word(self,ctx):
  return _is_uni_word(ctx. peek_char())
 def category_uni_not_word(self,ctx):
  return not _is_uni_word(ctx. peek_char())
 def category_uni_linebreak(self,ctx):
  return ord(ctx. peek_char())in _uni_linebreaks
 def category_uni_not_linebreak(self,ctx):
  return ord(ctx. peek_char())not in _uni_linebreaks
 def unknown(self,ctx):
  return False

_ChcodeDispatcher. build_dispatch_table(CHCODES,"")

_ascii_char_info=[0,0,0,0,0,0,0,0,0,2,6,2,
2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,25,25,25,25,25,25,25,25,
25,25,0,0,0,0,0,0,0,24,24,24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,
0,0,16,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,0,0]

def _is_digit(char):
 code=ord(char)
 return code <128 and _ascii_char_info[code]&1

def _is_space(char):
 code=ord(char)
 return code <128 and _ascii_char_info[code]&2

def _is_word(char):

 code=ord(char)
 return code <128 and _ascii_char_info[code]&16

def _is_loc_word(char):
 return (not (ord(char)&~255)and char. isalnum())or char =='_'

def _is_uni_word(char):

 return chr(ord(char)). isalnum()or char =='_'

def _is_linebreak(char):
 return char =="\n"

_uni_linebreaks=[10,13,28,29,30,133,8232,8233]

def _log(message):
 if 0:
  print(message)
====_sre.py(file) end====

====_thread.py(file) start====
''

__all__=['error','start_new_thread','exit','get_ident','allocate_lock',
'interrupt_main','LockType']

TIMEOUT_MAX=2 **31

error=RuntimeError

def start_new_thread(function,args,kwargs={}):
 ''

 if type(args)!=type(tuple()):
  raise TypeError("2nd arg must be a tuple")
 if type(kwargs)!=type(dict()):
  raise TypeError("3rd arg must be a dict")
 global _main
 _main=False
 try :
  function(*args,**kwargs)
 except SystemExit:
  pass
 except :
  import traceback
  traceback. print_exc()
 _main=True
 global _interrupt
 if _interrupt:
  _interrupt=False
  raise KeyboardInterrupt

def exit():
 ''
 raise SystemExit

def get_ident():
 ''

 return -1

def allocate_lock():
 ''
 return LockType()

def stack_size(size=None ):
 ''
 if size is not None :
  raise error("setting thread stack size not supported")
 return 0

class LockType(object):
 ''

 def __init__(self):
  self. locked_status=False

 def acquire(self,waitflag=None ,timeout=-1):
  ''

  if waitflag is None or waitflag:
   self. locked_status=True
   return True
  else :
   if not self. locked_status:
    self. locked_status=True
    return True
   else :
    if timeout >0:
     import time
     time. sleep(timeout)
    return False

 __enter__=acquire

 def __exit__(self,typ,val,tb):
  self. release()

 def release(self):
  ''

  if not self. locked_status:
   raise error
  self. locked_status=False
  return True

 def locked(self):
  return self. locked_status

_interrupt=False

_main=True

def interrupt_main():
 ''

 if _main:
  raise KeyboardInterrupt
 else :
  global _interrupt
  _interrupt=True

class _local:
 pass====_thread.py(file) end====

====_weakref.py(file) start====
class ProxyType:

 def __init__(self,obj):
  self. obj=obj

CallableProxyType=ProxyType
ProxyTypes=[ProxyType,CallableProxyType]

class ReferenceType:

 def __init__(self,obj,callback):
  self. obj=obj
  self. callback=callback

class ref:

 def __init__(self,obj,callback=None ):
  self. obj=ReferenceType(obj,callback)
  self. callback=callback

 def __call__(self):
  return self. obj. obj

def getweakrefcount(obj):
 return 1

def getweakrefs(obj):
 return obj

def proxy(obj,callback=None ):
 return ProxyType(obj)

====_weakref.py(file) end====

====_weakrefset.py(file) start====


from _weakref import ref

__all__=['WeakSet']

class _IterationGuard:

 def __init__(self,weakcontainer):

  self. weakcontainer=ref(weakcontainer)

 def __enter__(self):
  w=self. weakcontainer()
  if w is not None :
   w. _iterating. add(self)
  return self

 def __exit__(self,e,t,b):
  w=self. weakcontainer()
  if w is not None :
   s=w. _iterating
   s. remove(self)
   if not s:
    w. _commit_removals()

class WeakSet:
 def __init__(self,data=None ):
  self. data=set()
  def _remove(item,selfref=ref(self)):
   self=selfref()
   if self is not None :
    if self. _iterating:
     self. _pending_removals. append(item)
    else :
     self. data. discard(item)
  self. _remove=_remove

  self. _pending_removals=[]
  self. _iterating=set()
  if data is not None :
   self. update(data)

 def _commit_removals(self):
  l=self. _pending_removals
  discard=self. data. discard
  while l:
   discard(l. pop())

 def __iter__(self):
  with _IterationGuard(self):
   for itemref in self. data:
    item=itemref()
    if item is not None :
     yield item

 def __len__(self):
  return len(self. data)-len(self. _pending_removals)

 def __contains__(self,item):
  try :
   wr=ref(item)
  except TypeError:
   return False
  return wr in self. data

 def __reduce__(self):
  return (self. __class__,(list(self),),
  getattr(self,'__dict__',None ))

 def add(self,item):
  if self. _pending_removals:
   self. _commit_removals()
  self. data. add(ref(item,self. _remove))

 def clear(self):
  if self. _pending_removals:
   self. _commit_removals()
  self. data. clear()

 def copy(self):
  return self. __class__(self)

 def pop(self):
  if self. _pending_removals:
   self. _commit_removals()
  while True :
   try :
    itemref=self. data. pop()
   except KeyError:
    raise KeyError('pop from empty WeakSet')
   item=itemref()
   if item is not None :
    return item

 def remove(self,item):
  if self. _pending_removals:
   self. _commit_removals()
  self. data. remove(ref(item))

 def discard(self,item):
  if self. _pending_removals:
   self. _commit_removals()
  self. data. discard(ref(item))

 def update(self,other):
  if self. _pending_removals:
   self. _commit_removals()
  for element in other:
   self. add(element)

 def __ior__(self,other):
  self. update(other)
  return self

 def difference(self,other):
  newset=self. copy()
  newset. difference_update(other)
  return newset
 __sub__=difference

 def difference_update(self,other):
  self. __isub__(other)
 def __isub__(self,other):
  if self. _pending_removals:
   self. _commit_removals()
  if self is other:
   self. data. clear()
  else :
   self. data. difference_update(ref(item)for item in other)
  return self

 def intersection(self,other):
  return self. __class__(item for item in other if item in self)
 __and__=intersection

 def intersection_update(self,other):
  self. __iand__(other)
 def __iand__(self,other):
  if self. _pending_removals:
   self. _commit_removals()
  self. data. intersection_update(ref(item)for item in other)
  return self

 def issubset(self,other):
  return self. data. issubset(ref(item)for item in other)
 __le__=issubset

 def __lt__(self,other):
  return self. data <set(ref(item)for item in other)

 def issuperset(self,other):
  return self. data. issuperset(ref(item)for item in other)
 __ge__=issuperset

 def __gt__(self,other):
  return self. data >set(ref(item)for item in other)

 def __eq__(self,other):
  if not isinstance(other,self. __class__):
   return NotImplemented
  return self. data ==set(ref(item)for item in other)

 def symmetric_difference(self,other):
  newset=self. copy()
  newset. symmetric_difference_update(other)
  return newset
 __xor__=symmetric_difference

 def symmetric_difference_update(self,other):
  self. __ixor__(other)
 def __ixor__(self,other):
  if self. _pending_removals:
   self. _commit_removals()
  if self is other:
   self. data. clear()
  else :
   self. data. symmetric_difference_update(ref(item,self. _remove)for item in other)
  return self

 def union(self,other):
  return self. __class__(e for s in (self,other)for e in s)
 __or__=union

 def isdisjoint(self,other):
  return len(self. intersection(other))==0
====_weakrefset.py(file) end====

====abc.py(file) start====


from _weakrefset import WeakSet

def abstractmethod(funcobj):
 ''

 funcobj. __isabstractmethod__=True
 return funcobj

class abstractclassmethod(classmethod):
 ''

 __isabstractmethod__=True

 def __init__(self,callable):
  callable. __isabstractmethod__=True
  super(). __init__(callable)

class abstractstaticmethod(staticmethod):
 ''

 __isabstractmethod__=True

 def __init__(self,callable):
  callable. __isabstractmethod__=True
  super(). __init__(callable)

class abstractproperty(property):
 ''

 __isabstractmethod__=True

class ABCMeta(type):

 ''

 _abc_invalidation_counter=0

 def __new__(mcls,name,bases,namespace):
  cls=super(). __new__(mcls,name,bases,namespace)

  abstracts={name
  for name,value in namespace. items()
  if getattr(value,"__isabstractmethod__",False )}
  for base in bases:
   for name in getattr(base,"__abstractmethods__",set()):
    value=getattr(cls,name,None )
    if getattr(value,"__isabstractmethod__",False ):
     abstracts. add(name)
  cls. __abstractmethods__=frozenset(abstracts)

  cls. _abc_registry=WeakSet()
  cls. _abc_cache=WeakSet()
  cls. _abc_negative_cache=WeakSet()
  cls. _abc_negative_cache_version=ABCMeta. _abc_invalidation_counter
  return cls

 def register(cls,subclass):
  ''

  if not isinstance(subclass,type):
   raise TypeError("Can only register classes")
  if issubclass(subclass,cls):
   return subclass

  if issubclass(cls,subclass):

   raise RuntimeError("Refusing to create an inheritance cycle")
  cls. _abc_registry. add(subclass)
  ABCMeta. _abc_invalidation_counter +=1
  return subclass

 def _dump_registry(cls,file=None ):
  ''
  print("Class: %s.%s"%(cls. __module__,cls. __name__),file=file)
  print("Inv.counter: %s"%ABCMeta. _abc_invalidation_counter,file=file)
  for name in sorted(cls. __dict__. keys()):
   if name. startswith("_abc_"):
    value=getattr(cls,name)
    print("%s: %r"%(name,value),file=file)

 def __instancecheck__(cls,instance):
  ''

  subclass=instance. __class__
  if subclass in cls. _abc_cache:
   return True
  subtype=type(instance)
  if subtype is subclass:
   if (cls. _abc_negative_cache_version ==
   ABCMeta. _abc_invalidation_counter and
   subclass in cls. _abc_negative_cache):
    return False

   return cls. __subclasscheck__(subclass)
  return any(cls. __subclasscheck__(c)for c in {subclass,subtype})

 def __subclasscheck__(cls,subclass):
  ''

  if subclass in cls. _abc_cache:
   return True

  if cls. _abc_negative_cache_version <ABCMeta. _abc_invalidation_counter:

   cls. _abc_negative_cache=WeakSet()
   cls. _abc_negative_cache_version=ABCMeta. _abc_invalidation_counter
  elif subclass in cls. _abc_negative_cache:
   return False

  ok=cls. __subclasshook__(subclass)
  if ok is not NotImplemented:
   assert isinstance(ok,bool)
   if ok:
    cls. _abc_cache. add(subclass)
   else :
    cls. _abc_negative_cache. add(subclass)
   return ok

  if cls in getattr(subclass,'__mro__',()):
   cls. _abc_cache. add(subclass)
   return True

  for rcls in cls. _abc_registry:
   if issubclass(subclass,rcls):
    cls. _abc_cache. add(subclass)
    return True

  for scls in cls. __subclasses__():
   if issubclass(subclass,scls):
    cls. _abc_cache. add(subclass)
    return True

  cls. _abc_negative_cache. add(subclass)
  return False
====abc.py(file) end====

====browser.ajax.py(file) start====
from _ajax import *

class Ajax:
 ''

 def __init__(self,url,method="GET",async=True ):
  ''
  self. req=ajax1()
  self. req. open(method,url,async)

 def send(self,data=None ):
  if data is not None :
   self. req. send(data)
  else :
   self. req. send()

 def set_header(self,key,value):
  self. req. set_header(key,value)

 def set_timeout(self,seconds,func):
  self. req. set_timeout(seconds,func)

 def uninitialized(self,f):
  self. req. bind("uninitialized",f)
  return f

 def loading(self,f):
  self. req. bind("loading",f)
  return f

 def loaded(self,f):
  self. req. bind("loaded",f)
  return f

 def interactive(self,f):
  self. req. bind("interactive",f)
  return f

 def complete(self,f):
  self. req. bind("complete",f)
  return f

 @property
 def status(self):
  return self. req. status

 @property
 def text(self):
  return self. req. responseText====browser.ajax.py(file) end====

====builtins.js(file) start====
var $module = (function(){
    var obj = {__class__:__BRYTHON__.$ModuleDict,__name__:'builtins'}
    var builtin_names = ['ArithmeticError', 'AssertionError', 'AttributeError', 
    'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 
    'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 
    'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 
    'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 
    'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 
    'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 
    'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError',
    'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 
    'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 
    'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 
    'ProcessLookupError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 
    'RuntimeWarning', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 
    'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 
    'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 
    'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 
    'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '_', 
    '__build_class__', '__debug__', '__doc__', '__import__', '__name__', 
    '__package__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 
    'bytes','callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 
    'credits','delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 
    'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 
    'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 
    'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 
    'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 
    'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 
    'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 
    'vars', 'zip']
    for(var i=0, _len_i = builtin_names.length; i < _len_i;i++){
        try{eval("obj['"+builtin_names[i]+"']=__BRYTHON__.builtins."+builtin_names[i])}
        catch(err){if (__BRYTHON__.$debug) {console.log(err)}}
    }
    return obj
})()
====builtins.js(file) end====

====codecs.py(file) start====
''

import builtins,sys

try :
 from _codecs import *
except ImportError as why:
 raise SystemError('Failed to load the builtin codecs: %s'%why)

__all__=["register","lookup","open","EncodedFile","BOM","BOM_BE",
"BOM_LE","BOM32_BE","BOM32_LE","BOM64_BE","BOM64_LE",
"BOM_UTF8","BOM_UTF16","BOM_UTF16_LE","BOM_UTF16_BE",
"BOM_UTF32","BOM_UTF32_LE","BOM_UTF32_BE",
"strict_errors","ignore_errors","replace_errors",
"xmlcharrefreplace_errors",
"register_error","lookup_error"]

BOM_UTF8=b'\xef\xbb\xbf'

BOM_LE=BOM_UTF16_LE=b'\xff\xfe'

BOM_BE=BOM_UTF16_BE=b'\xfe\xff'

BOM_UTF32_LE=b'\xff\xfe\x00\x00'

BOM_UTF32_BE=b'\x00\x00\xfe\xff'

if sys. byteorder =='little':

 BOM=BOM_UTF16=BOM_UTF16_LE

 BOM_UTF32=BOM_UTF32_LE

else :

 BOM=BOM_UTF16=BOM_UTF16_BE

 BOM_UTF32=BOM_UTF32_BE

BOM32_LE=BOM_UTF16_LE
BOM32_BE=BOM_UTF16_BE
BOM64_LE=BOM_UTF32_LE
BOM64_BE=BOM_UTF32_BE

class CodecInfo(tuple):

 def __new__(cls,encode,decode,streamreader=None ,streamwriter=None ,
 incrementalencoder=None ,incrementaldecoder=None ,name=None ):
  self=tuple. __new__(cls,(encode,decode,streamreader,streamwriter))
  self. name=name
  self. encode=encode
  self. decode=decode
  self. incrementalencoder=incrementalencoder
  self. incrementaldecoder=incrementaldecoder
  self. streamwriter=streamwriter
  self. streamreader=streamreader
  return self

 def __repr__(self):
  return"<%s.%s object for encoding %s at 0x%x>"%  (self. __class__. __module__,self. __class__. __name__,
  self. name,id(self))

class Codec:

 ''

 def encode(self,input,errors='strict'):

  ''

  raise NotImplementedError

 def decode(self,input,errors='strict'):

  ''

  raise NotImplementedError

class IncrementalEncoder(object):
 ''

 def __init__(self,errors='strict'):
  ''

  self. errors=errors
  self. buffer=""

 def encode(self,input,final=False ):
  ''

  raise NotImplementedError

 def reset(self):
  ''

 def getstate(self):
  ''

  return 0

 def setstate(self,state):
  ''

class BufferedIncrementalEncoder(IncrementalEncoder):
 ''

 def __init__(self,errors='strict'):
  IncrementalEncoder. __init__(self,errors)

  self. buffer=""

 def _buffer_encode(self,input,errors,final):

  raise NotImplementedError

 def encode(self,input,final=False ):

  data=self. buffer+input
  (result,consumed)=self. _buffer_encode(data,self. errors,final)

  self. buffer=data[consumed:]
  return result

 def reset(self):
  IncrementalEncoder. reset(self)
  self. buffer=""

 def getstate(self):
  return self. buffer or 0

 def setstate(self,state):
  self. buffer=state or""

class IncrementalDecoder(object):
 ''

 def __init__(self,errors='strict'):
  ''

  self. errors=errors

 def decode(self,input,final=False ):
  ''

  raise NotImplementedError

 def reset(self):
  ''

 def getstate(self):
  ''

  return (b"",0)

 def setstate(self,state):
  ''

class BufferedIncrementalDecoder(IncrementalDecoder):
 ''

 def __init__(self,errors='strict'):
  IncrementalDecoder. __init__(self,errors)

  self. buffer=b""

 def _buffer_decode(self,input,errors,final):

  raise NotImplementedError

 def decode(self,input,final=False ):

  data=self. buffer+input
  (result,consumed)=self. _buffer_decode(data,self. errors,final)

  self. buffer=data[consumed:]
  return result

 def reset(self):
  IncrementalDecoder. reset(self)
  self. buffer=b""

 def getstate(self):

  return (self. buffer,0)

 def setstate(self,state):

  self. buffer=state[0]

class StreamWriter(Codec):

 def __init__(self,stream,errors='strict'):

  ''

  self. stream=stream
  self. errors=errors

 def write(self,object):

  ''

  data,consumed=self. encode(object,self. errors)
  self. stream. write(data)

 def writelines(self,list):

  ''

  self. write(''. join(list))

 def reset(self):

  ''

  pass

 def seek(self,offset,whence=0):
  self. stream. seek(offset,whence)
  if whence ==0 and offset ==0:
   self. reset()

 def __getattr__(self,name,
 getattr=getattr):

  ''

  return getattr(self. stream,name)

 def __enter__(self):
  return self

 def __exit__(self,type,value,tb):
  self. stream. close()

class StreamReader(Codec):

 charbuffertype=str

 def __init__(self,stream,errors='strict'):

  ''

  self. stream=stream
  self. errors=errors
  self. bytebuffer=b""
  self. _empty_charbuffer=self. charbuffertype()
  self. charbuffer=self. _empty_charbuffer
  self. linebuffer=None

 def decode(self,input,errors='strict'):
  raise NotImplementedError

 def read(self,size=-1,chars=-1,firstline=False ):

  ''

  if self. linebuffer:
   self. charbuffer=self. _empty_charbuffer. join(self. linebuffer)
   self. linebuffer=None

  while True :

   if chars <0:
    if size <0:
     if self. charbuffer:
      break
    elif len(self. charbuffer)>=size:
     break
   else :
    if len(self. charbuffer)>=chars:
     break

   if size <0:
    newdata=self. stream. read()
   else :
    newdata=self. stream. read(size)

   data=self. bytebuffer+newdata
   try :
    newchars,decodedbytes=self. decode(data,self. errors)
   except UnicodeDecodeError as exc:
    if firstline:
     newchars,decodedbytes=     self. decode(data[:exc. start],self. errors)
     lines=newchars. splitlines(keepends=True )
     if len(lines)<=1:
      raise
    else :
     raise

   self. bytebuffer=data[decodedbytes:]

   self. charbuffer +=newchars

   if not newdata:
    break
  if chars <0:

   result=self. charbuffer
   self. charbuffer=self. _empty_charbuffer
  else :

   result=self. charbuffer[:chars]
   self. charbuffer=self. charbuffer[chars:]
  return result

 def readline(self,size=None ,keepends=True ):

  ''

  if self. linebuffer:
   line=self. linebuffer[0]
   del self. linebuffer[0]
   if len(self. linebuffer)==1:

    self. charbuffer=self. linebuffer[0]
    self. linebuffer=None
   if not keepends:
    line=line. splitlines(keepends=False )[0]
   return line

  readsize=size or 72
  line=self. _empty_charbuffer

  while True :
   data=self. read(readsize,firstline=True )
   if data:

    if (isinstance(data,str)and data. endswith("\r"))or    (isinstance(data,bytes)and data. endswith(b"\r")):
     data +=self. read(size=1,chars=1)

   line +=data
   lines=line. splitlines(keepends=True )
   if lines:
    if len(lines)>1:

     line=lines[0]
     del lines[0]
     if len(lines)>1:

      lines[-1]+=self. charbuffer
      self. linebuffer=lines
      self. charbuffer=None
     else :

      self. charbuffer=lines[0]+self. charbuffer
     if not keepends:
      line=line. splitlines(keepends=False )[0]
     break
    line0withend=lines[0]
    line0withoutend=lines[0]. splitlines(keepends=False )[0]
    if line0withend !=line0withoutend:

     self. charbuffer=self. _empty_charbuffer. join(lines[1:])+     self. charbuffer
     if keepends:
      line=line0withend
     else :
      line=line0withoutend
     break

   if not data or size is not None :
    if line and not keepends:
     line=line. splitlines(keepends=False )[0]
    break
   if readsize <8000:
    readsize *=2
  return line

 def readlines(self,sizehint=None ,keepends=True ):

  ''

  data=self. read()
  return data. splitlines(keepends)

 def reset(self):

  ''

  self. bytebuffer=b""
  self. charbuffer=self. _empty_charbuffer
  self. linebuffer=None

 def seek(self,offset,whence=0):
  ''

  self. stream. seek(offset,whence)
  self. reset()

 def __next__(self):

  ''
  line=self. readline()
  if line:
   return line
  raise StopIteration

 def __iter__(self):
  return self

 def __getattr__(self,name,
 getattr=getattr):

  ''

  return getattr(self. stream,name)

 def __enter__(self):
  return self

 def __exit__(self,type,value,tb):
  self. stream. close()

class StreamReaderWriter:

 ''

 encoding='unknown'

 def __init__(self,stream,Reader,Writer,errors='strict'):

  ''

  self. stream=stream
  self. reader=Reader(stream,errors)
  self. writer=Writer(stream,errors)
  self. errors=errors

 def read(self,size=-1):

  return self. reader. read(size)

 def readline(self,size=None ):

  return self. reader. readline(size)

 def readlines(self,sizehint=None ):

  return self. reader. readlines(sizehint)

 def __next__(self):

  ''
  return next(self. reader)

 def __iter__(self):
  return self

 def write(self,data):

  return self. writer. write(data)

 def writelines(self,list):

  return self. writer. writelines(list)

 def reset(self):

  self. reader. reset()
  self. writer. reset()

 def seek(self,offset,whence=0):
  self. stream. seek(offset,whence)
  self. reader. reset()
  if whence ==0 and offset ==0:
   self. writer. reset()

 def __getattr__(self,name,
 getattr=getattr):

  ''

  return getattr(self. stream,name)

 def __enter__(self):
  return self

 def __exit__(self,type,value,tb):
  self. stream. close()

class StreamRecoder:

 ''

 data_encoding='unknown'
 file_encoding='unknown'

 def __init__(self,stream,encode,decode,Reader,Writer,
 errors='strict'):

  ''

  self. stream=stream
  self. encode=encode
  self. decode=decode
  self. reader=Reader(stream,errors)
  self. writer=Writer(stream,errors)
  self. errors=errors

 def read(self,size=-1):

  data=self. reader. read(size)
  data,bytesencoded=self. encode(data,self. errors)
  return data

 def readline(self,size=None ):

  if size is None :
   data=self. reader. readline()
  else :
   data=self. reader. readline(size)
  data,bytesencoded=self. encode(data,self. errors)
  return data

 def readlines(self,sizehint=None ):

  data=self. reader. read()
  data,bytesencoded=self. encode(data,self. errors)
  return data. splitlines(keepends=True )

 def __next__(self):

  ''
  data=next(self. reader)
  data,bytesencoded=self. encode(data,self. errors)
  return data

 def __iter__(self):
  return self

 def write(self,data):

  data,bytesdecoded=self. decode(data,self. errors)
  return self. writer. write(data)

 def writelines(self,list):

  data=''. join(list)
  data,bytesdecoded=self. decode(data,self. errors)
  return self. writer. write(data)

 def reset(self):

  self. reader. reset()
  self. writer. reset()

 def __getattr__(self,name,
 getattr=getattr):

  ''

  return getattr(self. stream,name)

 def __enter__(self):
  return self

 def __exit__(self,type,value,tb):
  self. stream. close()

def open(filename,mode='rb',encoding=None ,errors='strict',buffering=1):

 ''

 if encoding is not None and 'b'not in mode:

  mode=mode+'b'
 file=builtins. open(filename,mode,buffering)
 if encoding is None :
  return file
 info=lookup(encoding)
 srw=StreamReaderWriter(file,info. streamreader,info. streamwriter,errors)

 srw. encoding=encoding
 return srw

def EncodedFile(file,data_encoding,file_encoding=None ,errors='strict'):

 ''

 if file_encoding is None :
  file_encoding=data_encoding
 data_info=lookup(data_encoding)
 file_info=lookup(file_encoding)
 sr=StreamRecoder(file,data_info. encode,data_info. decode,
 file_info. streamreader,file_info. streamwriter,errors)

 sr. data_encoding=data_encoding
 sr. file_encoding=file_encoding
 return sr

def getencoder(encoding):

 ''

 return lookup(encoding). encode

def getdecoder(encoding):

 ''

 return lookup(encoding). decode

def getincrementalencoder(encoding):

 ''

 encoder=lookup(encoding). incrementalencoder
 if encoder is None :
  raise LookupError(encoding)
 return encoder

def getincrementaldecoder(encoding):

 ''

 decoder=lookup(encoding). incrementaldecoder
 if decoder is None :
  raise LookupError(encoding)
 return decoder

def getreader(encoding):

 ''

 return lookup(encoding). streamreader

def getwriter(encoding):

 ''

 return lookup(encoding). streamwriter

def iterencode(iterator,encoding,errors='strict',**kwargs):
 ''

 encoder=getincrementalencoder(encoding)(errors,**kwargs)
 for input in iterator:
  output=encoder. encode(input)
  if output:
   yield output
 output=encoder. encode("",True )
 if output:
  yield output

def iterdecode(iterator,encoding,errors='strict',**kwargs):
 ''

 decoder=getincrementaldecoder(encoding)(errors,**kwargs)
 for input in iterator:
  output=decoder. decode(input)
  if output:
   yield output
 output=decoder. decode(b"",True )
 if output:
  yield output

def make_identity_dict(rng):

 ''

 return {i:i for i in rng}

def make_encoding_map(decoding_map):

 ''

 m={}
 for k,v in decoding_map. items():
  if not v in m:
   m[v]=k
  else :
   m[v]=None
 return m

try :
 strict_errors=lookup_error("strict")
 ignore_errors=lookup_error("ignore")
 replace_errors=lookup_error("replace")
 xmlcharrefreplace_errors=lookup_error("xmlcharrefreplace")
 backslashreplace_errors=lookup_error("backslashreplace")
except LookupError:

 strict_errors=None
 ignore_errors=None
 replace_errors=None
 xmlcharrefreplace_errors=None
 backslashreplace_errors=None

_false=0
if _false:
 import encodings

if __name__ =='__main__':

 sys. stdout=EncodedFile(sys. stdout,'latin-1','utf-8')

 sys. stdin=EncodedFile(sys. stdin,'utf-8','latin-1')
====codecs.py(file) end====

====collections.py(module) start====


from _collections import deque,defaultdict

__all__=['deque','defaultdict','namedtuple','UserDict','UserList',
'UserString','Counter','OrderedDict']

from _abcoll import MutableMapping

from collections. abc import *
import collections. abc
__all__ +=collections. abc. __all__

from _collections import deque,defaultdict,namedtuple
from operator import itemgetter as _itemgetter
from keyword import iskeyword as _iskeyword
import sys as _sys
import heapq as _heapq

from itertools import repeat as _repeat,chain as _chain,starmap as _starmap
from reprlib import recursive_repr as _recursive_repr

class Set(set):
 pass

class Sequence(list):
 pass

def _proxy(obj):
 return obj

class _Link(object):
 __slots__='prev','next','key','__weakref__'

class OrderedDict(dict):
 ''

 def __init__(self,*args,**kwds):
  ''

  if len(args)>1:
   raise TypeError('expected at most 1 arguments, got %d'%len(args))
  try :
   self. __root
  except AttributeError:
   self. __hardroot=_Link()
   self. __root=root=_proxy(self. __hardroot)
   root. prev=root. next=root
   self. __map={}
  self. __update(*args,**kwds)

 def __setitem__(self,key,value,
 dict_setitem=dict. __setitem__,proxy=_proxy,Link=_Link):
  ''

  if key not in self:
   self. __map[key]=link=Link()
   root=self. __root
   last=root. prev
   link. prev,link. next,link. key=last,root,key
   last. next=link
   root. prev=proxy(link)
  dict_setitem(self,key,value)

 def __delitem__(self,key,dict_delitem=dict. __delitem__):
  ''

  dict_delitem(self,key)
  link=self. __map. pop(key)
  link_prev=link. prev
  link_next=link. next
  link_prev. next=link_next
  link_next. prev=link_prev

 def __iter__(self):
  ''

  root=self. __root
  curr=root. next
  while curr is not root:
   yield curr. key
   curr=curr. next

 def __reversed__(self):
  ''

  root=self. __root
  curr=root. prev
  while curr is not root:
   yield curr. key
   curr=curr. prev

 def clear(self):
  ''
  root=self. __root
  root. prev=root. next=root
  self. __map. clear()
  dict. clear(self)

 def popitem(self,last=True ):
  ''

  if not self:
   raise KeyError('dictionary is empty')
  root=self. __root
  if last:
   link=root. prev
   link_prev=link. prev
   link_prev. next=root
   root. prev=link_prev
  else :
   link=root. next
   link_next=link. next
   root. next=link_next
   link_next. prev=root
  key=link. key
  del self. __map[key]
  value=dict. pop(self,key)
  return key,value

 def move_to_end(self,key,last=True ):
  ''

  link=self. __map[key]
  link_prev=link. prev
  link_next=link. next
  link_prev. next=link_next
  link_next. prev=link_prev
  root=self. __root
  if last:
   last=root. prev
   link. prev=last
   link. next=root
   last. next=root. prev=link
  else :
   first=root. next
   link. prev=root
   link. next=first
   root. next=first. prev=link

 def __sizeof__(self):
  sizeof=_sys. getsizeof
  n=len(self)+1
  size=sizeof(self. __dict__)
  size +=sizeof(self. __map)*2
  size +=sizeof(self. __hardroot)*n
  size +=sizeof(self. __root)*n
  return size

 update=__update=MutableMapping. update
 keys=MutableMapping. keys
 values=MutableMapping. values
 items=MutableMapping. items
 __ne__=MutableMapping. __ne__

 __marker=object()

 def pop(self,key,default=__marker):
  ''

  if key in self:
   result=self[key]
   del self[key]
   return result
  if default is self. __marker:
   raise KeyError(key)
  return default

 def setdefault(self,key,default=None ):
  ''
  if key in self:
   return self[key]
  self[key]=default
  return default

 def __repr__(self):
  ''
  if not self:
   return'%s()'%(self. __class__. __name__,)
  return'%s(%r)'%(self. __class__. __name__,list(self. items()))

 def __reduce__(self):
  ''
  items=[[k,self[k]]for k in self]
  inst_dict=vars(self). copy()
  for k in vars(OrderedDict()):
   inst_dict. pop(k,None )
  if inst_dict:
   return (self. __class__,(items,),inst_dict)
  return self. __class__,(items,)

 def copy(self):
  ''
  return self. __class__(self)

 @classmethod
 def fromkeys(cls,iterable,value=None ):
  ''

  self=cls()
  for key in iterable:
   self[key]=value
  return self

 def __eq__(self,other):
  ''

  if isinstance(other,OrderedDict):
   return len(self)==len(other)and   all(p ==q for p,q in zip(self. items(),other. items()))
  return dict. __eq__(self,other)

def _count_elements(mapping,iterable):
 ''
 mapping_get=mapping. get
 for elem in iterable:
  mapping[elem]=mapping_get(elem,0)+1

class Counter(dict):
 ''

 def __init__(self,iterable=None ,**kwds):
  ''

  dict. __init__(self)
  self. update(iterable,**kwds)

 def __missing__(self,key):
  ''

  return 0

 def most_common(self,n=None ):
  ''

  if n is None :
   return sorted(self. items(),key=_itemgetter(1),reverse=True )
  return _heapq. nlargest(n,self. items(),key=_itemgetter(1))

 def elements(self):
  ''

  return _chain. from_iterable(_starmap(_repeat,self. items()))

 @classmethod
 def fromkeys(cls,iterable,v=None ):

  raise NotImplementedError(
  'Counter.fromkeys() is undefined.  Use Counter(iterable) instead.')

 def update(self,iterable=None ,**kwds):
  ''

  if iterable is not None :
   if isinstance(iterable,Mapping):
    if self:
     self_get=self. get
     for elem,count in iterable. items():
      self[elem]=count+self_get(elem,0)
    else :
     super(). update(iterable)
   else :
    _count_elements(self,iterable)
  if kwds:
   self. update(kwds)

 def subtract(self,iterable=None ,**kwds):
  ''

  if iterable is not None :
   self_get=self. get
   if isinstance(iterable,Mapping):
    for elem,count in iterable. items():
     self[elem]=self_get(elem,0)-count
   else :
    for elem in iterable:
     self[elem]=self_get(elem,0)-1
  if kwds:
   self. subtract(kwds)

 def copy(self):
  ''
  return self. __class__(self)

 def __reduce__(self):
  return self. __class__,(dict(self),)

 def __delitem__(self,elem):
  ''
  if elem in self:
   super(). __delitem__(elem)

 def __repr__(self):
  if not self:
   return'%s()'%self. __class__. __name__
  try :
   items=', '. join(map('%r: %r'. __mod__,self. most_common()))
   return'%s({%s})'%(self. __class__. __name__,items)
  except TypeError:

   return'{0}({1!r})'. format(self. __class__. __name__,dict(self))

 def __add__(self,other):
  ''

  if not isinstance(other,Counter):
   return NotImplemented
  result=Counter()
  for elem,count in self. items():
   newcount=count+other[elem]
   if newcount >0:
    result[elem]=newcount
  for elem,count in other. items():
   if elem not in self and count >0:
    result[elem]=count
  return result

 def __sub__(self,other):
  ''

  if not isinstance(other,Counter):
   return NotImplemented
  result=Counter()
  for elem,count in self. items():
   newcount=count -other[elem]
   if newcount >0:
    result[elem]=newcount
  for elem,count in other. items():
   if elem not in self and count <0:
    result[elem]=0 -count
  return result

 def __or__(self,other):
  ''

  if not isinstance(other,Counter):
   return NotImplemented
  result=Counter()
  for elem,count in self. items():
   other_count=other[elem]
   newcount=other_count if count <other_count else count
   if newcount >0:
    result[elem]=newcount
  for elem,count in other. items():
   if elem not in self and count >0:
    result[elem]=count
  return result

 def __and__(self,other):
  ''

  if not isinstance(other,Counter):
   return NotImplemented
  result=Counter()
  for elem,count in self. items():
   other_count=other[elem]
   newcount=count if count <other_count else other_count
   if newcount >0:
    result[elem]=newcount
  return result

class ChainMap(MutableMapping):
 ''

 def __init__(self,*maps):
  ''

  self. maps=list(maps)or [{}]

 def __missing__(self,key):
  raise KeyError(key)

 def __getitem__(self,key):
  for mapping in self. maps:
   try :
    return mapping[key]
   except KeyError:
    pass
  return self. __missing__(key)

 def get(self,key,default=None ):
  return self[key]if key in self else default

 def __len__(self):
  return len(set(). union(*self. maps))

 def __iter__(self):
  return iter(set(). union(*self. maps))

 def __contains__(self,key):
  return any(key in m for m in self. maps)

 def __bool__(self):
  return any(self. maps)

 def __repr__(self):
  return'{0.__class__.__name__}({1})'. format(
  self,', '. join(map(repr,self. maps)))

 def __repr__(self):
  return','. join(str(_map)for _map in self. maps)

 @classmethod
 def fromkeys(cls,iterable,*args):
  ''
  return cls(dict. fromkeys(iterable,*args))

 def copy(self):
  ''
  return self. __class__(self. maps[0]. copy(),*self. maps[1:])

 __copy__=copy

 def new_child(self):
  ''
  return self. __class__({},*self. maps)

 @property
 def parents(self):
  ''
  return self. __class__(*self. maps[1:])

 def __setitem__(self,key,value):
  self. maps[0][key]=value

 def __delitem__(self,key):
  try :
   del self. maps[0][key]
  except KeyError:
   raise KeyError('Key not found in the first mapping: {!r}'. format(key))

 def popitem(self):
  ''
  try :
   return self. maps[0]. popitem()
  except KeyError:
   raise KeyError('No keys found in the first mapping.')

 def pop(self,key,*args):
  ''
  try :
   return self. maps[0]. pop(key,*args)
  except KeyError:

   raise KeyError('Key not found in the first mapping: %s'%key)

 def clear(self):
  ''
  self. maps[0]. clear()

class UserDict(MutableMapping):

 def __init__(self,dict=None ,**kwargs):
  self. data={}
  if dict is not None :
   self. update(dict)
  if len(kwargs):
   self. update(kwargs)
 def __len__(self):return len(self. data)
 def __getitem__(self,key):
  if key in self. data:
   return self. data[key]
  if hasattr(self. __class__,"__missing__"):
   return self. __class__. __missing__(self,key)
  raise KeyError(key)
 def __setitem__(self,key,item):self. data[key]=item
 def __delitem__(self,key):del self. data[key]
 def __iter__(self):
  return iter(self. data)

 def __contains__(self,key):
  return key in self. data

 def __repr__(self):return repr(self. data)
 def copy(self):
  if self. __class__ is UserDict:
   return UserDict(self. data. copy())
  import copy
  data=self. data
  try :
   self. data={}
   c=copy. copy(self)
  finally :
   self. data=data
  c. update(self)
  return c
 @classmethod
 def fromkeys(cls,iterable,value=None ):
  d=cls()
  for key in iterable:
   d[key]=value
  return d

class UserList(MutableSequence):
 ''
 def __init__(self,initlist=None ):
  self. data=[]
  if initlist is not None :

   if type(initlist)==type(self. data):
    self. data[:]=initlist
   elif isinstance(initlist,UserList):
    self. data[:]=initlist. data[:]
   else :
    self. data=list(initlist)
 def __repr__(self):return repr(self. data)
 def __lt__(self,other):return self. data <self. __cast(other)
 def __le__(self,other):return self. data <=self. __cast(other)
 def __eq__(self,other):return self. data ==self. __cast(other)
 def __ne__(self,other):return self. data !=self. __cast(other)
 def __gt__(self,other):return self. data >self. __cast(other)
 def __ge__(self,other):return self. data >=self. __cast(other)
 def __cast(self,other):
  return other. data if isinstance(other,UserList)else other
 def __contains__(self,item):return item in self. data
 def __len__(self):return len(self. data)
 def __getitem__(self,i):return self. data[i]
 def __setitem__(self,i,item):self. data[i]=item
 def __delitem__(self,i):del self. data[i]
 def __add__(self,other):
  if isinstance(other,UserList):
   return self. __class__(self. data+other. data)
  elif isinstance(other,type(self. data)):
   return self. __class__(self. data+other)
  return self. __class__(self. data+list(other))
 def __radd__(self,other):
  if isinstance(other,UserList):
   return self. __class__(other. data+self. data)
  elif isinstance(other,type(self. data)):
   return self. __class__(other+self. data)
  return self. __class__(list(other)+self. data)
 def __iadd__(self,other):
  if isinstance(other,UserList):
   self. data +=other. data
  elif isinstance(other,type(self. data)):
   self. data +=other
  else :
   self. data +=list(other)
  return self
 def __mul__(self,n):
  return self. __class__(self. data *n)
 __rmul__=__mul__
 def __imul__(self,n):
  self. data *=n
  return self
 def append(self,item):self. data. append(item)
 def insert(self,i,item):self. data. insert(i,item)
 def pop(self,i=-1):return self. data. pop(i)
 def remove(self,item):self. data. remove(item)
 def clear(self):self. data. clear()
 def copy(self):return self. __class__(self)
 def count(self,item):return self. data. count(item)
 def index(self,item,*args):return self. data. index(item,*args)
 def reverse(self):self. data. reverse()
 def sort(self,*args,**kwds):self. data. sort(*args,**kwds)
 def extend(self,other):
  if isinstance(other,UserList):
   self. data. extend(other. data)
  else :
   self. data. extend(other)

class UserString(Sequence):
 def __init__(self,seq):
  if isinstance(seq,str):
   self. data=seq
  elif isinstance(seq,UserString):
   self. data=seq. data[:]
  else :
   self. data=str(seq)
 def __str__(self):return str(self. data)
 def __repr__(self):return repr(self. data)
 def __int__(self):return int(self. data)
 def __float__(self):return float(self. data)
 def __complex__(self):return complex(self. data)
 def __hash__(self):return hash(self. data)

 def __eq__(self,string):
  if isinstance(string,UserString):
   return self. data ==string. data
  return self. data ==string
 def __ne__(self,string):
  if isinstance(string,UserString):
   return self. data !=string. data
  return self. data !=string
 def __lt__(self,string):
  if isinstance(string,UserString):
   return self. data <string. data
  return self. data <string
 def __le__(self,string):
  if isinstance(string,UserString):
   return self. data <=string. data
  return self. data <=string
 def __gt__(self,string):
  if isinstance(string,UserString):
   return self. data >string. data
  return self. data >string
 def __ge__(self,string):
  if isinstance(string,UserString):
   return self. data >=string. data
  return self. data >=string

 def __contains__(self,char):
  if isinstance(char,UserString):
   char=char. data
  return char in self. data

 def __len__(self):return len(self. data)
 def __getitem__(self,index):return self. __class__(self. data[index])
 def __add__(self,other):
  if isinstance(other,UserString):
   return self. __class__(self. data+other. data)
  elif isinstance(other,str):
   return self. __class__(self. data+other)
  return self. __class__(self. data+str(other))
 def __radd__(self,other):
  if isinstance(other,str):
   return self. __class__(other+self. data)
  return self. __class__(str(other)+self. data)
 def __mul__(self,n):
  return self. __class__(self. data *n)
 __rmul__=__mul__
 def __mod__(self,args):
  return self. __class__(self. data %args)

 def capitalize(self):return self. __class__(self. data. capitalize())
 def center(self,width,*args):
  return self. __class__(self. data. center(width,*args))
 def count(self,sub,start=0,end=_sys. maxsize):
  if isinstance(sub,UserString):
   sub=sub. data
  return self. data. count(sub,start,end)
 def encode(self,encoding=None ,errors=None ):
  if encoding:
   if errors:
    return self. __class__(self. data. encode(encoding,errors))
   return self. __class__(self. data. encode(encoding))
  return self. __class__(self. data. encode())
 def endswith(self,suffix,start=0,end=_sys. maxsize):
  return self. data. endswith(suffix,start,end)
 def expandtabs(self,tabsize=8):
  return self. __class__(self. data. expandtabs(tabsize))
 def find(self,sub,start=0,end=_sys. maxsize):
  if isinstance(sub,UserString):
   sub=sub. data
  return self. data. find(sub,start,end)
 def format(self,*args,**kwds):
  return self. data. format(*args,**kwds)
 def index(self,sub,start=0,end=_sys. maxsize):
  return self. data. index(sub,start,end)
 def isalpha(self):return self. data. isalpha()
 def isalnum(self):return self. data. isalnum()
 def isdecimal(self):return self. data. isdecimal()
 def isdigit(self):return self. data. isdigit()
 def isidentifier(self):return self. data. isidentifier()
 def islower(self):return self. data. islower()
 def isnumeric(self):return self. data. isnumeric()
 def isspace(self):return self. data. isspace()
 def istitle(self):return self. data. istitle()
 def isupper(self):return self. data. isupper()
 def join(self,seq):return self. data. join(seq)
 def ljust(self,width,*args):
  return self. __class__(self. data. ljust(width,*args))
 def lower(self):return self. __class__(self. data. lower())
 def lstrip(self,chars=None ):return self. __class__(self. data. lstrip(chars))
 def partition(self,sep):
  return self. data. partition(sep)
 def replace(self,old,new,maxsplit=-1):
  if isinstance(old,UserString):
   old=old. data
  if isinstance(new,UserString):
   new=new. data
  return self. __class__(self. data. replace(old,new,maxsplit))
 def rfind(self,sub,start=0,end=_sys. maxsize):
  if isinstance(sub,UserString):
   sub=sub. data
  return self. data. rfind(sub,start,end)
 def rindex(self,sub,start=0,end=_sys. maxsize):
  return self. data. rindex(sub,start,end)
 def rjust(self,width,*args):
  return self. __class__(self. data. rjust(width,*args))
 def rpartition(self,sep):
  return self. data. rpartition(sep)
 def rstrip(self,chars=None ):
  return self. __class__(self. data. rstrip(chars))
 def split(self,sep=None ,maxsplit=-1):
  return self. data. split(sep,maxsplit)
 def rsplit(self,sep=None ,maxsplit=-1):
  return self. data. rsplit(sep,maxsplit)
 def splitlines(self,keepends=False ):return self. data. splitlines(keepends)
 def startswith(self,prefix,start=0,end=_sys. maxsize):
  return self. data. startswith(prefix,start,end)
 def strip(self,chars=None ):return self. __class__(self. data. strip(chars))
 def swapcase(self):return self. __class__(self. data. swapcase())
 def title(self):return self. __class__(self. data. title())
 def translate(self,*args):
  return self. __class__(self. data. translate(*args))
 def upper(self):return self. __class__(self. data. upper())
 def zfill(self,width):return self. __class__(self. data. zfill(width))
====collections.py(module) end====

====collections.abc.py(file) start====


from abc import ABCMeta,abstractmethod
import sys

__all__=["Hashable","Iterable","Iterator",
"Sized","Container","Callable",
"Set","MutableSet",
"Mapping","MutableMapping",
"MappingView","KeysView","ItemsView","ValuesView",
"Sequence","MutableSequence",
"ByteString",
]

bytes_iterator=type(iter(b''))
bytearray_iterator=type(iter(bytearray()))

dict_keyiterator=type(iter({}. keys()))
dict_valueiterator=type(iter({}. values()))
dict_itemiterator=type(iter({}. items()))
list_iterator=type(iter([]))
list_reverseiterator=type(iter(reversed([])))
range_iterator=type(iter(range(0)))
set_iterator=type(iter(set()))
str_iterator=type(iter(""))
tuple_iterator=type(iter(()))
zip_iterator=type(iter(zip()))

dict_keys=type({}. keys())
dict_values=type({}. values())
dict_items=type({}. items())

mappingproxy=type(type. __dict__)

class Hashable(metaclass=ABCMeta):

 __slots__=()

 @abstractmethod
 def __hash__(self):
  return 0

 @classmethod
 def __subclasshook__(cls,C):
  if cls is Hashable:
   for B in C. __mro__:
    if"__hash__"in B. __dict__:
     if B. __dict__["__hash__"]:
      return True
     break
  return NotImplemented

class Iterable(metaclass=ABCMeta):

 __slots__=()

 @abstractmethod
 def __iter__(self):
  while False :
   yield None

 @classmethod
 def __subclasshook__(cls,C):
  if cls is Iterable:
   if any("__iter__"in B. __dict__ for B in C. __mro__):
    return True
  return NotImplemented

class Iterator(Iterable):

 __slots__=()

 @abstractmethod
 def __next__(self):
  raise StopIteration

 def __iter__(self):
  return self

 @classmethod
 def __subclasshook__(cls,C):
  if cls is Iterator:
   if (any("__next__"in B. __dict__ for B in C. __mro__)and
   any("__iter__"in B. __dict__ for B in C. __mro__)):
    return True
  return NotImplemented

Iterator. register(bytes_iterator)
Iterator. register(bytearray_iterator)

Iterator. register(dict_keyiterator)
Iterator. register(dict_valueiterator)
Iterator. register(dict_itemiterator)
Iterator. register(list_iterator)
Iterator. register(list_reverseiterator)
Iterator. register(range_iterator)
Iterator. register(set_iterator)
Iterator. register(str_iterator)
Iterator. register(tuple_iterator)
Iterator. register(zip_iterator)

class Sized(metaclass=ABCMeta):

 __slots__=()

 @abstractmethod
 def __len__(self):
  return 0

 @classmethod
 def __subclasshook__(cls,C):
  if cls is Sized:
   if any("__len__"in B. __dict__ for B in C. __mro__):
    return True
  return NotImplemented

class Container(metaclass=ABCMeta):

 __slots__=()

 @abstractmethod
 def __contains__(self,x):
  return False

 @classmethod
 def __subclasshook__(cls,C):
  if cls is Container:
   if any("__contains__"in B. __dict__ for B in C. __mro__):
    return True
  return NotImplemented

class Callable(metaclass=ABCMeta):

 __slots__=()

 @abstractmethod
 def __call__(self,*args,**kwds):
  return False

 @classmethod
 def __subclasshook__(cls,C):
  if cls is Callable:
   if any("__call__"in B. __dict__ for B in C. __mro__):
    return True
  return NotImplemented

class Set(Sized,Iterable,Container):

 ''

 __slots__=()

 def __le__(self,other):
  if not isinstance(other,Set):
   return NotImplemented
  if len(self)>len(other):
   return False
  for elem in self:
   if elem not in other:
    return False
  return True

 def __lt__(self,other):
  if not isinstance(other,Set):
   return NotImplemented
  return len(self)<len(other)and self. __le__(other)

 def __gt__(self,other):
  if not isinstance(other,Set):
   return NotImplemented
  return other <self

 def __ge__(self,other):
  if not isinstance(other,Set):
   return NotImplemented
  return other <=self

 def __eq__(self,other):
  if not isinstance(other,Set):
   return NotImplemented
  return len(self)==len(other)and self. __le__(other)

 def __ne__(self,other):
  return not (self ==other)

 @classmethod
 def _from_iterable(cls,it):
  ''

  return cls(it)

 def __and__(self,other):
  if not isinstance(other,Iterable):
   return NotImplemented
  return self. _from_iterable(value for value in other if value in self)

 def isdisjoint(self,other):
  for value in other:
   if value in self:
    return False
  return True

 def __or__(self,other):
  if not isinstance(other,Iterable):
   return NotImplemented
  chain=(e for s in (self,other)for e in s)
  return self. _from_iterable(chain)

 def __sub__(self,other):
  if not isinstance(other,Set):
   if not isinstance(other,Iterable):
    return NotImplemented
   other=self. _from_iterable(other)
  return self. _from_iterable(value for value in self
  if value not in other)

 def __xor__(self,other):
  if not isinstance(other,Set):
   if not isinstance(other,Iterable):
    return NotImplemented
   other=self. _from_iterable(other)
  return (self -other)|(other -self)

 def _hash(self):
  ''

  MAX=sys. maxsize
  MASK=2 *MAX+1
  n=len(self)
  h=1927868237 *(n+1)
  h &=MASK
  for x in self:
   hx=hash(x)
   h ^=(hx ^(hx <<16)^89869747)*3644798167
   h &=MASK
  h=h *69069+907133923
  h &=MASK
  if h >MAX:
   h -=MASK+1
  if h ==-1:
   h=590923713
  return h

Set. register(frozenset)

class MutableSet(Set):

 __slots__=()

 @abstractmethod
 def add(self,value):
  ''
  raise NotImplementedError

 @abstractmethod
 def discard(self,value):
  ''
  raise NotImplementedError

 def remove(self,value):
  ''
  if value not in self:
   raise KeyError(value)
  self. discard(value)

 def pop(self):
  ''
  it=iter(self)
  try :
   value=next(it)
  except StopIteration:
   raise KeyError
  self. discard(value)
  return value

 def clear(self):
  ''
  try :
   while True :
    self. pop()
  except KeyError:
   pass

 def __ior__(self,it):
  for value in it:
   self. add(value)
  return self

 def __iand__(self,it):
  for value in (self -it):
   self. discard(value)
  return self

 def __ixor__(self,it):
  if it is self:
   self. clear()
  else :
   if not isinstance(it,Set):
    it=self. _from_iterable(it)
   for value in it:
    if value in self:
     self. discard(value)
    else :
     self. add(value)
  return self

 def __isub__(self,it):
  if it is self:
   self. clear()
  else :
   for value in it:
    self. discard(value)
  return self

MutableSet. register(set)

class Mapping(Sized,Iterable,Container):

 __slots__=()

 @abstractmethod
 def __getitem__(self,key):
  raise KeyError

 def get(self,key,default=None ):
  try :
   return self[key]
  except KeyError:
   return default

 def __contains__(self,key):
  try :
   self[key]
  except KeyError:
   return False
  else :
   return True

 def keys(self):
  return KeysView(self)

 def items(self):
  return ItemsView(self)

 def values(self):
  return ValuesView(self)

 def __eq__(self,other):
  if not isinstance(other,Mapping):
   return NotImplemented
  return dict(self. items())==dict(other. items())

 def __ne__(self,other):
  return not (self ==other)

Mapping. register(mappingproxy)

class MappingView(Sized):

 def __init__(self,mapping):
  self. _mapping=mapping

 def __len__(self):
  return len(self. _mapping)

 def __repr__(self):
  return'{0.__class__.__name__}({0._mapping!r})'. format(self)

class KeysView(MappingView,Set):

 @classmethod
 def _from_iterable(self,it):
  return set(it)

 def __contains__(self,key):
  return key in self. _mapping

 def __iter__(self):
  for key in self. _mapping:
   yield key

KeysView. register(dict_keys)

class ItemsView(MappingView,Set):

 @classmethod
 def _from_iterable(self,it):
  return set(it)

 def __contains__(self,item):
  key,value=item
  try :
   v=self. _mapping[key]
  except KeyError:
   return False
  else :
   return v ==value

 def __iter__(self):
  for key in self. _mapping:
   yield (key,self. _mapping[key])

ItemsView. register(dict_items)

class ValuesView(MappingView):

 def __contains__(self,value):
  for key in self. _mapping:
   if value ==self. _mapping[key]:
    return True
  return False

 def __iter__(self):
  for key in self. _mapping:
   yield self. _mapping[key]

ValuesView. register(dict_values)

class MutableMapping(Mapping):

 __slots__=()

 @abstractmethod
 def __setitem__(self,key,value):
  raise KeyError

 @abstractmethod
 def __delitem__(self,key):
  raise KeyError

 __marker=object()

 def pop(self,key,default=__marker):
  try :
   value=self[key]
  except KeyError:
   if default is self. __marker:
    raise
   return default
  else :
   del self[key]
   return value

 def popitem(self):
  try :
   key=next(iter(self))
  except StopIteration:
   raise KeyError
  value=self[key]
  del self[key]
  return key,value

 def clear(self):
  try :
   while True :
    self. popitem()
  except KeyError:
   pass

 def update(*args,**kwds):
  if len(args)>2:
   raise TypeError("update() takes at most 2 positional "
   "arguments ({} given)". format(len(args)))
  elif not args:
   raise TypeError("update() takes at least 1 argument (0 given)")
  self=args[0]
  other=args[1]if len(args)>=2 else ()

  if isinstance(other,Mapping):
   for key in other:
    self[key]=other[key]
  elif hasattr(other,"keys"):
   for key in other. keys():
    self[key]=other[key]
  else :
   for key,value in other:
    self[key]=value
  for key,value in kwds. items():
   self[key]=value

 def setdefault(self,key,default=None ):
  try :
   return self[key]
  except KeyError:
   self[key]=default
  return default

MutableMapping. register(dict)

class Sequence(Sized,Iterable,Container):

 ''

 __slots__=()

 @abstractmethod
 def __getitem__(self,index):
  raise IndexError

 def __iter__(self):
  i=0
  try :
   while True :
    v=self[i]
    yield v
    i +=1
  except IndexError:
   return

 def __contains__(self,value):
  for v in self:
   if v ==value:
    return True
  return False

 def __reversed__(self):
  for i in reversed(range(len(self))):
   yield self[i]

 def index(self,value):
  for i,v in enumerate(self):
   if v ==value:
    return i
  raise ValueError

 def count(self,value):
  return sum(1 for v in self if v ==value)

Sequence. register(tuple)
Sequence. register(str)
Sequence. register(range)

class ByteString(Sequence):

 ''

 __slots__=()

ByteString. register(bytes)
ByteString. register(bytearray)

class MutableSequence(Sequence):

 __slots__=()

 @abstractmethod
 def __setitem__(self,index,value):
  raise IndexError

 @abstractmethod
 def __delitem__(self,index):
  raise IndexError

 @abstractmethod
 def insert(self,index,value):
  raise IndexError

 def append(self,value):
  self. insert(len(self),value)

 def clear(self):
  try :
   while True :
    self. pop()
  except IndexError:
   pass

 def reverse(self):
  n=len(self)
  for i in range(n //2):
   self[i],self[n -i -1]=self[n -i -1],self[i]

 def extend(self,values):
  for v in values:
   self. append(v)

 def pop(self,index=-1):
  v=self[index]
  del self[index]
  return v

 def remove(self,value):
  del self[self. index(value)]

 def __iadd__(self,values):
  self. extend(values)
  return self

MutableSequence. register(list)
MutableSequence. register(bytearray)
====collections.abc.py(file) end====

====copyreg.py(file) start====
''

__all__=["pickle","constructor",
"add_extension","remove_extension","clear_extension_cache"]

dispatch_table={}

def pickle(ob_type,pickle_function,constructor_ob=None ):
 if not callable(pickle_function):
  raise TypeError("reduction functions must be callable")
 dispatch_table[ob_type]=pickle_function

 if constructor_ob is not None :
  constructor(constructor_ob)

def constructor(object):
 if not callable(object):
  raise TypeError("constructors must be callable")

try :
 complex
except NameError:
 pass
else :

 def pickle_complex(c):
  return complex,(c. real,c. imag)

 pickle(complex,pickle_complex,complex)

def _reconstructor(cls,base,state):
 if base is object:
  obj=object. __new__(cls)
 else :
  obj=base. __new__(cls,state)
  if base. __init__ !=object. __init__:
   base. __init__(obj,state)
 return obj

_HEAPTYPE=1 <<9

def _reduce_ex(self,proto):
 assert proto <2
 for base in self. __class__. __mro__:
  if hasattr(base,'__flags__')and not base. __flags__&_HEAPTYPE:
   break
 else :
  base=object
 if base is object:
  state=None
 else :
  if base is self. __class__:
   raise TypeError("can't pickle %s objects"%base. __name__)
  state=base(self)
 args=(self. __class__,base,state)
 try :
  getstate=self. __getstate__
 except AttributeError:
  if getattr(self,"__slots__",None ):
   raise TypeError("a class that defines __slots__ without "
   "defining __getstate__ cannot be pickled")
  try :
   dict=self. __dict__
  except AttributeError:
   dict=None
 else :
  dict=getstate()
 if dict:
  return _reconstructor,args,dict
 else :
  return _reconstructor,args

def __newobj__(cls,*args):
 return cls. __new__(cls,*args)

def _slotnames(cls):
 ''

 names=cls. __dict__. get("__slotnames__")
 if names is not None :
  return names

 names=[]
 if not hasattr(cls,"__slots__"):

  pass
 else :

  for c in cls. __mro__:
   if"__slots__"in c. __dict__:
    slots=c. __dict__['__slots__']

    if isinstance(slots,str):
     slots=(slots,)
    for name in slots:

     if name in ("__dict__","__weakref__"):
      continue

     elif name. startswith('__')and not name. endswith('__'):
      names. append('_%s%s'%(c. __name__,name))
     else :
      names. append(name)

 try :
  cls. __slotnames__=names
 except :
  pass

 return names

_extension_registry={}
_inverted_registry={}
_extension_cache={}

def add_extension(module,name,code):
 ''
 code=int(code)
 if not 1 <=code <=0x7fffffff:
  raise ValueError("code out of range")
 key=(module,name)
 if (_extension_registry. get(key)==code and
 _inverted_registry. get(code)==key):
  return
 if key in _extension_registry:
  raise ValueError("key %s is already registered with code %s"%
  (key,_extension_registry[key]))
 if code in _inverted_registry:
  raise ValueError("code %s is already in use for key %s"%
  (code,_inverted_registry[code]))
 _extension_registry[key]=code
 _inverted_registry[code]=key

def remove_extension(module,name,code):
 ''
 key=(module,name)
 if (_extension_registry. get(key)!=code or
 _inverted_registry. get(code)!=key):
  raise ValueError("key %s is not registered with code %s"%
  (key,code))
 del _extension_registry[key]
 del _inverted_registry[code]
 if code in _extension_cache:
  del _extension_cache[code]

def clear_extension_cache():
 _extension_cache. clear()

====copyreg.py(file) end====

====datetime.py(file) start====
''

import time as _time
import math as _math

def _cmp(x,y):
 return 0 if x ==y else 1 if x >y else -1

MINYEAR=1
MAXYEAR=9999
_MAXORDINAL=3652059

_DAYS_IN_MONTH=[None ,31,28,31,30,31,30,31,31,30,31,30,31]

_DAYS_BEFORE_MONTH=[None ]
dbm=0
for dim in _DAYS_IN_MONTH[1:]:
 _DAYS_BEFORE_MONTH. append(dbm)
 dbm +=dim
del dbm,dim

def _is_leap(year):
 ''
 return year %4 ==0 and (year %100 !=0 or year %400 ==0)

def _days_before_year(year):
 ''
 y=year -1
 return y *365+y //4 -y //100+y //400

def _days_in_month(year,month):
 ''
 assert 1 <=month <=12,month
 if month ==2 and _is_leap(year):
  return 29
 return _DAYS_IN_MONTH[month]

def _days_before_month(year,month):
 ''
 assert 1 <=month <=12,'month must be in 1..12'
 return _DAYS_BEFORE_MONTH[month]+(month >2 and _is_leap(year))

def _ymd2ord(year,month,day):
 ''
 assert 1 <=month <=12,'month must be in 1..12'
 dim=_days_in_month(year,month)
 assert 1 <=day <=dim,('day must be in 1..%d'%dim)
 return (_days_before_year(year)+
 _days_before_month(year,month)+
 day)

_DI400Y=_days_before_year(401)
_DI100Y=_days_before_year(101)
_DI4Y=_days_before_year(5)

assert _DI4Y ==4 *365+1

assert _DI400Y ==4 *_DI100Y+1

assert _DI100Y ==25 *_DI4Y -1

def _ord2ymd(n):
 ''

 n -=1
 n400,n=divmod(n,_DI400Y)
 year=n400 *400+1

 n100,n=divmod(n,_DI100Y)

 n4,n=divmod(n,_DI4Y)

 n1,n=divmod(n,365)

 year +=n100 *100+n4 *4+n1
 if n1 ==4 or n100 ==4:
  assert n ==0
  return year -1,12,31

 leapyear=n1 ==3 and (n4 !=24 or n100 ==3)
 assert leapyear ==_is_leap(year)
 month=(n+50)>>5
 preceding=_DAYS_BEFORE_MONTH[month]+(month >2 and leapyear)
 if preceding >n:
  month -=1
  preceding -=_DAYS_IN_MONTH[month]+(month ==2 and leapyear)
 n -=preceding
 assert 0 <=n <_days_in_month(year,month)

 return year,month,n+1

_MONTHNAMES=[None ,"Jan","Feb","Mar","Apr","May","Jun",
"Jul","Aug","Sep","Oct","Nov","Dec"]
_DAYNAMES=[None ,"Mon","Tue","Wed","Thu","Fri","Sat","Sun"]

def _build_struct_time(y,m,d,hh,mm,ss,dstflag):
 wday=(_ymd2ord(y,m,d)+6)%7
 dnum=_days_before_month(y,m)+d
 return _time. struct_time((y,m,d,hh,mm,ss,wday,dnum,dstflag))

def _format_time(hh,mm,ss,us):

 result="%02d:%02d:%02d"%(hh,mm,ss)
 if us:
  result +=".%06d"%us
 return result

def _wrap_strftime(object,format,timetuple):

 freplace=None
 zreplace=None
 Zreplace=None

 newformat=[]
 push=newformat. append
 i,n=0,len(format)
 while i <n:
  ch=format[i]
  i +=1
  if ch =='%':
   if i <n:
    ch=format[i]
    i +=1
    if ch =='f':
     if freplace is None :
      freplace='%06d'%getattr(object,
      'microsecond',0)
     newformat. append(freplace)
    elif ch =='z':
     if zreplace is None :
      zreplace=""
      if hasattr(object,"utcoffset"):
       offset=object. utcoffset()
       if offset is not None :
        sign='+'
        if offset. days <0:
         offset=-offset
         sign='-'
        h,m=divmod(offset,timedelta(hours=1))
        assert not m %timedelta(minutes=1),"whole minute"
        m //=timedelta(minutes=1)
        zreplace='%c%02d%02d'%(sign,h,m)
     assert'%'not in zreplace
     newformat. append(zreplace)
    elif ch =='Z':
     if Zreplace is None :
      Zreplace=""
      if hasattr(object,"tzname"):
       s=object. tzname()
       if s is not None :

        Zreplace=s. replace('%','%%')
     newformat. append(Zreplace)
    else :
     push('%')
     push(ch)
   else :
    push('%')
  else :
   push(ch)
 newformat="". join(newformat)
 return _time. strftime(newformat,timetuple)

def _call_tzinfo_method(tzinfo,methname,tzinfoarg):
 if tzinfo is None :
  return None
 return getattr(tzinfo,methname)(tzinfoarg)

def _check_tzname(name):
 if name is not None and not isinstance(name,str):
  raise TypeError("tzinfo.tzname() must return None or string, "
  "not '%s'"%type(name))

def _check_utc_offset(name,offset):
 assert name in ("utcoffset","dst")
 if offset is None :
  return
 if not isinstance(offset,timedelta):
  raise TypeError("tzinfo.%s() must return None "
  "or timedelta, not '%s'"%(name,type(offset)))
 if offset %timedelta(minutes=1)or offset. microseconds:
  raise ValueError("tzinfo.%s() must return a whole number "
  "of minutes, got %s"%(name,offset))
 if not -timedelta(1)<offset <timedelta(1):
  raise ValueError("%s()=%s, must be must be strictly between"
  " -timedelta(hours=24) and timedelta(hours=24)"
  %(name,offset))

def _check_date_fields(year,month,day):
 if not isinstance(year,int):
  raise TypeError('int expected')
 if not MINYEAR <=year <=MAXYEAR:
  raise ValueError('year must be in %d..%d'%(MINYEAR,MAXYEAR),year)
 if not 1 <=month <=12:
  raise ValueError('month must be in 1..12',month)
 dim=_days_in_month(year,month)
 if not 1 <=day <=dim:
  raise ValueError('day must be in 1..%d'%dim,day)

def _check_time_fields(hour,minute,second,microsecond):
 if not isinstance(hour,int):
  raise TypeError('int expected')
 if not 0 <=hour <=23:
  raise ValueError('hour must be in 0..23',hour)
 if not 0 <=minute <=59:
  raise ValueError('minute must be in 0..59',minute)
 if not 0 <=second <=59:
  raise ValueError('second must be in 0..59',second)
 if not 0 <=microsecond <=999999:
  raise ValueError('microsecond must be in 0..999999',microsecond)

def _check_tzinfo_arg(tz):
 if tz is not None and not isinstance(tz,tzinfo):
  raise TypeError("tzinfo argument must be None or of a tzinfo subclass")

def _cmperror(x,y):
 raise TypeError("can't compare '%s' to '%s'"%(
 type(x). __name__,type(y). __name__))

class timedelta:
 ''

 __slots__='_days','_seconds','_microseconds'

 def __new__(cls,days=0,seconds=0,microseconds=0,
 milliseconds=0,minutes=0,hours=0,weeks=0):

  d=s=us=0

  days +=weeks *7
  seconds +=minutes *60+hours *3600
  microseconds +=milliseconds *1000

  if isinstance(days,float):
   dayfrac,days=_math. modf(days)
   daysecondsfrac,daysecondswhole=_math. modf(dayfrac *(24. *3600.))
   assert daysecondswhole ==int(daysecondswhole)
   s=int(daysecondswhole)
   assert days ==int(days)
   d=int(days)
  else :
   daysecondsfrac=0.0
   d=days
  assert isinstance(daysecondsfrac,float)
  assert abs(daysecondsfrac)<=1.0
  assert isinstance(d,int)
  assert abs(s)<=24 *3600

  if isinstance(seconds,float):
   secondsfrac,seconds=_math. modf(seconds)
   assert seconds ==int(seconds)
   seconds=int(seconds)
   secondsfrac +=daysecondsfrac
   assert abs(secondsfrac)<=2.0
  else :
   secondsfrac=daysecondsfrac

  assert isinstance(secondsfrac,float)
  assert abs(secondsfrac)<=2.0

  assert isinstance(seconds,int)
  days,seconds=divmod(seconds,24 *3600)
  d +=days
  s +=int(seconds)
  assert isinstance(s,int)
  assert abs(s)<=2 *24 *3600

  usdouble=secondsfrac *1e6
  assert abs(usdouble)<2.1e6

  if isinstance(microseconds,float):
   microseconds +=usdouble
   microseconds=round(microseconds,0)
   seconds,microseconds=divmod(microseconds,1e6)
   assert microseconds ==int(microseconds)
   assert seconds ==int(seconds)
   days,seconds=divmod(seconds,24. *3600.)
   assert days ==int(days)
   assert seconds ==int(seconds)
   d +=int(days)
   s +=int(seconds)
   assert isinstance(s,int)
   assert abs(s)<=3 *24 *3600
  else :
   seconds,microseconds=divmod(microseconds,1000000)
   days,seconds=divmod(seconds,24 *3600)
   d +=days
   s +=int(seconds)
   assert isinstance(s,int)
   assert abs(s)<=3 *24 *3600
   microseconds=float(microseconds)
   microseconds +=usdouble
   microseconds=round(microseconds,0)
  assert abs(s)<=3 *24 *3600
  assert abs(microseconds)<3.1e6

  assert isinstance(microseconds,float)
  assert int(microseconds)==microseconds
  us=int(microseconds)
  seconds,us=divmod(us,1000000)
  s +=seconds
  assert isinstance(s,int)
  days,s=divmod(s,24 *3600)
  d +=days

  assert isinstance(d,int)
  assert isinstance(s,int)and 0 <=s <24 *3600
  assert isinstance(us,int)and 0 <=us <1000000

  self=object. __new__(cls)

  self. _days=d
  self. _seconds=s
  self. _microseconds=us
  if abs(d)>999999999:
   raise OverflowError("timedelta # of days is too large: %d"%d)

  return self

 def __repr__(self):
  if self. _microseconds:
   return"%s(%d, %d, %d)"%('datetime.'+self. __class__. __name__,
   self. _days,
   self. _seconds,
   self. _microseconds)
  if self. _seconds:
   return"%s(%d, %d)"%('datetime.'+self. __class__. __name__,
   self. _days,
   self. _seconds)
  return"%s(%d)"%('datetime.'+self. __class__. __name__,self. _days)

 def __str__(self):
  mm,ss=divmod(self. _seconds,60)
  hh,mm=divmod(mm,60)
  s="%d:%02d:%02d"%(hh,mm,ss)
  if self. _days:
   def plural(n):
    return n,abs(n)!=1 and"s"or""
   s=("%d day%s, "%plural(self. _days))+s
  if self. _microseconds:
   s=s+".%06d"%self. _microseconds
  return s

 def total_seconds(self):
  ''
  return ((self. days *86400+self. seconds)*10 **6+
  self. microseconds)/10 **6

 @property
 def days(self):
  ''
  return self. _days

 @property
 def seconds(self):
  ''
  return self. _seconds

 @property
 def microseconds(self):
  ''
  return self. _microseconds

 def __add__(self,other):
  if isinstance(other,timedelta):

   return timedelta(self. _days+other. _days,
   self. _seconds+other. _seconds,
   self. _microseconds+other. _microseconds)
  return NotImplemented

 __radd__=__add__

 def __sub__(self,other):
  if isinstance(other,timedelta):

   return timedelta(self. _days -other. _days,
   self. _seconds -other. _seconds,
   self. _microseconds -other. _microseconds)
  return NotImplemented

 def __rsub__(self,other):
  if isinstance(other,timedelta):
   return -self+other
  return NotImplemented

 def __neg__(self):

  return timedelta(-self. _days,
  -self. _seconds,
  -self. _microseconds)

 def __pos__(self):
  return self

 def __abs__(self):
  if self. _days <0:
   return -self
  else :
   return self

 def __mul__(self,other):
  if isinstance(other,int):

   return timedelta(self. _days *other,
   self. _seconds *other,
   self. _microseconds *other)
  if isinstance(other,float):
   a,b=other. as_integer_ratio()
   return self *a /b
  return NotImplemented

 __rmul__=__mul__

 def _to_microseconds(self):
  return ((self. _days *(24 *3600)+self. _seconds)*1000000+
  self. _microseconds)

 def __floordiv__(self,other):
  if not isinstance(other,(int,timedelta)):
   return NotImplemented
  usec=self. _to_microseconds()
  if isinstance(other,timedelta):
   return usec //other. _to_microseconds()
  if isinstance(other,int):
   return timedelta(0,0,usec //other)

 def __truediv__(self,other):
  if not isinstance(other,(int,float,timedelta)):
   return NotImplemented
  usec=self. _to_microseconds()
  if isinstance(other,timedelta):
   return usec /other. _to_microseconds()
  if isinstance(other,int):
   return timedelta(0,0,usec /other)
  if isinstance(other,float):
   a,b=other. as_integer_ratio()
   return timedelta(0,0,b *usec /a)

 def __mod__(self,other):
  if isinstance(other,timedelta):
   r=self. _to_microseconds()%other. _to_microseconds()
   return timedelta(0,0,r)
  return NotImplemented

 def __divmod__(self,other):
  if isinstance(other,timedelta):
   q,r=divmod(self. _to_microseconds(),
   other. _to_microseconds())
   return q,timedelta(0,0,r)
  return NotImplemented

 def __eq__(self,other):
  if isinstance(other,timedelta):
   return self. _cmp(other)==0
  else :
   return False

 def __ne__(self,other):
  if isinstance(other,timedelta):
   return self. _cmp(other)!=0
  else :
   return True

 def __le__(self,other):
  if isinstance(other,timedelta):
   return self. _cmp(other)<=0
  else :
   _cmperror(self,other)

 def __lt__(self,other):
  if isinstance(other,timedelta):
   return self. _cmp(other)<0
  else :
   _cmperror(self,other)

 def __ge__(self,other):
  if isinstance(other,timedelta):
   return self. _cmp(other)>=0
  else :
   _cmperror(self,other)

 def __gt__(self,other):
  if isinstance(other,timedelta):
   return self. _cmp(other)>0
  else :
   _cmperror(self,other)

 def _cmp(self,other):
  assert isinstance(other,timedelta)
  return _cmp(self. _getstate(),other. _getstate())

 def __hash__(self):
  return hash(self. _getstate())

 def __bool__(self):
  return (self. _days !=0 or
  self. _seconds !=0 or
  self. _microseconds !=0)

 def _getstate(self):
  return (self. _days,self. _seconds,self. _microseconds)

 def __reduce__(self):
  return (self. __class__,self. _getstate())

timedelta. min=timedelta(-999999999)
timedelta. max=timedelta(days=999999999,hours=23,minutes=59,seconds=59,
microseconds=999999)
timedelta. resolution=timedelta(microseconds=1)

class date:
 ''

 __slots__='_year','_month','_day'

 def __new__(cls,year,month=None ,day=None ):
  ''

  if (isinstance(year,bytes)and len(year)==4 and
  1 <=year[2]<=12 and month is None ):

   self=object. __new__(cls)
   self. __setstate(year)
   return self
  _check_date_fields(year,month,day)
  self=object. __new__(cls)
  self. _year=year
  self. _month=month
  self. _day=day
  return self

 @classmethod
 def fromtimestamp(cls,t):
  ''
  y,m,d,hh,mm,ss,weekday,jday,dst=_time. localtime(t)
  return cls(y,m,d)

 @classmethod
 def today(cls):
  ''
  t=_time. time()
  return cls. fromtimestamp(t)

 @classmethod
 def fromordinal(cls,n):
  ''

  y,m,d=_ord2ymd(n)
  return cls(y,m,d)

 def __repr__(self):
  ''

  return"%s(%d, %d, %d)"%('datetime.'+self. __class__. __name__,
  self. _year,
  self. _month,
  self. _day)

 def ctime(self):
  ''
  weekday=self. toordinal()%7 or 7
  return"%s %s %2d 00:00:00 %04d"%(
  _DAYNAMES[weekday],
  _MONTHNAMES[self. _month],
  self. _day,self. _year)

 def strftime(self,fmt):
  ''
  return _wrap_strftime(self,fmt,self. timetuple())

 def __format__(self,fmt):
  if len(fmt)!=0:
   return self. strftime(fmt)
  return str(self)

 def isoformat(self):
  ''

  return"%04d-%02d-%02d"%(self. _year,self. _month,self. _day)

 __str__=isoformat

 @property
 def year(self):
  ''
  return self. _year

 @property
 def month(self):
  ''
  return self. _month

 @property
 def day(self):
  ''
  return self. _day

 def timetuple(self):
  ''
  return _build_struct_time(self. _year,self. _month,self. _day,
  0,0,0,-1)

 def toordinal(self):
  ''

  return _ymd2ord(self. _year,self. _month,self. _day)

 def replace(self,year=None ,month=None ,day=None ):
  ''
  if year is None :
   year=self. _year
  if month is None :
   month=self. _month
  if day is None :
   day=self. _day
  _check_date_fields(year,month,day)
  return date(year,month,day)

 def __eq__(self,other):
  if isinstance(other,date):
   return self. _cmp(other)==0
  return NotImplemented

 def __ne__(self,other):
  if isinstance(other,date):
   return self. _cmp(other)!=0
  return NotImplemented

 def __le__(self,other):
  if isinstance(other,date):
   return self. _cmp(other)<=0
  return NotImplemented

 def __lt__(self,other):
  if isinstance(other,date):
   return self. _cmp(other)<0
  return NotImplemented

 def __ge__(self,other):
  if isinstance(other,date):
   return self. _cmp(other)>=0
  return NotImplemented

 def __gt__(self,other):
  if isinstance(other,date):
   return self. _cmp(other)>0
  return NotImplemented

 def _cmp(self,other):
  assert isinstance(other,date)
  y,m,d=self. _year,self. _month,self. _day
  y2,m2,d2=other. _year,other. _month,other. _day
  return _cmp((y,m,d),(y2,m2,d2))

 def __hash__(self):
  ''
  return hash(self. _getstate())

 def __add__(self,other):
  ''
  if isinstance(other,timedelta):
   o=self. toordinal()+other. days
   if 0 <o <=_MAXORDINAL:
    return date. fromordinal(o)
   raise OverflowError("result out of range")
  return NotImplemented

 __radd__=__add__

 def __sub__(self,other):
  ''
  if isinstance(other,timedelta):
   return self+timedelta(-other. days)
  if isinstance(other,date):
   days1=self. toordinal()
   days2=other. toordinal()
   return timedelta(days1 -days2)
  return NotImplemented

 def weekday(self):
  ''
  return (self. toordinal()+6)%7

 def isoweekday(self):
  ''

  return self. toordinal()%7 or 7

 def isocalendar(self):
  ''

  year=self. _year
  week1monday=_isoweek1monday(year)
  today=_ymd2ord(self. _year,self. _month,self. _day)

  week,day=divmod(today -week1monday,7)
  if week <0:
   year -=1
   week1monday=_isoweek1monday(year)
   week,day=divmod(today -week1monday,7)
  elif week >=52:
   if today >=_isoweek1monday(year+1):
    year +=1
    week=0
  return year,week+1,day+1

 def _getstate(self):
  yhi,ylo=divmod(self. _year,256)
  return bytes([yhi,ylo,self. _month,self. _day]),

 def __setstate(self,string):
  if len(string)!=4 or not (1 <=string[2]<=12):
   raise TypeError("not enough arguments")
  yhi,ylo,self. _month,self. _day=string
  self. _year=yhi *256+ylo

 def __reduce__(self):
  return (self. __class__,self. _getstate())

_date_class=date

date. min=date(1,1,1)
date. max=date(9999,12,31)
date. resolution=timedelta(days=1)

class tzinfo:
 ''

 __slots__=()
 def tzname(self,dt):
  ''
  raise NotImplementedError("tzinfo subclass must override tzname()")

 def utcoffset(self,dt):
  ''
  raise NotImplementedError("tzinfo subclass must override utcoffset()")

 def dst(self,dt):
  ''

  raise NotImplementedError("tzinfo subclass must override dst()")

 def fromutc(self,dt):
  ''

  if not isinstance(dt,datetime):
   raise TypeError("fromutc() requires a datetime argument")
  if dt. tzinfo is not self:
   raise ValueError("dt.tzinfo is not self")

  dtoff=dt. utcoffset()
  if dtoff is None :
   raise ValueError("fromutc() requires a non-None utcoffset() "
   "result")

  dtdst=dt. dst()
  if dtdst is None :
   raise ValueError("fromutc() requires a non-None dst() result")
  delta=dtoff -dtdst
  if delta:
   dt +=delta
   dtdst=dt. dst()
   if dtdst is None :
    raise ValueError("fromutc(): dt.dst gave inconsistent "
    "results; cannot convert")
  return dt+dtdst

 def __reduce__(self):
  getinitargs=getattr(self,"__getinitargs__",None )
  if getinitargs:
   args=getinitargs()
  else :
   args=()
  getstate=getattr(self,"__getstate__",None )
  if getstate:
   state=getstate()
  else :
   state=getattr(self,"__dict__",None )or None
  if state is None :
   return (self. __class__,args)
  else :
   return (self. __class__,args,state)

_tzinfo_class=tzinfo

class time:
 ''

 def __new__(cls,hour=0,minute=0,second=0,microsecond=0,tzinfo=None ):
  ''

  self=object. __new__(cls)
  if isinstance(hour,bytes)and len(hour)==6:

   self. __setstate(hour,minute or None )
   return self
  _check_tzinfo_arg(tzinfo)
  _check_time_fields(hour,minute,second,microsecond)
  self. _hour=hour
  self. _minute=minute
  self. _second=second
  self. _microsecond=microsecond
  self. _tzinfo=tzinfo
  return self

 @property
 def hour(self):
  ''
  return self. _hour

 @property
 def minute(self):
  ''
  return self. _minute

 @property
 def second(self):
  ''
  return self. _second

 @property
 def microsecond(self):
  ''
  return self. _microsecond

 @property
 def tzinfo(self):
  ''
  return self. _tzinfo

 def __eq__(self,other):
  if isinstance(other,time):
   return self. _cmp(other,allow_mixed=True )==0
  else :
   return False

 def __ne__(self,other):
  if isinstance(other,time):
   return self. _cmp(other,allow_mixed=True )!=0
  else :
   return True

 def __le__(self,other):
  if isinstance(other,time):
   return self. _cmp(other)<=0
  else :
   _cmperror(self,other)

 def __lt__(self,other):
  if isinstance(other,time):
   return self. _cmp(other)<0
  else :
   _cmperror(self,other)

 def __ge__(self,other):
  if isinstance(other,time):
   return self. _cmp(other)>=0
  else :
   _cmperror(self,other)

 def __gt__(self,other):
  if isinstance(other,time):
   return self. _cmp(other)>0
  else :
   _cmperror(self,other)

 def _cmp(self,other,allow_mixed=False ):
  assert isinstance(other,time)
  mytz=self. _tzinfo
  ottz=other. _tzinfo
  myoff=otoff=None

  if mytz is ottz:
   base_compare=True
  else :
   myoff=self. utcoffset()
   otoff=other. utcoffset()
   base_compare=myoff ==otoff

  if base_compare:
   return _cmp((self. _hour,self. _minute,self. _second,
   self. _microsecond),
   (other. _hour,other. _minute,other. _second,
   other. _microsecond))
  if myoff is None or otoff is None :
   if allow_mixed:
    return 2
   else :
    raise TypeError("cannot compare naive and aware times")
  myhhmm=self. _hour *60+self. _minute -myoff //timedelta(minutes=1)
  othhmm=other. _hour *60+other. _minute -otoff //timedelta(minutes=1)
  return _cmp((myhhmm,self. _second,self. _microsecond),
  (othhmm,other. _second,other. _microsecond))

 def __hash__(self):
  ''
  tzoff=self. utcoffset()
  if not tzoff:
   return hash(self. _getstate()[0])
  h,m=divmod(timedelta(hours=self. hour,minutes=self. minute)-tzoff,
  timedelta(hours=1))
  assert not m %timedelta(minutes=1),"whole minute"
  m //=timedelta(minutes=1)
  if 0 <=h <24:
   return hash(time(h,m,self. second,self. microsecond))
  return hash((h,m,self. second,self. microsecond))

 def _tzstr(self,sep=":"):
  ''
  off=self. utcoffset()
  if off is not None :
   if off. days <0:
    sign="-"
    off=-off
   else :
    sign="+"
   hh,mm=divmod(off,timedelta(hours=1))
   assert not mm %timedelta(minutes=1),"whole minute"
   mm //=timedelta(minutes=1)
   assert 0 <=hh <24
   off="%s%02d%s%02d"%(sign,hh,sep,mm)
  return off

 def __repr__(self):
  ''
  if self. _microsecond !=0:
   s=", %d, %d"%(self. _second,self. _microsecond)
  elif self. _second !=0:
   s=", %d"%self. _second
  else :
   s=""
  s="%s(%d, %d%s)"%('datetime.'+self. __class__. __name__,
  self. _hour,self. _minute,s)
  if self. _tzinfo is not None :
   assert s[-1:]==")"
   s=s[:-1]+", tzinfo=%r"%self. _tzinfo+")"
  return s

 def isoformat(self):
  ''

  s=_format_time(self. _hour,self. _minute,self. _second,
  self. _microsecond)
  tz=self. _tzstr()
  if tz:
   s +=tz
  return s

 __str__=isoformat

 def strftime(self,fmt):
  ''

  timetuple=(1900,1,1,
  self. _hour,self. _minute,self. _second,
  0,1,-1)
  return _wrap_strftime(self,fmt,timetuple)

 def __format__(self,fmt):
  if len(fmt)!=0:
   return self. strftime(fmt)
  return str(self)

 def utcoffset(self):
  ''

  if self. _tzinfo is None :
   return None
  offset=self. _tzinfo. utcoffset(None )
  _check_utc_offset("utcoffset",offset)
  return offset

 def tzname(self):
  ''

  if self. _tzinfo is None :
   return None
  name=self. _tzinfo. tzname(None )
  _check_tzname(name)
  return name

 def dst(self):
  ''

  if self. _tzinfo is None :
   return None
  offset=self. _tzinfo. dst(None )
  _check_utc_offset("dst",offset)
  return offset

 def replace(self,hour=None ,minute=None ,second=None ,microsecond=None ,
 tzinfo=True ):
  ''
  if hour is None :
   hour=self. hour
  if minute is None :
   minute=self. minute
  if second is None :
   second=self. second
  if microsecond is None :
   microsecond=self. microsecond
  if tzinfo is True :
   tzinfo=self. tzinfo
  _check_time_fields(hour,minute,second,microsecond)
  _check_tzinfo_arg(tzinfo)
  return time(hour,minute,second,microsecond,tzinfo)

 def __bool__(self):
  if self. second or self. microsecond:
   return True
  offset=self. utcoffset()or timedelta(0)
  return timedelta(hours=self. hour,minutes=self. minute)!=offset

 def _getstate(self):
  us2,us3=divmod(self. _microsecond,256)
  us1,us2=divmod(us2,256)
  basestate=bytes([self. _hour,self. _minute,self. _second,
  us1,us2,us3])
  if self. _tzinfo is None :
   return (basestate,)
  else :
   return (basestate,self. _tzinfo)

 def __setstate(self,string,tzinfo):
  if len(string)!=6 or string[0]>=24:
   raise TypeError("an integer is required")
  (self. _hour,self. _minute,self. _second,
  us1,us2,us3)=string
  self. _microsecond=(((us1 <<8)|us2)<<8)|us3
  if tzinfo is None or isinstance(tzinfo,_tzinfo_class):
   self. _tzinfo=tzinfo
  else :
   raise TypeError("bad tzinfo state arg %r"%tzinfo)

 def __reduce__(self):
  return (time,self. _getstate())

_time_class=time

time. min=time(0,0,0)
time. max=time(23,59,59,999999)
time. resolution=timedelta(microseconds=1)

class datetime(date):
 ''

 __slots__=date. __slots__+(
 '_hour','_minute','_second',
 '_microsecond','_tzinfo')
 def __new__(cls,year,month=None ,day=None ,hour=0,minute=0,second=0,
 microsecond=0,tzinfo=None ):
  if isinstance(year,bytes)and len(year)==10:

   self=date. __new__(cls,year[:4])
   self. __setstate(year,month)
   return self
  _check_tzinfo_arg(tzinfo)
  _check_time_fields(hour,minute,second,microsecond)
  self=date. __new__(cls,year,month,day)
  self. _hour=hour
  self. _minute=minute
  self. _second=second
  self. _microsecond=microsecond
  self. _tzinfo=tzinfo
  return self

 @property
 def hour(self):
  ''
  return self. _hour

 @property
 def minute(self):
  ''
  return self. _minute

 @property
 def second(self):
  ''
  return self. _second

 @property
 def microsecond(self):
  ''
  return self. _microsecond

 @property
 def tzinfo(self):
  ''
  return self. _tzinfo

 @classmethod
 def fromtimestamp(cls,t,tz=None ):
  ''

  _check_tzinfo_arg(tz)

  converter=_time. localtime if tz is None else _time. gmtime

  t,frac=divmod(t,1.0)
  us=int(frac *1e6)

  if us ==1000000:
   t +=1
   us=0
  y,m,d,hh,mm,ss,weekday,jday,dst=converter(t)
  ss=min(ss,59)
  result=cls(y,m,d,hh,mm,ss,us,tz)
  if tz is not None :
   result=tz. fromutc(result)
  return result

 @classmethod
 def utcfromtimestamp(cls,t):
  ''
  t,frac=divmod(t,1.0)
  us=int(frac *1e6)

  if us ==1000000:
   t +=1
   us=0
  y,m,d,hh,mm,ss,weekday,jday,dst=_time. gmtime(t)
  ss=min(ss,59)
  return cls(y,m,d,hh,mm,ss,us)

 @classmethod
 def now(cls,tz=None ):
  ''
  t=_time. time()
  return cls. fromtimestamp(t,tz)

 @classmethod
 def utcnow(cls):
  ''
  t=_time. time()
  return cls. utcfromtimestamp(t)

 @classmethod
 def combine(cls,date,time):
  ''
  if not isinstance(date,_date_class):
   raise TypeError("date argument must be a date instance")
  if not isinstance(time,_time_class):
   raise TypeError("time argument must be a time instance")
  return cls(date. year,date. month,date. day,
  time. hour,time. minute,time. second,time. microsecond,
  time. tzinfo)

 def timetuple(self):
  ''
  dst=self. dst()
  if dst is None :
   dst=-1
  elif dst:
   dst=1
  else :
   dst=0
  return _build_struct_time(self. year,self. month,self. day,
  self. hour,self. minute,self. second,
  dst)

 def timestamp(self):
  ''
  if self. _tzinfo is None :
   return _time. mktime((self. year,self. month,self. day,
   self. hour,self. minute,self. second,
   -1,-1,-1))+self. microsecond /1e6
  else :
   return (self -_EPOCH). total_seconds()

 def utctimetuple(self):
  ''
  offset=self. utcoffset()
  if offset:
   self -=offset
  y,m,d=self. year,self. month,self. day
  hh,mm,ss=self. hour,self. minute,self. second
  return _build_struct_time(y,m,d,hh,mm,ss,0)

 def date(self):
  ''
  return date(self. _year,self. _month,self. _day)

 def time(self):
  ''
  return time(self. hour,self. minute,self. second,self. microsecond)

 def timetz(self):
  ''
  return time(self. hour,self. minute,self. second,self. microsecond,
  self. _tzinfo)

 def replace(self,year=None ,month=None ,day=None ,hour=None ,
 minute=None ,second=None ,microsecond=None ,tzinfo=True ):
  ''
  if year is None :
   year=self. year
  if month is None :
   month=self. month
  if day is None :
   day=self. day
  if hour is None :
   hour=self. hour
  if minute is None :
   minute=self. minute
  if second is None :
   second=self. second
  if microsecond is None :
   microsecond=self. microsecond
  if tzinfo is True :
   tzinfo=self. tzinfo
  _check_date_fields(year,month,day)
  _check_time_fields(hour,minute,second,microsecond)
  _check_tzinfo_arg(tzinfo)
  return datetime(year,month,day,hour,minute,second,
  microsecond,tzinfo)

 def astimezone(self,tz=None ):
  if tz is None :
   if self. tzinfo is None :
    raise ValueError("astimezone() requires an aware datetime")
   ts=(self -_EPOCH)//timedelta(seconds=1)
   localtm=_time. localtime(ts)
   local=datetime(*localtm[:6])
   try :

    gmtoff=localtm. tm_gmtoff
    zone=localtm. tm_zone
   except AttributeError:

    delta=local -datetime(*_time. gmtime(ts)[:6])
    dst=_time. daylight and localtm. tm_isdst >0
    gmtoff=-(_time. altzone if dst else _time. timezone)
    if delta ==timedelta(seconds=gmtoff):
     tz=timezone(delta,_time. tzname[dst])
    else :
     tz=timezone(delta)
   else :
    tz=timezone(timedelta(seconds=gmtoff),zone)

  elif not isinstance(tz,tzinfo):
   raise TypeError("tz argument must be an instance of tzinfo")

  mytz=self. tzinfo
  if mytz is None :
   raise ValueError("astimezone() requires an aware datetime")

  if tz is mytz:
   return self

  myoffset=self. utcoffset()
  if myoffset is None :
   raise ValueError("astimezone() requires an aware datetime")
  utc=(self -myoffset). replace(tzinfo=tz)

  return tz. fromutc(utc)

 def ctime(self):
  ''
  weekday=self. toordinal()%7 or 7
  return"%s %s %2d %02d:%02d:%02d %04d"%(
  _DAYNAMES[weekday],
  _MONTHNAMES[self. _month],
  self. _day,
  self. _hour,self. _minute,self. _second,
  self. _year)

 def isoformat(self,sep='T'):
  ''

  s=("%04d-%02d-%02d%c"%(self. _year,self. _month,self. _day,
  sep)+
  _format_time(self. _hour,self. _minute,self. _second,
  self. _microsecond))
  off=self. utcoffset()
  if off is not None :
   if off. days <0:
    sign="-"
    off=-off
   else :
    sign="+"
   hh,mm=divmod(off,timedelta(hours=1))
   assert not mm %timedelta(minutes=1),"whole minute"
   mm //=timedelta(minutes=1)
   s +="%s%02d:%02d"%(sign,hh,mm)
  return s

 def __repr__(self):
  ''
  L=[self. _year,self. _month,self. _day,
  self. _hour,self. _minute,self. _second,self. _microsecond]
  if L[-1]==0:
   del L[-1]
  if L[-1]==0:
   del L[-1]
  s=", ". join(map(str,L))
  s="%s(%s)"%('datetime.'+self. __class__. __name__,s)
  if self. _tzinfo is not None :
   assert s[-1:]==")"
   s=s[:-1]+", tzinfo=%r"%self. _tzinfo+")"
  return s

 def __str__(self):
  ''
  return self. isoformat(sep=' ')

 @classmethod
 def strptime(cls,date_string,format):
  ''
  import _strptime
  return _strptime. _strptime_datetime(cls,date_string,format)

 def utcoffset(self):
  ''

  if self. _tzinfo is None :
   return None
  offset=self. _tzinfo. utcoffset(self)
  _check_utc_offset("utcoffset",offset)
  return offset

 def tzname(self):
  ''

  name=_call_tzinfo_method(self. _tzinfo,"tzname",self)
  _check_tzname(name)
  return name

 def dst(self):
  ''

  if self. _tzinfo is None :
   return None
  offset=self. _tzinfo. dst(self)
  _check_utc_offset("dst",offset)
  return offset

 def __eq__(self,other):
  if isinstance(other,datetime):
   return self. _cmp(other,allow_mixed=True )==0
  elif not isinstance(other,date):
   return NotImplemented
  else :
   return False

 def __ne__(self,other):
  if isinstance(other,datetime):
   return self. _cmp(other,allow_mixed=True )!=0
  elif not isinstance(other,date):
   return NotImplemented
  else :
   return True

 def __le__(self,other):
  if isinstance(other,datetime):
   return self. _cmp(other)<=0
  elif not isinstance(other,date):
   return NotImplemented
  else :
   _cmperror(self,other)

 def __lt__(self,other):
  if isinstance(other,datetime):
   return self. _cmp(other)<0
  elif not isinstance(other,date):
   return NotImplemented
  else :
   _cmperror(self,other)

 def __ge__(self,other):
  if isinstance(other,datetime):
   return self. _cmp(other)>=0
  elif not isinstance(other,date):
   return NotImplemented
  else :
   _cmperror(self,other)

 def __gt__(self,other):
  if isinstance(other,datetime):
   return self. _cmp(other)>0
  elif not isinstance(other,date):
   return NotImplemented
  else :
   _cmperror(self,other)

 def _cmp(self,other,allow_mixed=False ):
  assert isinstance(other,datetime)
  mytz=self. _tzinfo
  ottz=other. _tzinfo
  myoff=otoff=None

  if mytz is ottz:
   base_compare=True
  else :
   myoff=self. utcoffset()
   otoff=other. utcoffset()
   base_compare=myoff ==otoff

  if base_compare:
   return _cmp((self. _year,self. _month,self. _day,
   self. _hour,self. _minute,self. _second,
   self. _microsecond),
   (other. _year,other. _month,other. _day,
   other. _hour,other. _minute,other. _second,
   other. _microsecond))
  if myoff is None or otoff is None :
   if allow_mixed:
    return 2
   else :
    raise TypeError("cannot compare naive and aware datetimes")

  diff=self -other
  if diff. days <0:
   return -1
  return diff and 1 or 0

 def __add__(self,other):
  ''
  if not isinstance(other,timedelta):
   return NotImplemented
  delta=timedelta(self. toordinal(),
  hours=self. _hour,
  minutes=self. _minute,
  seconds=self. _second,
  microseconds=self. _microsecond)
  delta +=other
  hour,rem=divmod(delta. seconds,3600)
  minute,second=divmod(rem,60)
  if 0 <delta. days <=_MAXORDINAL:
   return datetime. combine(date. fromordinal(delta. days),
   time(hour,minute,second,
   delta. microseconds,
   tzinfo=self. _tzinfo))
  raise OverflowError("result out of range")

 __radd__=__add__

 def __sub__(self,other):
  ''
  if not isinstance(other,datetime):
   if isinstance(other,timedelta):
    return self+-other
   return NotImplemented

  days1=self. toordinal()
  days2=other. toordinal()
  secs1=self. _second+self. _minute *60+self. _hour *3600
  secs2=other. _second+other. _minute *60+other. _hour *3600
  base=timedelta(days1 -days2,
  secs1 -secs2,
  self. _microsecond -other. _microsecond)
  if self. _tzinfo is other. _tzinfo:
   return base
  myoff=self. utcoffset()
  otoff=other. utcoffset()
  if myoff ==otoff:
   return base
  if myoff is None or otoff is None :
   raise TypeError("cannot mix naive and timezone-aware time")
  return base+otoff -myoff

 def __hash__(self):
  tzoff=self. utcoffset()
  if tzoff is None :
   return hash(self. _getstate()[0])
  days=_ymd2ord(self. year,self. month,self. day)
  seconds=self. hour *3600+self. minute *60+self. second
  return hash(timedelta(days,seconds,self. microsecond)-tzoff)

 def _getstate(self):
  yhi,ylo=divmod(self. _year,256)
  us2,us3=divmod(self. _microsecond,256)
  us1,us2=divmod(us2,256)
  basestate=bytes([yhi,ylo,self. _month,self. _day,
  self. _hour,self. _minute,self. _second,
  us1,us2,us3])
  if self. _tzinfo is None :
   return (basestate,)
  else :
   return (basestate,self. _tzinfo)

 def __setstate(self,string,tzinfo):
  (yhi,ylo,self. _month,self. _day,self. _hour,
  self. _minute,self. _second,us1,us2,us3)=string
  self. _year=yhi *256+ylo
  self. _microsecond=(((us1 <<8)|us2)<<8)|us3
  if tzinfo is None or isinstance(tzinfo,_tzinfo_class):
   self. _tzinfo=tzinfo
  else :
   raise TypeError("bad tzinfo state arg %r"%tzinfo)

 def __reduce__(self):
  return (self. __class__,self. _getstate())

datetime. min=datetime(1,1,1)
datetime. max=datetime(9999,12,31,23,59,59,999999)
datetime. resolution=timedelta(microseconds=1)

def _isoweek1monday(year):

 THURSDAY=3
 firstday=_ymd2ord(year,1,1)
 firstweekday=(firstday+6)%7
 week1monday=firstday -firstweekday
 if firstweekday >THURSDAY:
  week1monday +=7
 return week1monday

class timezone(tzinfo):
 __slots__='_offset','_name'

 _Omitted=object()
 def __new__(cls,offset,name=_Omitted):
  if not isinstance(offset,timedelta):
   raise TypeError("offset must be a timedelta")
  if name is cls. _Omitted:
   if not offset:
    return cls. utc
   name=None
  elif not isinstance(name,str):
   raise TypeError("name must be a string")
  if not cls. _minoffset <=offset <=cls. _maxoffset:
   raise ValueError("offset must be a timedelta"
   " strictly between -timedelta(hours=24) and"
   " timedelta(hours=24).")
  if (offset. microseconds !=0 or
  offset. seconds %60 !=0):
   raise ValueError("offset must be a timedelta"
   " representing a whole number of minutes")
  return cls. _create(offset,name)

 @classmethod
 def _create(cls,offset,name=None ):
  self=tzinfo. __new__(cls)
  self. _offset=offset
  self. _name=name
  return self

 def __getinitargs__(self):
  ''
  if self. _name is None :
   return (self. _offset,)
  return (self. _offset,self. _name)

 def __eq__(self,other):
  if type(other)!=timezone:
   return False
  return self. _offset ==other. _offset

 def __hash__(self):
  return hash(self. _offset)

 def __repr__(self):
  ''

  if self is self. utc:
   return'datetime.timezone.utc'
  if self. _name is None :
   return"%s(%r)"%('datetime.'+self. __class__. __name__,
   self. _offset)
  return"%s(%r, %r)"%('datetime.'+self. __class__. __name__,
  self. _offset,self. _name)

 def __str__(self):
  return self. tzname(None )

 def utcoffset(self,dt):
  if isinstance(dt,datetime)or dt is None :
   return self. _offset
  raise TypeError("utcoffset() argument must be a datetime instance"
  " or None")

 def tzname(self,dt):
  if isinstance(dt,datetime)or dt is None :
   if self. _name is None :
    return self. _name_from_offset(self. _offset)
   return self. _name
  raise TypeError("tzname() argument must be a datetime instance"
  " or None")

 def dst(self,dt):
  if isinstance(dt,datetime)or dt is None :
   return None
  raise TypeError("dst() argument must be a datetime instance"
  " or None")

 def fromutc(self,dt):
  if isinstance(dt,datetime):
   if dt. tzinfo is not self:
    raise ValueError("fromutc: dt.tzinfo "
    "is not self")
   return dt+self. _offset
  raise TypeError("fromutc() argument must be a datetime instance"
  " or None")

 _maxoffset=timedelta(hours=23,minutes=59)
 _minoffset=-_maxoffset

 @staticmethod
 def _name_from_offset(delta):
  if delta <timedelta(0):
   sign='-'
   delta=-delta
  else :
   sign='+'
  hours,rest=divmod(delta,timedelta(hours=1))
  minutes=rest //timedelta(minutes=1)
  return'UTC{}{:02d}:{:02d}'. format(sign,hours,minutes)

timezone. utc=timezone. _create(timedelta(0))
timezone. min=timezone. _create(timezone. _minoffset)
timezone. max=timezone. _create(timezone. _maxoffset)
_EPOCH=datetime(1970,1,1,tzinfo=timezone. utc)
''

====datetime.py(file) end====

====editor.py(file) start====
import sys
import time
import traceback
import javascript

from browser import document as doc, window, console

_height = doc.documentElement.clientHeight

has_ace = True
try:
    editor = window.ace.edit("editor")
except:
    from browser import html
    editor = html.TEXTAREA(rows=20, cols=70)
    doc["editor"] <= editor
    def get_value(): return editor.value
    def set_value(x):editor.value = x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

storage = None

if 'set_debug' in doc:
    __BRYTHON__.debug = int(doc['set_debug'].checked)


def reset_src():
    editor.scrollToRow(0)
    editor.gotoLine(0)


def reset_src_area():
    if storage and "py_src" in storage:
        editor.value = storage["py_src"]
    else:
        editor.value = 'for i in range(10):\n\tprint(i)'


class cOutput:

    def write(self, data):
        console.log(str(data))

    def flush(self):
        pass


if "console" in doc:
    sys.stdout = cOutput()
    sys.stderr = cOutput()


def to_str(xx):
    return str(xx)


info = sys.implementation.version
doc['version'].text = '%s.%s.%s' % (info.major, info.minor, info.micro)

output = ''


def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60


def load_script(evt):
    _name = evt.target.value + '?foo=%s' % time.time()
    editor.setValue(open(_name).read())


def run(*args):
    global output
    doc["console"].value = ''
    src = editor.getValue()
    if storage is not None:
       storage["py_src"] = src

    t0 = time.perf_counter()
    try:
        ns = {'__name__':'__main__'}
        exec(src, ns)
        state = 1
    except Exception as exc:
        traceback.print_exc(file=sys.stderr)
        state = 0
    output = doc["console"].value

    print('<completed in %6.2f ms>' % ((time.perf_counter() - t0) * 1000.0))
    return state


def show_js(ev):
    src = editor.getValue()
    doc["console"].value = javascript.py2js(src, '__main__')


if has_ace:
    reset_src()
else:
    reset_src_area()
====editor.py(file) end====

====errno.py(file) start====
''

errorcode={1:'EPERM',2:'ENOENT',3:'ESRCH',4:'EINTR',5:'EIO',
6:'ENXIO',7:'E2BIG',8:'ENOEXEC',9:'EBADF',10:'ECHILD',11:'EAGAIN',
12:'ENOMEM',13:'EACCES',14:'EFAULT',15:'ENOTBLK',16:'EBUSY',
17:'EEXIST',18:'EXDEV',19:'ENODEV',20:'ENOTDIR',21:'EISDIR',
22:'EINVAL',23:'ENFILE',24:'EMFILE',25:'ENOTTY',26:'ETXTBSY',
27:'EFBIG',28:'ENOSPC',29:'ESPIPE',30:'EROFS',31:'EMLINK',
32:'EPIPE',33:'EDOM',34:'ERANGE',35:'EDEADLOCK',36:'ENAMETOOLONG',
37:'ENOLCK',38:'ENOSYS',39:'ENOTEMPTY',40:'ELOOP',42:'ENOMSG',
43:'EIDRM',44:'ECHRNG',45:'EL2NSYNC',46:'EL3HLT',47:'EL3RST',
48:'ELNRNG',49:'EUNATCH',50:'ENOCSI',51:'EL2HLT',52:'EBADE',
53:'EBADR',54:'EXFULL',55:'ENOANO',56:'EBADRQC',57:'EBADSLT',
59:'EBFONT',60:'ENOSTR',61:'ENODATA',62:'ETIME',63:'ENOSR',
64:'ENONET',65:'ENOPKG',66:'EREMOTE',67:'ENOLINK',68:'EADV',
69:'ESRMNT',70:'ECOMM',71:'EPROTO',72:'EMULTIHOP',73:'EDOTDOT',
74:'EBADMSG',75:'EOVERFLOW',76:'ENOTUNIQ',77:'EBADFD',78:'EREMCHG',
79:'ELIBACC',80:'ELIBBAD',81:'ELIBSCN',82:'ELIBMAX',83:'ELIBEXEC',
84:'EILSEQ',85:'ERESTART',86:'ESTRPIPE',87:'EUSERS',88:'ENOTSOCK',
89:'EDESTADDRREQ',90:'EMSGSIZE',91:'EPROTOTYPE',92:'ENOPROTOOPT',
93:'EPROTONOSUPPORT',94:'ESOCKTNOSUPPORT',95:'ENOTSUP',
96:'EPFNOSUPPORT',97:'EAFNOSUPPORT',98:'EADDRINUSE',
99:'EADDRNOTAVAIL',100:'ENETDOWN',101:'ENETUNREACH',102:'ENETRESET',
103:'ECONNABORTED',104:'ECONNRESET',105:'ENOBUFS',106:'EISCONN',
107:'ENOTCONN',108:'ESHUTDOWN',109:'ETOOMANYREFS',110:'ETIMEDOUT',
111:'ECONNREFUSED',112:'EHOSTDOWN',113:'EHOSTUNREACH',114:'EALREADY',
115:'EINPROGRESS',116:'ESTALE',117:'EUCLEAN',118:'ENOTNAM',
119:'ENAVAIL',120:'EISNAM',121:'EREMOTEIO',122:'EDQUOT',
123:'ENOMEDIUM',124:'EMEDIUMTYPE',125:'ECANCELED',126:'ENOKEY',
127:'EKEYEXPIRED',128:'EKEYREVOKED',129:'EKEYREJECTED',
130:'EOWNERDEAD',131:'ENOTRECOVERABLE',132:'ERFKILL'}

EPERM=1
ENOENT=2
ESRCH=3
EINTR=4
EIO=5
ENXIO=6
E2BIG=7
ENOEXEC=8
EBADF=9
ECHILD=10
EAGAIN=11
ENOMEM=12
EACCES=13
EFAULT=14
ENOTBLK=15
EBUSY=16
EEXIST=17
EXDEV=18
ENODEV=19
ENOTDIR=20
EISDIR=21
EINVAL=22
ENFILE=23
EMFILE=24
ENOTTY=25
ETXTBSY=26
EFBIG=27
ENOSPC=28
ESPIPE=29
EROFS=30
EMLINK=31
EPIPE=32
EDOM=33
ERANGE=34
EDEADLOCK=35
ENAMETOOLONG=36
ENOLCK=37
ENOSYS=38
ENOTEMPTY=39
ELOOP=40
ENOMSG=42
EIDRM=43
ECHRNG=44
EL2NSYNC=45
EL3HLT=46
EL3RST=47
ELNRNG=48
EUNATCH=49
ENOCSI=50
EL2HLT=51
EBADE=52
EBADR=53
EXFULL=54
ENOANO=55
EBADRQC=56
EBADSLT=57
EBFONT=59
ENOSTR=60
ENODATA=61
ETIME=62
ENOSR=63
ENONET=64
ENOPKG=65
EREMOTE=66
ENOLINK=67
EADV=68
ESRMNT=69
ECOMM=70
EPROTO=71
EMULTIHOP=72
EDOTDOT=73
EBADMSG=74
EOVERFLOW=75
ENOTUNIQ=76
EBADFD=77
EREMCHG=78
ELIBACC=79
ELIBBAD=80
ELIBSCN=81
ELIBMAX=82
ELIBEXEC=83
EILSEQ=84
ERESTART=85
ESTRPIPE=86
EUSERS=87
ENOTSOCK=88
EDESTADDRREQ=89
EMSGSIZE=90
EPROTOTYPE=91
ENOPROTOOPT=92
EPROTONOSUPPORT=93
ESOCKTNOSUPPORT=94
ENOTSUP=95
EPFNOSUPPORT=96
EAFNOSUPPORT=97
EADDRINUSE=98
EADDRNOTAVAIL=99
ENETDOWN=100
ENETUNREACH=101
ENETRESET=102
ECONNABORTED=103
ECONNRESET=104
ENOBUFS=105
EISCONN=106
ENOTCONN=107
ESHUTDOWN=108
ETOOMANYREFS=109
ETIMEDOUT=110
ECONNREFUSED=111
EHOSTDOWN=112
EHOSTUNREACH=113
EALREADY=114
EINPROGRESS=115
ESTALE=116
EUCLEAN=117
ENOTNAM=118
ENAVAIL=119
EISNAM=120
EREMOTEIO=121
EDQUOT=122
ENOMEDIUM=123
EMEDIUMTYPE=124
ECANCELED=125
ENOKEY=126
EKEYEXPIRED=127
EKEYREVOKED=128
EKEYREJECTED=129
EOWNERDEAD=130
ENOTRECOVERABLE=131
ERFKILL=132
====errno.py(file) end====

====genericpath.py(file) start====
''

import os
import stat

__all__=['commonprefix','exists','getatime','getctime','getmtime',
'getsize','isdir','isfile']

def exists(path):
 ''
 try :
  os. stat(path)
 except os. error:
  return False
 return True

def isfile(path):
 ''
 try :
  st=os. stat(path)
 except os. error:
  return False
 return stat. S_ISREG(st. st_mode)

def isdir(s):
 ''
 try :
  st=os. stat(s)
 except os. error:
  return False
 return stat. S_ISDIR(st. st_mode)

def getsize(filename):
 ''
 return os. stat(filename). st_size

def getmtime(filename):
 ''
 return os. stat(filename). st_mtime

def getatime(filename):
 ''
 return os. stat(filename). st_atime

def getctime(filename):
 ''
 return os. stat(filename). st_ctime

def commonprefix(m):
 ''
 if not m:return''
 s1=min(m)
 s2=max(m)
 for i,c in enumerate(s1):
  if c !=s2[i]:
   return s1[:i]
 return s1

def _splitext(p,sep,altsep,extsep):
 ''

 sepIndex=p. rfind(sep)
 if altsep:
  altsepIndex=p. rfind(altsep)
  sepIndex=max(sepIndex,altsepIndex)

 dotIndex=p. rfind(extsep)
 if dotIndex >sepIndex:

  filenameIndex=sepIndex+1
  while filenameIndex <dotIndex:
   if p[filenameIndex:filenameIndex+1]!=extsep:
    return p[:dotIndex],p[dotIndex:]
   filenameIndex +=1

 return p,p[:0]
====genericpath.py(file) end====

====heapq.py(file) start====
''

__about__="""Heap queues

[explanation by François Pinard]

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are `k', not a[k]:

                                   0

                  1                                 2

          3               4                5               6

      7       8       9       10      11      12      13      14

    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30

In the tree above, each cell `k' is topping `2*k+1' and `2*k+2'.  In
an usual binary tournament we see in sports, each cell is the winner
over the two cells it tops, and we can trace the winner down the tree
to see all opponents s/he had.  However, in many computer applications
of such tournaments, we do not need to trace the history of a winner.
To be more memory efficient, when a winner is promoted, we try to
replace it by something else at a lower level, and the rule becomes
that a cell and the two cells it tops contain three different items,
but the top cell "wins" over the two topped cells.

If this heap invariant is protected at all time, index 0 is clearly
the overall winner.  The simplest algorithmic way to remove it and
find the "next" winner is to move some loser (let's say cell 30 in the
diagram above) into the 0 position, and then percolate this new 0 down
the tree, exchanging values, until the invariant is re-established.
This is clearly logarithmic on the total number of items in the tree.
By iterating over all items, you get an O(n ln n) sort.

A nice feature of this sort is that you can efficiently insert new
items while the sort is going on, provided that the inserted items are
not "better" than the last 0'th element you extracted.  This is
especially useful in simulation contexts, where the tree holds all
incoming events, and the "win" condition means the smallest scheduled
time.  When an event schedule other events for execution, they are
scheduled into the future, so they can easily go into the heap.  So, a
heap is a good structure for implementing schedulers (this is what I
used for my MIDI sequencer :-).

Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy,
the speed is almost constant, and the worst case is not much different
than the average case.  However, there are other representations which
are more efficient overall, yet the worst cases might be terrible.

Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, which size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often
very cleverly organised[1].  It is very important that the initial
sort produces the longest runs possible.  Tournaments are a good way
to that.  If, using all the memory available to hold a tournament, you
replace and percolate items that happen to fit the current run, you'll
produce runs which are twice the size of the memory for random input,
and much better for input fuzzily ordered.

Moreover, if you output the 0'th item on disk and get an input which
may not fit in the current tournament (because the value "wins" over
the last output value), it cannot fit in the heap, so the size of the
heap decreases.  The freed memory could be cleverly reused immediately
for progressively building a second heap, which grows at exactly the
same rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!

In a word, heaps are useful memory structures to know.  I use them in
a few applications, and I think it is good to keep a `heap' module
around. :-)

--------------------
[1] The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big
tape drives, the story was quite different, and one had to be very
clever to ensure (far in advance) that each tape movement will be the
most effective possible (that is, will best participate at
"progressing" the merge).  Some tapes were even able to read
backwards, and this was also used to avoid the rewinding time.
Believe me, real good tape sorts were quite spectacular to watch!
From all times, sorting has always been a Great Art! :-)
"""

__all__=['heappush','heappop','heapify','heapreplace','merge',
'nlargest','nsmallest','heappushpop']

from itertools import islice,count,tee,chain

def heappush(heap,item):
 ''
 heap. append(item)
 _siftdown(heap,0,len(heap)-1)

def heappop(heap):
 ''
 lastelt=heap. pop()
 if heap:
  returnitem=heap[0]
  heap[0]=lastelt
  _siftup(heap,0)
 else :
  returnitem=lastelt
 return returnitem

def heapreplace(heap,item):
 ''

 returnitem=heap[0]
 heap[0]=item
 _siftup(heap,0)
 return returnitem

def heappushpop(heap,item):
 ''
 if heap and heap[0]<item:
  item,heap[0]=heap[0],item
  _siftup(heap,0)
 return item

def heapify(x):
 ''
 n=len(x)

 for i in reversed(range(n //2)):
  _siftup(x,i)

def _heappushpop_max(heap,item):
 ''
 if heap and item <heap[0]:
  item,heap[0]=heap[0],item
  _siftup_max(heap,0)
 return item

def _heapify_max(x):
 ''
 n=len(x)
 for i in reversed(range(n //2)):
  _siftup_max(x,i)

def nlargest(n,iterable):
 ''

 if n <0:
  return []
 it=iter(iterable)
 result=list(islice(it,n))
 if not result:
  return result
 heapify(result)
 _heappushpop=heappushpop
 for elem in it:
  _heappushpop(result,elem)
 result. sort(reverse=True )
 return result

def nsmallest(n,iterable):
 ''

 if n <0:
  return []
 it=iter(iterable)
 result=list(islice(it,n))
 if not result:
  return result
 _heapify_max(result)
 _heappushpop=_heappushpop_max
 for elem in it:
  _heappushpop(result,elem)
 result. sort()
 return result

def _siftdown(heap,startpos,pos):
 newitem=heap[pos]

 while pos >startpos:
  parentpos=(pos -1)>>1
  parent=heap[parentpos]
  if newitem <parent:
   heap[pos]=parent
   pos=parentpos
   continue
  break
 heap[pos]=newitem

def _siftup(heap,pos):
 endpos=len(heap)
 startpos=pos
 newitem=heap[pos]

 childpos=2 *pos+1
 while childpos <endpos:

  rightpos=childpos+1
  if rightpos <endpos and not heap[childpos]<heap[rightpos]:
   childpos=rightpos

  heap[pos]=heap[childpos]
  pos=childpos
  childpos=2 *pos+1

 heap[pos]=newitem
 _siftdown(heap,startpos,pos)

def _siftdown_max(heap,startpos,pos):
 ''
 newitem=heap[pos]

 while pos >startpos:
  parentpos=(pos -1)>>1
  parent=heap[parentpos]
  if parent <newitem:
   heap[pos]=parent
   pos=parentpos
   continue
  break
 heap[pos]=newitem

def _siftup_max(heap,pos):
 ''
 endpos=len(heap)
 startpos=pos
 newitem=heap[pos]

 childpos=2 *pos+1
 while childpos <endpos:

  rightpos=childpos+1
  if rightpos <endpos and not heap[rightpos]<heap[childpos]:
   childpos=rightpos

  heap[pos]=heap[childpos]
  pos=childpos
  childpos=2 *pos+1

 heap[pos]=newitem
 _siftdown_max(heap,startpos,pos)

def merge(*iterables):
 ''

 _heappop,_heapreplace,_StopIteration=heappop,heapreplace,StopIteration
 _len=len

 h=[]
 h_append=h. append
 for itnum,it in enumerate(map(iter,iterables)):
  try :
   next=it. __next__
   h_append([next(),itnum,next])
  except _StopIteration:
   pass
 heapify(h)

 while _len(h)>1:
  try :
   while True :
    v,itnum,next=s=h[0]
    yield v
    s[0]=next()
    _heapreplace(h,s)
  except _StopIteration:
   _heappop(h)
 if h:

  v,itnum,next=h[0]
  yield v
  yield from next. __self__

_nsmallest=nsmallest
def nsmallest(n,iterable,key=None ):
 ''

 if n ==1:
  it=iter(iterable)
  head=list(islice(it,1))
  if not head:
   return []
  if key is None :
   return [min(chain(head,it))]
  return [min(chain(head,it),key=key)]

 try :
  size=len(iterable)
 except (TypeError,AttributeError):
  pass
 else :
  if n >=size:
   return sorted(iterable,key=key)[:n]

 if key is None :
  it=zip(iterable,count())
  result=_nsmallest(n,it)
  return [r[0]for r in result]

 in1,in2=tee(iterable)
 it=zip(map(key,in1),count(),in2)
 result=_nsmallest(n,it)
 return [r[2]for r in result]

_nlargest=nlargest
def nlargest(n,iterable,key=None ):
 ''

 if n ==1:
  it=iter(iterable)
  head=list(islice(it,1))
  if not head:
   return []
  if key is None :
   return [max(chain(head,it))]
  return [max(chain(head,it),key=key)]

 try :
  size=len(iterable)
 except (TypeError,AttributeError):
  pass
 else :
  if n >=size:
   return sorted(iterable,key=key,reverse=True )[:n]

 if key is None :
  it=zip(iterable,count(0,-1))
  result=_nlargest(n,it)
  return [r[0]for r in result]

 in1,in2=tee(iterable)
 it=zip(map(key,in1),count(0,-1),in2)
 result=_nlargest(n,it)
 return [r[2]for r in result]

if __name__ =="__main__":

 heap=[]
 data=[1,3,5,7,9,2,4,6,8,0]
 for item in data:
  heappush(heap,item)
 sort=[]
 while heap:
  sort. append(heappop(heap))
 print(sort)

 import doctest
 doctest. testmod()
====heapq.py(file) end====

====io.py(file) start====
import builtins

open=builtins. open

SEEK_SET=0
SEEK_CUR=1
SEEK_END=2

r"""File-like objects that read from or write to a string buffer.

This implements (nearly) all stdio methods.

f = StringIO()      # ready for writing
f = StringIO(buf)   # ready for reading
f.close()           # explicitly release resources held
flag = f.isatty()   # always false
pos = f.tell()      # get current position
f.seek(pos)         # set current position
f.seek(pos, mode)   # mode 0: absolute; 1: relative; 2: relative to EOF
buf = f.read()      # read until EOF
buf = f.read(n)     # read up to n bytes
buf = f.readline()  # read until end of line ('\n') or EOF
list = f.readlines()# list of f.readline() results until EOF
f.truncate([size])  # truncate file at to at most size (default: current pos)
f.write(buf)        # write at current position
f.writelines(list)  # for line in list: f.write(line)
f.getvalue()        # return whole file's contents as a string

Notes:
- Using a real file is often faster (but less convenient).
- There's also a much faster implementation in C, called cStringIO, but
  it's not subclassable.
- fileno() is left unimplemented so that code which uses it triggers
  an exception early.
- Seeking far beyond EOF and then writing will insert real null
  bytes that occupy space in the buffer.
- There's a simple test set (see end of this file).
"""
try :
 from errno import EINVAL
except ImportError:
 EINVAL=22

__all__=["StringIO"]

def _complain_ifclosed(closed):
 if closed:
  raise ValueError("I/O operation on closed file")

class StringIO:
 ''

 def __init__(self,buf=''):
  self. buf=buf
  self. len=len(buf)
  self. buflist=[]
  self. pos=0
  self. closed=False
  self. softspace=0

 def __iter__(self):
  return self

 def next(self):
  ''

  _complain_ifclosed(self. closed)
  r=self. readline()
  if not r:
   raise StopIteration
  return r

 def close(self):
  ''

  if not self. closed:
   self. closed=True
   del self. buf,self. pos

 def isatty(self):
  ''

  _complain_ifclosed(self. closed)
  return False

 def seek(self,pos,mode=0):
  ''

  _complain_ifclosed(self. closed)
  if self. buflist:
   self. buf +=''. join(self. buflist)
   self. buflist=[]
  if mode ==1:
   pos +=self. pos
  elif mode ==2:
   pos +=self. len
  self. pos=max(0,pos)

 def tell(self):
  ''
  _complain_ifclosed(self. closed)
  return self. pos

 def read(self,n=-1):
  ''

  _complain_ifclosed(self. closed)
  if self. buflist:
   self. buf +=''. join(self. buflist)
   self. buflist=[]
  if n is None or n <0:
   newpos=self. len
  else :
   newpos=min(self. pos+n,self. len)
  r=self. buf[self. pos:newpos]
  self. pos=newpos
  return r

 def readline(self,length=None ):
  ''

  _complain_ifclosed(self. closed)
  if self. buflist:
   self. buf +=''. join(self. buflist)
   self. buflist=[]
  i=self. buf. find('\n',self. pos)
  if i <0:
   newpos=self. len
  else :
   newpos=i+1
  if length is not None and length >=0:
   if self. pos+length <newpos:
    newpos=self. pos+length
  r=self. buf[self. pos:newpos]
  self. pos=newpos
  return r

 def readlines(self,sizehint=0):
  ''

  total=0
  lines=[]
  line=self. readline()
  while line:
   lines. append(line)
   total +=len(line)
   if 0 <sizehint <=total:
    break
   line=self. readline()
  return lines

 def truncate(self,size=None ):
  ''

  _complain_ifclosed(self. closed)
  if size is None :
   size=self. pos
  elif size <0:
   raise IOError(EINVAL,"Negative size not allowed")
  elif size <self. pos:
   self. pos=size
  self. buf=self. getvalue()[:size]
  self. len=size

 def write(self,s):
  ''

  _complain_ifclosed(self. closed)
  if not s:return
  spos=self. pos
  slen=self. len
  if spos ==slen:
   self. buflist. append(s)
   self. len=self. pos=spos+len(s)
   return
  if spos >slen:
   self. buflist. append('\0'*(spos -slen))
   slen=spos
  newpos=spos+len(s)
  if spos <slen:
   if self. buflist:
    self. buf +=''. join(self. buflist)
   self. buflist=[self. buf[:spos],s,self. buf[newpos:]]
   self. buf=''
   if newpos >slen:
    slen=newpos
  else :
   self. buflist. append(s)
   slen=newpos
  self. len=slen
  self. pos=newpos

 def writelines(self,iterable):
  ''

  write=self. write
  for line in iterable:
   write(line)

 def flush(self):
  ''

  _complain_ifclosed(self. closed)

 def getvalue(self):
  ''

  _complain_ifclosed(self. closed)
  if self. buflist:
   self. buf +=''. join(self. buflist)
   self. buflist=[]
  return self. buf

TextIOWrapper=StringIO

class RawIOBase:

 def read(self,n=-1):
  pass
 def readall(self):
  pass
 def readinto(self,b):
  pass
 def write(self,b):
  pass

BufferedIOBase=RawIOBase
BufferedReader=RawIOBase
BytesIO=StringIO

====io.py(file) end====

====itertools.py(file) start====
import operator

class accumulate:
 def __init__(self,iterable,func=operator. add):
  self. it=iter(iterable)
  self. _total=None
  self. func=func

 def __iter__(self):
  return self

 def __next__(self):
  if not self. _total:
   self. _total=next(self. it)
   return self. _total
  else :
   element=next(self. it)
   try :
    self. _total=self. func(self. _total,element)
   except :
    raise TypeError("unsupported operand type")
   return self. _total

class chain:
 def __init__(self,*iterables):
  self. _iterables_iter=iter(map(iter,iterables))

  self. _cur_iterable_iter=iter([])

 def __iter__(self):
  return self

 def __next__(self):
  while True :
   try :
    return next(self. _cur_iterable_iter)
   except StopIteration:
    self. _cur_iterable_iter=next(self. _iterables_iter)

 @classmethod
 def from_iterable(cls,iterable):
  for it in iterable:
   for element in it:
    yield element

class combinations:
 def __init__(self,iterable,r):
  self. pool=tuple(iterable)
  self. n=len(self. pool)
  self. r=r
  self. indices=list(range(self. r))
  self. zero=False

 def __iter__(self):
  return self

 def __next__(self):
  if self. r >self. n:
   raise StopIteration
  if not self. zero:
   self. zero=True
   return tuple(self. pool[i]for i in self. indices)
  else :
   try :
    for i in reversed(range(self. r)):
     if self. indices[i]!=i+self. n -self. r:
      break
    self. indices[i]+=1
    for j in range(i+1,self. r):
     self. indices[j]=self. indices[j -1]+1
    return tuple(self. pool[i]for i in self. indices)
   except :
    raise StopIteration

class combinations_with_replacement:
 def __init__(self,iterable,r):
  self. pool=tuple(iterable)
  self. n=len(self. pool)
  self. r=r
  self. indices=[0]*self. r
  self. zero=False

 def __iter__(self):
  return self

 def __next__(self):
  if not self. n and self. r:
   raise StopIteration
  if not self. zero:
   self. zero=True
   return tuple(self. pool[i]for i in self. indices)
  else :
   try :
    for i in reversed(range(self. r)):
     if self. indices[i]!=self. n -1:
      break
    self. indices[i:]=[self. indices[i]+1]*(self. r -i)
    return tuple(self. pool[i]for i in self. indices)
   except :
    raise StopIteration

class compress:
 def __init__(self,data,selectors):
  self. data=iter(data)
  self. selectors=iter(selectors)

 def __iter__(self):
  return self

 def __next__(self):
  while True :
   next_item=next(self. data)
   next_selector=next(self. selectors)
   if bool(next_selector):
    return next_item

class count:
 ''

 def __init__(self,start=0,step=1):
  if not isinstance(start,(int,float)):
   raise TypeError('a number is required')
  self. times=start -step
  self. step=step

 def __iter__(self):
  return self

 def __next__(self):
  self. times +=self. step
  return self. times

 def __repr__(self):
  return'count(%d)'%(self. times+self. step)

class cycle:
 def __init__(self,iterable):
  self. _cur_iter=iter(iterable)
  self. _saved=[]
  self. _must_save=True

 def __iter__(self):
  return self

 def __next__(self):
  try :
   next_elt=next(self. _cur_iter)
   if self. _must_save:
    self. _saved. append(next_elt)
  except StopIteration:
   self. _cur_iter=iter(self. _saved)
   next_elt=next(self. _cur_iter)
   self. _must_save=False
  return next_elt

class dropwhile:
 def __init__(self,predicate,iterable):
  self. _predicate=predicate
  self. _iter=iter(iterable)
  self. _dropped=False

 def __iter__(self):
  return self

 def __next__(self):
  value=next(self. _iter)
  if self. _dropped:
   return value
  while self. _predicate(value):
   value=next(self. _iter)
  self. _dropped=True
  return value

class filterfalse:
 def __init__(self,predicate,iterable):

  self. _iter=iter(iterable)
  if predicate is None :
   self. _predicate=bool
  else :
   self. _predicate=predicate

 def __iter__(self):
  return self
 def __next__(self):
  next_elt=next(self. _iter)
  while True :
   if not self. _predicate(next_elt):
    return next_elt
   next_elt=next(self. _iter)

class groupby:

 def __init__(self,iterable,key=None ):
  if key is None :
   key=lambda x:x
  self. keyfunc=key
  self. it=iter(iterable)
  self. tgtkey=self. currkey=self. currvalue=object()
 def __iter__(self):
  return self
 def __next__(self):
  while self. currkey ==self. tgtkey:
   self. currvalue=next(self. it)
   self. currkey=self. keyfunc(self. currvalue)
  self. tgtkey=self. currkey
  return (self. currkey,self. _grouper(self. tgtkey))
 def _grouper(self,tgtkey):
  while self. currkey ==tgtkey:
   yield self. currvalue
   self. currvalue=next(self. it)
   self. currkey=self. keyfunc(self. currvalue)

class islice:
 def __init__(self,iterable,*args):
  s=slice(*args)
  self. start,self. stop,self. step=s. start or 0,s. stop,s. step
  if not isinstance(self. start,int):
   raise ValueError("Start argument must be an integer")
  if self. stop !=None and not isinstance(self. stop,int):
   raise ValueError("Stop argument must be an integer or None")
  if self. step is None :
   self. step=1
  if self. start <0 or (self. stop !=None and self. stop <0
  )or self. step <=0:
   raise ValueError("indices for islice() must be positive")
  self. it=iter(iterable)
  self. donext=None
  self. cnt=0

 def __iter__(self):
  return self

 def __next__(self):
  nextindex=self. start
  if self. stop !=None and nextindex >=self. stop:
   raise StopIteration
  while self. cnt <=nextindex:
   nextitem=next(self. it)
   self. cnt +=1
  self. start +=self. step
  return nextitem

class permutations:
 def __init__(self,iterable,r=None ):
  self. pool=tuple(iterable)
  self. n=len(self. pool)
  self. r=self. n if r is None else r
  self. indices=list(range(self. n))
  self. cycles=list(range(self. n,self. n -self. r,-1))
  self. zero=False
  self. stop=False

 def __iter__(self):
  return self

 def __next__(self):
  indices=self. indices
  if self. r >self. n:
   raise StopIteration
  if not self. zero:
   self. zero=True
   return tuple(self. pool[i]for i in indices[:self. r])

  i=self. r -1
  while i >=0:
   j=self. cycles[i]-1
   if j >0:
    self. cycles[i]=j
    indices[i],indices[-j]=indices[-j],indices[i]
    return tuple(self. pool[i]for i in indices[:self. r])
   self. cycles[i]=len(indices)-i
   n1=len(indices)-1
   assert n1 >=0
   num=indices[i]
   for k in range(i,n1):
    indices[k]=indices[k+1]
   indices[n1]=num
   i -=1
  raise StopIteration

def product(*args,repeat=1):

 pools=[tuple(pool)for pool in args]*repeat
 result=[[]]
 for pool in pools:
  result=[x+[y]for x in result for y in pool]
 for prod in result:
  yield tuple(prod)

class _product:
 def __init__(self,*args,**kw):
  if len(kw)>1:
   raise TypeError("product() takes at most 1 argument (%d given)"%
   len(kw))
  self. repeat=kw. get('repeat',1)
  if not isinstance(self. repeat,int):
   raise TypeError("integer argument expected, got %s"%
   type(self. repeat))
  self. gears=[x for x in args]*self. repeat
  self. num_gears=len(self. gears)

  self. indicies=[(0,len(self. gears[x]))
  for x in range(0,self. num_gears)]
  self. cont=True
  self. zero=False

 def roll_gears(self):

  should_carry=True
  for n in range(0,self. num_gears):
   nth_gear=self. num_gears -n -1
   if should_carry:
    count,lim=self. indicies[nth_gear]
    count +=1
    if count ==lim and nth_gear ==0:
     self. cont=False
    if count ==lim:
     should_carry=True
     count=0
    else :
     should_carry=False
    self. indicies[nth_gear]=(count,lim)
   else :
    break

 def __iter__(self):
  return self

 def __next__(self):
  if self. zero:
   raise StopIteration
  if self. repeat >0:
   if not self. cont:
    raise StopIteration
   l=[]
   for x in range(0,self. num_gears):
    index,limit=self. indicies[x]
    print('itertools 353',self. gears,x,index)
    l. append(self. gears[x][index])
   self. roll_gears()
   return tuple(l)
  elif self. repeat ==0:
   self. zero=True
   return ()
  else :
   raise ValueError("repeat argument cannot be negative")

class repeat:
 def __init__(self,obj,times=None ):
  self. _obj=obj
  if times is not None :
   range(times)
   if times <0:
    times=0
  self. _times=times

 def __iter__(self):
  return self

 def __next__(self):

  if self. _times is not None :
   if self. _times <=0:
    raise StopIteration()
   self. _times -=1
  return self. _obj

 def __repr__(self):
  if self. _times is not None :
   return'repeat(%r, %r)'%(self. _obj,self. _times)
  else :
   return'repeat(%r)'%(self. _obj,)

 def __len__(self):
  if self. _times ==-1 or self. _times is None :
   raise TypeError("len() of uniszed object")
  return self. _times

class starmap(object):
 def __init__(self,function,iterable):
  self. _func=function
  self. _iter=iter(iterable)

 def __iter__(self):
  return self

 def __next__(self):
  t=next(self. _iter)
  return self. _func(*t)

class takewhile(object):
 def __init__(self,predicate,iterable):
  self. _predicate=predicate
  self. _iter=iter(iterable)

 def __iter__(self):
  return self

 def __next__(self):
  value=next(self. _iter)
  if not self. _predicate(value):
   raise StopIteration()
  return value

class TeeData(object):
 def __init__(self,iterator):
  self. data=[]
  self. _iter=iterator

 def __getitem__(self,i):

  while i >=len(self. data):
   self. data. append(next(self. _iter))
  return self. data[i]

class TeeObject(object):
 def __init__(self,iterable=None ,tee_data=None ):
  if tee_data:
   self. tee_data=tee_data
   self. pos=0

  elif isinstance(iterable,TeeObject):
   self. tee_data=iterable. tee_data
   self. pos=iterable. pos
  else :
   self. tee_data=TeeData(iter(iterable))
   self. pos=0

 def __next__(self):
  data=self. tee_data[self. pos]
  self. pos +=1
  return data

 def __iter__(self):
  return self

def tee(iterable,n=2):
 if isinstance(iterable,TeeObject):
  return tuple([iterable]+
  [TeeObject(tee_data=iterable. tee_data)for i in range(n -1)])
 tee_data=TeeData(iter(iterable))
 return tuple([TeeObject(tee_data=tee_data)for i in range(n)])

class zip_longest:
 def __init__(self,*args,fillvalue=None ):
  self. args=[iter(arg)for arg in args]
  self. fillvalue=fillvalue
  self. units=len(args)

 def __iter__(self):
  return self

 def __next__(self):
  temp=[]
  nb=0
  for i in range(self. units):
   try :
    temp. append(next(self. args[i]))
    nb +=1
   except StopIteration:
    temp. append(self. fillvalue)
  if nb ==0:
   raise StopIteration
  return tuple(temp)
====itertools.py(file) end====

====json.js(file) start====
var $module = (function($B){

return  {
    loads : function(json_obj){
        return $B.jsobject2pyobject(JSON.parse(json_obj))
    },
    load : function(file_obj){
        return $module.loads(file_obj.$content);
    },
    dumps : function(obj){return JSON.stringify($B.pyobject2jsobject(obj))},
}

})(__BRYTHON__)
====json.js(file) end====

====keyword.py(file) start====


__all__=["iskeyword","kwlist"]

kwlist=[

'False',
'None',
'True',
'and',
'as',
'assert',
'break',
'class',
'continue',
'def',
'del',
'elif',
'else',
'except',
'finally',
'for',
'from',
'global',
'if',
'import',
'in',
'is',
'lambda',
'nonlocal',
'not',
'or',
'pass',
'raise',
'return',
'try',
'while',
'with',
'yield',

]

iskeyword=frozenset(kwlist). __contains__

def main():
 import sys,re

 args=sys. argv[1:]
 iptfile=args and args[0]or"Python/graminit.c"
 if len(args)>1:optfile=args[1]
 else :optfile="Lib/keyword.py"

 with open(iptfile)as fp:
  strprog=re. compile('"([^"]+)"')
  lines=[]
  for line in fp:
   if'{1, "'in line:
    match=strprog. search(line)
    if match:
     lines. append("        '"+match. group(1)+"',\n")
 lines. sort()

 with open(optfile)as fp:
  format=fp. readlines()

 try :
  start=format. index("#--start keywords--\n")+1
  end=format. index("#--end keywords--\n")
  format[start:end]=lines
 except ValueError:
  sys. stderr. write("target does not contain format markers\n")
  sys. exit(1)

 fp=open(optfile,'w')
 fp. write(''. join(format))
 fp. close()

if __name__ =="__main__":
 main()
====keyword.py(file) end====

====math.js(file) start====
var $module=(function($B){

var _b_ = $B.builtins
var $s=[]
for(var $b in _b_) $s.push('var ' + $b +'=_b_["'+$b+'"]')
eval($s.join(';'))

//for(var $py_builtin in _b_){eval("var "+$py_builtin+"=_b_[$py_builtin]")}

var float_check=function(x) {
    if (x.__class__===$B.LongInt.$dict){return parseInt(x.value)}
    return _b_.float(x)
}

var isWholeNumber=function(x){return (x*10) % 10 == 0}

var isOdd=function(x) {return isWholeNumber(x) && 2*Math.floor(x/2) != x}

var isLargeNumber=function(x) {return x > Math.pow(2,32)}

// Big number Library from jsfromhell.com
// This library helps with producing "correct" results from 
// mathematic operations

//+ Jonas Raoni Soares Silva
//@ http://jsfromhell.com/classes/bignumber [rev. #4]

var BigNumber = function(n, p, r){
    var o = this, i;
    if(n instanceof BigNumber){
        for(i in {precision: 0, roundType: 0, _s: 0, _f: 0}) o[i] = n[i];
        o._d = n._d.slice();
        return;
    }
    o.precision = isNaN(p = Math.abs(p)) ? BigNumber.defaultPrecision : p;
    o.roundType = isNaN(r = Math.abs(r)) ? BigNumber.defaultRoundType : r;
    o._s = (n += "").charAt(0) == "-";
    o._f = ((n = n.replace(/[^\d.]/g, "").split(".", 2))[0] = n[0].replace(/^0+/, "") || "0").length;
    for(i = (n = o._d = (n.join("") || "0").split("")).length; i; n[--i] = +n[i]);
    o.round();
};
with({$: BigNumber, o: BigNumber.prototype}){
    $.ROUND_HALF_EVEN = ($.ROUND_HALF_DOWN = ($.ROUND_HALF_UP = ($.ROUND_FLOOR = ($.ROUND_CEIL = ($.ROUND_DOWN = ($.ROUND_UP = 0) + 1) + 1) + 1) + 1) + 1) + 1;
    $.defaultPrecision = 40;
    $.defaultRoundType = $.ROUND_HALF_UP;
    o.add = function(n){
        if(this._s != (n = new BigNumber(n))._s)
            return n._s ^= 1, this.subtract(n);
        var o = new BigNumber(this), a = o._d, b = n._d, la = o._f,
        lb = n._f, n = Math.max(la, lb), i, r;
        la != lb && ((lb = la - lb) > 0 ? o._zeroes(b, lb, 1) : o._zeroes(a, -lb, 1));
        i = (la = a.length) == (lb = b.length) ? a.length : ((lb = la - lb) > 0 ? o._zeroes(b, lb) : o._zeroes(a, -lb)).length;
        for(r = 0; i; r = (a[--i] = a[i] + b[i] + r) / 10 >>> 0, a[i] %= 10);
        return r && ++n && a.unshift(r), o._f = n, o.round();
    };
    o.subtract = function(n){
        if(this._s != (n = new BigNumber(n))._s)
            return n._s ^= 1, this.add(n);
        var o = new BigNumber(this), c = o.abs().compare(n.abs()) + 1, a = c ? o : n, b = c ? n : o, la = a._f, lb = b._f, d = la, i, j;
        a = a._d, b = b._d, la != lb && ((lb = la - lb) > 0 ? o._zeroes(b, lb, 1) : o._zeroes(a, -lb, 1));
        for(i = (la = a.length) == (lb = b.length) ? a.length : ((lb = la - lb) > 0 ? o._zeroes(b, lb) : o._zeroes(a, -lb)).length; i;){
            if(a[--i] < b[i]){
                for(j = i; j && !a[--j]; a[j] = 9);
                --a[j], a[i] += 10;
            }
            b[i] = a[i] - b[i];
        }
        return c || (o._s ^= 1), o._f = d, o._d = b, o.round();
    };
    o.multiply = function(n){
        var o = new BigNumber(this), r = o._d.length >= (n = new BigNumber(n))._d.length, a = (r ? o : n)._d,
        b = (r ? n : o)._d, la = a.length, lb = b.length, x = new BigNumber, i, j, s;
        for(i = lb; i; r && s.unshift(r), x.set(x.add(new BigNumber(s.join("")))))
            for(s = (new Array(lb - --i)).join("0").split(""), r = 0, j = la; j; r += a[--j] * b[i], s.unshift(r % 10), r = (r / 10) >>> 0);
        return o._s = o._s != n._s, o._f = ((r = la + lb - o._f - n._f) >= (j = (o._d = x._d).length) ? this._zeroes(o._d, r - j + 1, 1).length : j) - r, o.round();
    };
    o.divide = function(n){
        if((n = new BigNumber(n)) == "0")
            throw new Error("Division by 0");
        else if(this == "0")
            return new BigNumber;
        var o = new BigNumber(this), a = o._d, b = n._d, la = a.length - o._f,
        lb = b.length - n._f, r = new BigNumber, i = 0, j, s, l, f = 1, c = 0, e = 0;
        r._s = o._s != n._s, r.precision = Math.max(o.precision, n.precision),
        r._f = +r._d.pop(), la != lb && o._zeroes(la > lb ? b : a, Math.abs(la - lb));
        n._f = b.length, b = n, b._s = false, b = b.round();
        for(n = new BigNumber; a[0] == "0"; a.shift());
        out:
        do{
            for(l = c = 0, n == "0" && (n._d = [], n._f = 0); i < a.length && n.compare(b) == -1; ++i){
                (l = i + 1 == a.length, (!f && ++c > 1 || (e = l && n == "0" && a[i] == "0")))
                && (r._f == r._d.length && ++r._f, r._d.push(0));
                (a[i] == "0" && n == "0") || (n._d.push(a[i]), ++n._f);
                if(e)
                    break out;
                if((l && n.compare(b) == -1 && (r._f == r._d.length && ++r._f, 1)) || (l = 0))
                    while(r._d.push(0), n._d.push(0), ++n._f, n.compare(b) == -1);
            }
            if(f = 0, n.compare(b) == -1 && !(l = 0))
                while(l ? r._d.push(0) : l = 1, n._d.push(0), ++n._f, n.compare(b) == -1);
            for(s = new BigNumber, j = 0; n.compare(y = s.add(b)) + 1 && ++j; s.set(y));
            n.set(n.subtract(s)), !l && r._f == r._d.length && ++r._f, r._d.push(j);
        }
        while((i < a.length || n != "0") && (r._d.length - r._f) <= r.precision);
        return r.round();
    };
    o.mod = function(n){
        return this.subtract(this.divide(n).intPart().multiply(n));
    };
    o.pow = function(n){
        var o = new BigNumber(this), i;
        if((n = (new BigNumber(n)).intPart()) == 0) return o.set(1);
        for(i = Math.abs(n); --i; o.set(o.multiply(this)));
        return n < 0 ? o.set((new BigNumber(1)).divide(o)) : o;
    };
    o.set = function(n){
        return this.constructor(n), this;
    };
    o.compare = function(n){
        var a = this, la = this._f, b = new BigNumber(n), lb = b._f, r = [-1, 1], i, l;
        if(a._s != b._s)
            return a._s ? -1 : 1;
        if(la != lb)
            return r[(la > lb) ^ a._s];
        for(la = (a = a._d).length, lb = (b = b._d).length, i = -1, l = Math.min(la, lb); ++i < l;)
            if(a[i] != b[i])
                return r[(a[i] > b[i]) ^ a._s];
        return la != lb ? r[(la > lb) ^ a._s] : 0;
    };
    o.negate = function(){
        var n = new BigNumber(this); return n._s ^= 1, n;
    };
    o.abs = function(){
        var n = new BigNumber(this); return n._s = 0, n;
    };
    o.intPart = function(){
        return new BigNumber((this._s ? "-" : "") + (this._d.slice(0, this._f).join("") || "0"));
    };
    o.valueOf = o.toString = function(){
        var o = this;
        return (o._s ? "-" : "") + (o._d.slice(0, o._f).join("") || "0") + (o._f != o._d.length ? "." + o._d.slice(o._f).join("") : "");
    };
    o._zeroes = function(n, l, t){
        var s = ["push", "unshift"][t || 0];
        for(++l; --l;  n[s](0));
        return n;
    };
    o.round = function(){
        if("_rounding" in this) return this;
        var $ = BigNumber, r = this.roundType, b = this._d, d, p, n, x;
        for(this._rounding = true; this._f > 1 && !b[0]; --this._f, b.shift());
        for(d = this._f, p = this.precision + d, n = b[p]; b.length > d && !b[b.length -1]; b.pop());
        x = (this._s ? "-" : "") + (p - d ? "0." + this._zeroes([], p - d - 1).join("") : "") + 1;
        if(b.length > p){
            n && (r == $.DOWN ? false : r == $.UP ? true : r == $.CEIL ? !this._s
            : r == $.FLOOR ? this._s : r == $.HALF_UP ? n >= 5 : r == $.HALF_DOWN ? n > 5
            : r == $.HALF_EVEN ? n >= 5 && b[p - 1] & 1 : false) && this.add(x);
            b.splice(p, b.length - p);
        }
        return delete this._rounding, this;
    };
}

var isNegZero=function(x) {return x===0 && Math.atan2(x,x) < 0}

var _mod = {
    __getattr__ : function(attr){
        var res = this[attr]
        if(res===undefined){$raise('AttributeError','module math has no attribute '+attr)}
        return res
    },
    acos: function(x) {return float(Math.acos(float_check(x)))},
    acosh: function(x) { 
        if (_b_.$isinf(x)) return float('inf');
        var y = float_check(x);
        return float(Math.log(y + Math.sqrt(y*y-1)));
    },
    asin: function(x) {return float(Math.asin(float_check(x)))},
    asinh: function(x) {
        if (_b_.$isninf(x)) return float('-inf');
        if (_b_.$isinf(x)) return float('inf');
        var y = float_check(x);
        return float(Math.log(y + Math.sqrt(y*y+1)))
    },
    atan: function(x) {
        if (_b_.$isninf(x)) return float(-Math.PI/2);
        if (_b_.$isinf(x)) return float(Math.PI/2);
        return float(Math.atan(float_check(x)))},
    atan2: function(y,x) {
        return float(Math.atan2(float_check(y),float_check(x)))
    },
    atanh: function(x) { 
       var y=float_check(x);
       if (y==0) return 0;
       return float(0.5 * Math.log((1/y+1)/(1/y-1)));
    },
    ceil: function(x) {
       try{return getattr(x,'__ceil__')()}catch(err){}

       if (_b_.$isninf(x)) return float('-inf')
       if (_b_.$isinf(x)) return float('inf')
       if (isNaN(x)) return float('nan')

       var y=float_check(x);
       if (!isNaN(parseFloat(y)) && isFinite(y)) return int(Math.ceil(y));

       $raise('ValueError', 'object is not a number and does not contain __ceil__')
    },
    copysign: function(x,y) {
        var x1=Math.abs(float_check(x))
        var y1=float_check(y)
        var sign=y1?y1<0?-1:1:1
        if (isNegZero(y1)) sign=-1   // probably need to work on adding a check for -0
        return float(x1 * sign)
    },
    cos : function(x){return float(Math.cos(float_check(x)))},
    cosh: function(x){
        if (_b_.$isinf(x)) return float('inf')
        var y = float_check(x)
        if (Math.cosh !== undefined) return float(Math.cosh(y))
        return float((Math.pow(Math.E,y) + Math.pow(Math.E,-y))/2)
    },
    degrees: function(x){return float(float_check(x) * 180/Math.PI)},
    e: float(Math.E),
    erf: function(x) {
        // inspired from 
        // http://stackoverflow.com/questions/457408/is-there-an-easily-available-implementation-of-erf-for-python
        var y =float_check(x);
        var t = 1.0 / (1.0 + 0.5 * Math.abs(y))
        var ans = 1 - t * Math.exp( -y*y - 1.26551223 +
                     t * ( 1.00002368 +
                     t * ( 0.37409196 + 
                     t * ( 0.09678418 + 
                     t * (-0.18628806 + 
                     t * ( 0.27886807 + 
                     t * (-1.13520398 + 
                     t * ( 1.48851587 + 
                     t * (-0.82215223 + 
                     t * 0.17087277)))))))))
        if (y >= 0.0) return ans

        return -ans
    },

    erfc: function(x) {
        // inspired from 
        // http://stackoverflow.com/questions/457408/is-there-an-easily-available-implementation-of-erf-for-python
        var y = float_check(x);
        var t = 1.0 / (1.0 + 0.5 * Math.abs(y))
        var ans = 1 - t * Math.exp( -y*y - 1.26551223 +
                     t * ( 1.00002368 +
                     t * ( 0.37409196 + 
                     t * ( 0.09678418 + 
                     t * (-0.18628806 + 
                     t * ( 0.27886807 + 
                     t * (-1.13520398 + 
                     t * ( 1.48851587 + 
                     t * (-0.82215223 + 
                     t * 0.17087277)))))))))
        if (y >= 0.0) return 1-ans
        return 1+ans
    },
    exp: function(x){
         if (_b_.$isninf(x)) {return float(0)}
         if (_b_.$isinf(x)) {return float('inf')}
         var _r=Math.exp(float_check(x))
         if (_b_.$isinf(_r)) {throw OverflowError("math range error")}
         return float(_r)
    },
    expm1: function(x){return float(Math.exp(float_check(x))-1)},
    //fabs: function(x){ return x>0?float(x):float(-x)},
    fabs: function(x){return _b_.$fabs(x)}, //located in py_float.js
    factorial: function(x) {
         //using code from http://stackoverflow.com/questions/3959211/fast-factorial-function-in-javascript
         var y=float_check(x);
         var r=1
         for (var i=2; i<=y; i++){r*=i}
         return r
    },
    floor:function(x){return Math.floor(float_check(x))},
    fmod:function(x,y){return float(float_check(x)%float_check(y))},
    frexp: function(x){var _l=_b_.$frexp(x);return _b_.tuple([float(_l[0]), _l[1]])}, // located in py_float.js
    fsum:function(x){
        /* Translation into Javascript of the function msum in an Active
           State Cookbook recipe : https://code.activestate.com/recipes/393090/
           by Raymond Hettinger
        */
        var partials = [],
            res = new Number(), 
            _it = _b_.iter(x)
        while(true){
            try{
                var x = _b_.next(_it),
                    i = 0
                for(var j=0, len=partials.length;j<len;j++){
                    var y = partials[j]
                    if(Math.abs(x) < Math.abs(y)){
                        var z = x
                        x = y
                        y = z
                    }
                    var hi = x + y,
                        lo = y - (hi - x)
                    if(lo){
                        partials[i] = lo
                        i++
                    }
                    x = hi
                }
                partials = partials.slice(0, i).concat([x])
            }catch(err){
                if(_b_.isinstance(err, _b_.StopIteration)){break}
                throw err
            }
        }
        var res = new Number(0)
        for(var i=0; i<partials.length;i++){res += new Number(partials[i])}
        return new Number(res)
    },
    gamma: function(x){
         //using code from http://stackoverflow.com/questions/3959211/fast-factorial-function-in-javascript
         // Lanczos Approximation of the Gamma Function
         // As described in Numerical Recipes in C (2nd ed. Cambridge University Press, 1992)
         var y=float_check(x);
         var z = y + 1;
         var d1 = Math.sqrt(2 * Math.PI) / z;

         var d2 = 1.000000000190015;
         d2 +=  76.18009172947146 / (z+1);
         d2 += -86.50532032941677 / (z+2);
         d2 +=  24.01409824083091 / (z+3); 
         d2 += -1.231739572450155 / (z+4); 
         d2 +=  1.208650973866179E-3 / (z+5);
         d2 += -5.395239384953E-6 / (z+6);

         return d1 * d2 * Math.pow(z+5.5,z+0.5) * Math.exp(-(z+5.5));
    },
    hypot: function(x,y){
       if (_b_.$isinf(x) || _b_.$isinf(y)) return float('inf')
       var x1=float_check(x);
       var y1=float_check(y);
       return float(Math.sqrt(x1*x1 + y1*y1))},
    inf: float('inf'),
    isclose:function(){
        var $ns = $B.args("isclose",
                          4,
                          {a:null,b:null,rel_tol:null,abs_tol:null},
                          ['a', 'b', 'rel_tol', 'abs_tol'],
                          arguments,
                          {rel_tol:1e-09, abs_tol:0.0}, 
                          null, 
                          null)
        var a = $ns['a'];
        var b = $ns['b'];
        var rel_tol = $ns['rel_tol'];
        var abs_tol = $ns['abs_tol'];
        if (rel_tol < 0.0 || abs_tol < 0.0) throw ValueError('tolerances must be non-negative')
        if (a == b){return True}
        if (_b_.$isinf(a) || _b_.$isinf(b)){return false}
        var diff = _b_.$fabs(b - a);
        var result = ((diff <= _b_.$fabs(rel_tol * b)) || (diff <= _b_.$fabs(rel_tol * a))) || (diff <= _b_.$fabs(abs_tol));
        return result},
    isfinite:function(x) {return isFinite(float_check(x))},
    isinf:function(x) {return _b_.$isinf(float_check(x))},
    isnan:function(x) {return isNaN(float_check(x))},
    ldexp:function(x,i) {return _b_.$ldexp(x,i)},   //located in py_float.js
    lgamma:function(x) {
         // see gamma function for sources
         var y=float_check(x);
         var z = y + 1;
         var d1 = Math.sqrt(2 * Math.PI) / z;

         var d2 = 1.000000000190015;
         d2 +=  76.18009172947146 / (z+1);
         d2 += -86.50532032941677 / (z+2);
         d2 +=  24.01409824083091 / (z+3); 
         d2 += -1.231739572450155 / (z+4); 
         d2 +=  1.208650973866179E-3 / (z+5);
         d2 += -5.395239384953E-6 / (z+6);

         return float(Math.log(Math.abs(d1 * d2 * Math.pow(z+5.5,z+0.5) * Math.exp(-(z+5.5)))));
    },
    log: function(x, base) {
         var x1=float_check(x);
         if (base === undefined) return float(Math.log(x1));
         return float(Math.log(x1)/Math.log(float_check(base)));
    },
    log1p: function(x) {return float(Math.log(1.0 + float_check(x)))},
    log2: function(x) {
        if (isNaN(x)) return float('nan')
        if (_b_.$isninf(x)) throw ValueError('')
        var x1=float_check(x)
        if (x1 < 0.0) throw ValueError('')
        //if (isLargeNumber(x1)) x1=new BigNumber(x1)         
        return float(Math.log(x1)/Math.LN2)
    },
    log10: function(x) {return float(Math.log(float_check(x))/Math.LN10)},
    modf:function(x) {
       if (_b_.$isninf(x)) return _b_.tuple([0.0, float('-inf')])
       if (_b_.$isinf(x)) return _b_.tuple([0.0, float('inf')])
       if (isNaN(x)) return _b_.tuple([float('nan'), float('nan')])

       var x1=float_check(x);
       if (x1 > 0) {
          var i=float(x1-Math.floor(x1))
          return _b_.tuple([i, float(x1-i)])
       }

       var x2=Math.ceil(x1)
       var i=float(x1-x2)
       return _b_.tuple([i, float(x2)])
    },
    nan: float('nan'),
    pi : float(Math.PI),
    pow: function(x,y) {
        var x1=float_check(x)
        var y1=float_check(y)
        if (y1 == 0) return float(1)        
        if (x1 == 0 && y1 < 0) throw _b_.ValueError('')

        if(isNaN(y1)) {if(x1==1) return float(1) 
                       return float('nan')
        }
        if (x1 == 0) return float(0)

        if(_b_.$isninf(y)) {if(x1==1||x1==-1) {return float(1)}
                       if(x1 < 1 && x1 > -1) return float('inf') 
                       return float(0)
        }
        if(_b_.$isinf(y)) {if(x1==1||x1==-1) {return float(1)} 
                      if(x1 < 1 && x1 > -1) return float(0) 
                      return float('inf')}

        if(isNaN(x1)) return float('nan')
        if(_b_.$isninf(x)) {
            if (y1 > 0 && isOdd(y1)) return float('-inf')
            if (y1 > 0) return float('inf')  // this is even or a float
            if (y1 < 0) return float(0)
            return float(1)
        }

        if(_b_.$isinf(x)) { 
            if (y1 > 0) return float('inf')
            if (y1 < 0) return float(0)
            return float(1)
        }

        var r
        if (isLargeNumber(x1) || isLargeNumber(y1)) {
           var x=new BigNumber(x1)
           var y=new BigNumber(y1)
           r=x.pow(y)
        } else {
           r=Math.pow(x1,y1)
        }

        if (isNaN(r)) return float('nan')
        if (_b_.$isninf(r)) return float('-inf')
        if (_b_.$isinf(r)) return float('inf')

        return r
    },
    radians: function(x){return float(float_check(x) * Math.PI/180)},
    sin : function(x){return float(Math.sin(float_check(x)))},
    sinh: function(x) { 
        //if (_b_.$isinf(x)) return float('inf');
        var y = float_check(x)
        if (Math.sinh !== undefined) { return float(Math.sinh(y))}
        return float((Math.pow(Math.E,y) - Math.pow(Math.E,-y))/2)
    },
    sqrt : function(x){
      var y = float_check(x)
      if (y < 0) { throw ValueError("math range error")}
      if (_b_.$isinf(y)) return float('inf')
      var _r=Math.sqrt(y)
      if (_b_.$isinf(_r)) {throw OverflowError("math range error")}
      return float(_r)
    },
    tan: function(x) {
        var y = float_check(x)
        return float(Math.tan(y))
    },
    tanh: function(x) {
        var y = float_check(x)
        if (Math.tanh !== undefined) return float(Math.tanh(y))
        return float((Math.pow(Math.E,y) - Math.pow(Math.E,-y))/
                     (Math.pow(Math.E,y) + Math.pow(Math.E,-y)))       
    },
    trunc: function(x) {
       try{return getattr(x,'__trunc__')()}catch(err){}
       var x1=float_check(x);
       if (!isNaN(parseFloat(x1)) && isFinite(x1)) {
          if (Math.trunc !== undefined) { return int(Math.trunc(x1))}
          if (x1 > 0) {return int(Math.floor(x1))}
          return int(Math.ceil(x1))  // x1 < 0
       }
       $raise('ValueError', 'object is not a number and does not contain __trunc__')
    }
}

for(var $attr in _mod){
    if(typeof _mod[$attr]==='function'){
        _mod[$attr].__repr__=(function(func){
            return function(){return '<built-in function '+func+'>'}})($attr)
        _mod[$attr].__str__=(function(func){
            return function(){return '<built-in function '+func+'>'}})($attr)
    }
}

return _mod

})(__BRYTHON__)
====math.js(file) end====

====operator.py(file) start====
''

def lt(a,b):
 ''
 return a <b
__lt__=lt

def le(a,b):
 ''
 return a <=b
__le__=le

def eq(a,b):
 ''
 return a ==b
__eq__=eq

def ne(a,b):
 ''
 return a !=b
__ne__=ne

def ge(a,b):
 ''
 return a >=b
__ge__=ge

def gt(a,b):
 ''
 return a >b
__gt__=gt

def not_(a):
 ''
 return not a
__not__=not_

def truth(a):
 ''

 return bool(a)

def is_(a,b):
 ''
 return a is b

__abs__=abs
abs=abs

def add(a,b):
 ''
 return a+b
__add__=add

def and_(a,b):
 ''
 return a&b
__and__=and_

def floordiv(a,b):
 ''
 return a //b
__floordiv__=floordiv

def index(a):
 ''
 return a. __index__()
__index__=index

def inv(a):
 ''
 return ~a

invert=__inv__=__invert__=inv

def lshift(a,b):
 ''
 return a <<b
__lshift__=lshift

def mod(a,b):
 ''
 return a %b
__mod__=mod

def mul(a,b):
 ''
 return a *b
__mul__=mul

def neg(a):
 ''
 return -a
__neg__=neg

def or_(a,b):
 ''
 return a |b
__or__=or_

def pos(a):
 ''
 return +a

__pos__=pos

def pow(a,b):
 ''
 return a **b
__pow__=pow

def rshift(a,b):
 ''
 return a >>b
__rshift__=rshift

def sub(a,b):
 ''
 return a -b
__sub__=sub

def truediv(a,b):
 ''
 return a /b
__truediv__=truediv

def xor(a,b):
 ''
 return a ^b
__xor__=xor

def concat(a,b):
 ''
 if not (hasattr(a,'__getitem__')and hasattr(b,'__getitem__')):
  raise TypeError('a and b must be sequences')
 return a+b
__concat__=concat

def contains(a,b):
 ''
 return b in a
__contains__=contains

def countOf(a,b):
 ''
 count=0
 for i in a:
  if i ==b:
   count +=1
 return count

def delitem(a,b):
 ''
 del a[b]
__delitem__=delitem

def getitem(a,b):
 ''
 return a[b]
__getitem__=getitem

def indexOf(a,b):
 ''

 for i,j in enumerate(a):
  if j ==b:
   return i
 else :
  raise ValueError('b not found in a')

def setitem(a,b,c):
 ''
 a[b]=c
__setitem__=setitem

class attrgetter:
 ''

 def __init__(self,attr,*attrs):
  self. _attrs=(attr,)
  self. _attrs +=attrs
  if any(not isinstance(attr,str)for attr in self. _attrs):
   raise TypeError('attribute name must be a string')

 @staticmethod
 def _resolve_attr(obj,attr):
  for name in attr. split('.'):

   obj=getattr(obj,name)
  return obj

 def __call__(self,obj):
  if len(self. _attrs)==1:
   return self. _resolve_attr(obj,self. _attrs[0])
  return tuple(self. _resolve_attr(obj,attr)for attr in self. _attrs)

class itemgetter:
 ''

 def __init__(self,item,*items):
  self. _items=(item,)
  self. _items +=items

 def __call__(self,obj):
  if len(self. _items)==1:
   return obj[self. _items[0]]
  return tuple(obj[item]for item in self. _items)

class methodcaller:
 ''

 def __init__(self,name,*args,**kwargs):
  self. _name=name
  self. _args=args
  self. _kwargs=kwargs

 def __call__(self,obj):
  return getattr(obj,self. _name)(*self. _args,**self. _kwargs)

def iadd(a,b):
 ''
 a +=b
 return a
__iadd__=iadd

def iand(a,b):
 ''
 a &=b
 return a
__iand__=iand

def iconcat(a,b):
 ''
 if not (hasattr(a,'__getitem__')and hasattr(b,'__getitem__')):
  raise TypeError('a and b must be sequences')
 a +=b
 return a
__iconcat__=iconcat

def ifloordiv(a,b):
 ''
 a //=b
 return a
__ifloordiv__=ifloordiv

def ilshift(a,b):
 ''
 a <<=b
 return a
__ilshift__=ilshift

def imod(a,b):
 ''
 a %=b
 return a
__imod__=imod

def imul(a,b):
 ''
 a *=b
 return a
__imul__=imul

def ior(a,b):
 ''
 a |=b
 return a
__ior__=ior

def ipow(a,b):
 ''
 a **=b
 return a
__ipow__=ipow

def irshift(a,b):
 ''
 a >>=b
 return a
__irshift__=irshift

def isub(a,b):
 ''
 a -=b
 return a
__isub__=isub

def itruediv(a,b):
 ''
 a /=b
 return a
__itruediv__=itruediv

def ixor(a,b):
 ''
 a ^=b
 return a
__ixor__=ixor

def length_hint(obj,default=0):
 ''

 try :
  return len(obj)
 except TypeError:
  try :
   val=obj. __length_hint__()
   if val is NotImplemented:
    raise TypeError
  except (AttributeError,TypeError):
   return default
  else :
   if not val >0:
    raise ValueError('default must be > 0')
   return val

====operator.py(file) end====

====os.py(file) start====
''

import sys

error=OSError
name='posix'
linesep='\n'

from posix import *
import posixpath as path

sys. modules['os.path']=path
from os. path import (curdir,pardir,sep,pathsep,defpath,extsep,altsep,
devnull)

environ={'HOME':__BRYTHON__. curdir}

def getenv(key,default=None ):
 ''

 return environ. get(key,default)

supports_bytes_environ=True

def chdir(path):
 __BRYTHON__. curdir=path

def getcwd():
 return __BRYTHON__. curdir
====os.py(file) end====

====posix.py(file) start====
''

import datetime

from browser import window

def _randint(a,b):
 return int(window. Math. random()*(b -a+1)+a)

F_OK=0

O_APPEND=8

O_BINARY=32768

O_CREAT=256

O_EXCL=1024

O_NOINHERIT=128

O_RANDOM=16

O_RDONLY=0

O_RDWR=2

O_SEQUENTIAL=32

O_SHORT_LIVED=4096

O_TEMPORARY=64

O_TEXT=16384

O_TRUNC=512

O_WRONLY=1

P_DETACH=4

P_NOWAIT=1

P_NOWAITO=3

P_OVERLAY=2

P_WAIT=0

R_OK=4

TMP_MAX=32767

W_OK=2

X_OK=1

class __loader__:
 pass

def _exit(*args,**kw):
 ''

 pass

def _getdiskusage(*args,**kw):
 ''

 pass

def _getfileinformation(*args,**kw):
 pass

def _getfinalpathname(*args,**kw):
 pass

def _getfullpathname(*args,**kw):
 pass

_have_functions=['MS_WINDOWS']

def _isdir(*args,**kw):
 ''
 pass

def abort(*args,**kw):
 ''

 pass

def access(*args,**kw):
 ''

 pass

def chdir(*args,**kw):
 ''

 pass

def chmod(*args,**kw):
 ''

 pass

def close(*args,**kw):
 ''

 pass

def closerange(*args,**kw):
 ''

 pass

def device_encoding(*args,**kw):
 ''

 pass

def dup(*args,**kw):
 ''

 pass

def dup2(*args,**kw):
 ''

 pass

environ={'PYTHONUSERBASE':' '}

error=OSError

def execv(*args,**kw):
 ''

 pass

def execve(*args,**kw):
 ''

 pass

def fstat(*args,**kw):
 ''

 pass

def fsync(*args,**kw):
 ''

 pass

def get_terminal_size(*args,**kw):
 ''

 pass

def getcwd(*args,**kw):
 ''

 return __BRYTHON__. brython_path

def getcwdb(*args,**kw):
 ''

 pass

def getlogin(*args,**kw):
 ''

 pass

def getpid(*args,**kw):
 ''

 return 0

def getppid(*args,**kw):
 ''

 pass

def isatty(*args,**kw):
 ''

 pass

def kill(*args,**kw):
 ''

 pass

def link(*args,**kw):
 ''

 pass

def listdir(*args,**kw):
 ''

 pass

def lseek(*args,**kw):
 ''

 pass

def lstat(*args,**kw):
 ''

 return stat_result()

def mkdir(*args,**kw):
 ''

 pass

def open(path,flags,mode=0o777,*args,dir_fd=None ):
 ''

 from browser. local_storage import storage

 class mystorage:
  def __init__(self,path,flags):
   self. _path=path
   self. _pos=0
   self. _flags=flags

   if self. _flags&O_RDONLY ==O_RDONLY:
    self. _data=storage. get(self. _path,None )
    if self. _data is None :
     raise FileNotFoundError("%s not found"%self. _path)
   elif self. _flags&O_WRONLY ==O_WRONLY:
    storage[self. _path]=''

  def seek(self,pos):
   self. _pos=pos

  def read(self,size=None ):
   if size is None :
    _result=self. _data[self. _pos:]
    self. _pos=len(self. _data)
    return _result

   assert size <=len(self. _data)-self. _pos
   _result=self. _data[self. _pos:self. _pos+size]
   self. _pos +=size
   return _result

  def write(self,data):
   storage[self. _path]+=str(data)

  def close(self):
   pass

 return mystorage(path,flags)

def pipe(*args,**kw):
 ''

 pass

def putenv(*args,**kw):
 ''

 pass

def read(*args,**kw):
 ''

 pass

def readlink(*args,**kw):
 ''

 pass

def remove(*args,**kw):
 ''

 pass

def rename(*args,**kw):
 ''

 pass

def replace(*args,**kw):
 ''

 pass

def rmdir(*args,**kw):
 ''

 pass

def spawnv(*args,**kw):
 ''

 pass

def spawnve(*args,**kw):
 ''

 pass

def startfile(*args,**kw):
 ''

 pass

def stat(*args,**kw):
 ''

 return stat_result()

def stat_float_times(*args,**kw):
 ''

 pass

class stat_result:

 def __init__(self):
  ''

  self. st_atime=datetime. datetime. now()
  self. st_mtime=self. st_ctime=self. st_atime_ns=  self. st_mtime_ns=self. st_ctime_ns=self. st_atime
  self. st_uid=self. st_gid=self. st_ino=-1
  self. st_mode=0
  self. st_size=1

class statvfs_result:
 pass

def strerror(*args,**kw):
 ''

 pass

def symlink(*args,**kw):
 ''

 pass

def system(*args,**kw):
 ''

 pass

class terminal_size:
 pass

def times(*args,**kw):
 ''

 pass

class times_result:
 pass

def umask(*args,**kw):
 ''

 pass

class uname_result:
 pass

def unlink(path,*args,dir_fd=None ):
 ''

 pass

def urandom(n):
 ''

 randbytes=[_randint(0,255)for i in range(n)]
 return bytes(randbytes)

def utime(*args,**kw):
 ''

 pass

def waitpid(*args,**kw):
 ''

 pass

def write(*args,**kw):
 ''

 pass

def WIFSIGNALED(a):
 return False

def WTERMSIG(status):
 return 0

def WIFSIGNALED(status):
 ''
 return False

def WIFEXITED(status):
 return False

def WEXITSTATUS(status):
 pass

def WNOHANG():
 return (0,0)
====posix.py(file) end====

====posixpath.py(file) start====
''

import os
import sys
import stat
import genericpath
from genericpath import *

__all__=["normcase","isabs","join","splitdrive","split","splitext",
"basename","dirname","commonprefix","getsize","getmtime",
"getatime","getctime","islink","exists","lexists","isdir","isfile",
"ismount","expanduser","expandvars","normpath","abspath",
"samefile","sameopenfile","samestat",
"curdir","pardir","sep","pathsep","defpath","altsep","extsep",
"devnull","realpath","supports_unicode_filenames","relpath"]

curdir='.'
pardir='..'
extsep='.'
sep='/'
pathsep=':'
defpath=':/bin:/usr/bin'
altsep=None
devnull='/dev/null'

def _get_sep(path):
 if isinstance(path,bytes):
  return b'/'
 else :
  return'/'

def normcase(s):
 ''

 if not isinstance(s,(bytes,str)):
  raise TypeError("normcase() argument must be str or bytes, "
  "not '{}'". format(s. __class__. __name__))
 return s

def isabs(s):
 ''
 sep=_get_sep(s)
 return s. startswith(sep)

def join(a,*p):
 ''

 sep=_get_sep(a)
 path=a
 try :
  for b in p:
   if b. startswith(sep):
    path=b
   elif not path or path. endswith(sep):
    path +=b
   else :
    path +=sep+b
 except TypeError:
  valid_types=all(isinstance(s,(str,bytes,bytearray))
  for s in (a,)+p)
  if valid_types:

   raise TypeError("Can't mix strings and bytes in path "
   "components.")from None
  raise
 return path

def split(p):
 ''

 sep=_get_sep(p)
 i=p. rfind(sep)+1
 head,tail=p[:i],p[i:]
 if head and head !=sep *len(head):
  head=head. rstrip(sep)
 return head,tail

def splitext(p):
 if isinstance(p,bytes):
  sep=b'/'
  extsep=b'.'
 else :
  sep='/'
  extsep='.'
 return genericpath. _splitext(p,sep,None ,extsep)
splitext. __doc__=genericpath. _splitext. __doc__

def splitdrive(p):
 ''

 return p[:0],p

def basename(p):
 ''
 sep=_get_sep(p)
 i=p. rfind(sep)+1
 return p[i:]

def dirname(p):
 ''
 sep=_get_sep(p)
 i=p. rfind(sep)+1
 head=p[:i]
 if head and head !=sep *len(head):
  head=head. rstrip(sep)
 return head

def islink(path):
 ''
 try :
  st=os. lstat(path)
 except (os. error,AttributeError):
  return False
 return stat. S_ISLNK(st. st_mode)

def lexists(path):
 ''
 try :
  os. lstat(path)
 except os. error:
  return False
 return True

def samefile(f1,f2):
 ''
 s1=os. stat(f1)
 s2=os. stat(f2)
 return samestat(s1,s2)

def sameopenfile(fp1,fp2):
 ''
 s1=os. fstat(fp1)
 s2=os. fstat(fp2)
 return samestat(s1,s2)

def samestat(s1,s2):
 ''
 return s1. st_ino ==s2. st_ino and s1. st_dev ==s2. st_dev

def ismount(path):
 ''
 if islink(path):

  return False
 try :
  s1=os. lstat(path)
  if isinstance(path,bytes):
   parent=join(path,b'..')
  else :
   parent=join(path,'..')
  s2=os. lstat(parent)
 except os. error:
  return False
 dev1=s1. st_dev
 dev2=s2. st_dev
 if dev1 !=dev2:
  return True
 ino1=s1. st_ino
 ino2=s2. st_ino
 if ino1 ==ino2:
  return True
 return False

def expanduser(path):
 ''
 return path

_varprog=None
_varprogb=None

def expandvars(path):
 ''

 global _varprog,_varprogb
 if isinstance(path,bytes):
  if b'$'not in path:
   return path
  if not _varprogb:
   import re
   _varprogb=re. compile(br'\$(\w+|\{[^}]*\})',re. ASCII)
  search=_varprogb. search
  start=b'{'
  end=b'}'
 else :
  if'$'not in path:
   return path
  if not _varprog:
   import re
   _varprog=re. compile(r'\$(\w+|\{[^}]*\})',re. ASCII)
  search=_varprog. search
  start='{'
  end='}'
 i=0
 while True :
  m=search(path,i)
  if not m:
   break
  i,j=m. span(0)
  name=m. group(1)
  if name. startswith(start)and name. endswith(end):
   name=name[1:-1]
  if isinstance(name,bytes):
   name=str(name,'ASCII')
  if name in os. environ:
   tail=path[j:]
   value=os. environ[name]
   if isinstance(path,bytes):
    value=value. encode('ASCII')
   path=path[:i]+value
   i=len(path)
   path +=tail
  else :
   i=j
 return path

def normpath(path):
 ''
 if isinstance(path,bytes):
  sep=b'/'
  empty=b''
  dot=b'.'
  dotdot=b'..'
 else :
  sep='/'
  empty=''
  dot='.'
  dotdot='..'
 if path ==empty:
  return dot
 initial_slashes=path. startswith(sep)

 if (initial_slashes and
 path. startswith(sep *2)and not path. startswith(sep *3)):
  initial_slashes=2
 comps=path. split(sep)
 new_comps=[]
 for comp in comps:
  if comp in (empty,dot):
   continue
  if (comp !=dotdot or (not initial_slashes and not new_comps)or
  (new_comps and new_comps[-1]==dotdot)):
   new_comps. append(comp)
  elif new_comps:
   new_comps. pop()
 comps=new_comps
 path=sep. join(comps)
 if initial_slashes:
  path=sep *initial_slashes+path
 return path or dot

def abspath(path):
 ''
 if not isabs(path):
  if isinstance(path,bytes):
   cwd=os. getcwdb()
  else :
   cwd=os. getcwd()
  path=join(cwd,path)
 return normpath(path)

def realpath(filename):
 ''

 path,ok=_joinrealpath(filename[:0],filename,{})
 return abspath(path)

def _joinrealpath(path,rest,seen):
 if isinstance(path,bytes):
  sep=b'/'
  curdir=b'.'
  pardir=b'..'
 else :
  sep='/'
  curdir='.'
  pardir='..'

 if isabs(rest):
  rest=rest[1:]
  path=sep

 while rest:
  name,_,rest=rest. partition(sep)
  if not name or name ==curdir:

   continue
  if name ==pardir:

   if path:
    path,name=split(path)
    if name ==pardir:
     path=join(path,pardir,pardir)
   else :
    path=pardir
   continue
  newpath=join(path,name)
  if not islink(newpath):
   path=newpath
   continue

  if newpath in seen:

   path=seen[newpath]
   if path is not None :

    continue

   return join(newpath,rest),False
  seen[newpath]=None
  path,ok=_joinrealpath(path,os. readlink(newpath),seen)
  if not ok:
   return join(path,rest),False
  seen[newpath]=path

 return path,True

supports_unicode_filenames=(sys. platform =='darwin')

def relpath(path,start=None ):
 ''

 if not path:
  raise ValueError("no path specified")

 if isinstance(path,bytes):
  curdir=b'.'
  sep=b'/'
  pardir=b'..'
 else :
  curdir='.'
  sep='/'
  pardir='..'

 if start is None :
  start=curdir

 start_list=[x for x in abspath(start). split(sep)if x]
 path_list=[x for x in abspath(path). split(sep)if x]

 i=len(commonprefix([start_list,path_list]))

 rel_list=[pardir]*(len(start_list)-i)+path_list[i:]
 if not rel_list:
  return curdir
 return join(*rel_list)
====posixpath.py(file) end====

====pprint.py(file) start====


import sys as _sys
from collections import OrderedDict as _OrderedDict
from io import StringIO as _StringIO

__all__=["pprint","pformat","isreadable","isrecursive","saferepr",
"PrettyPrinter"]

_commajoin=", ". join
_id=id
_len=len
_type=type

def pprint(object,stream=None ,indent=1,width=80,depth=None ):
 ''
 printer=PrettyPrinter(
 stream=stream,indent=indent,width=width,depth=depth)
 printer. pprint(object)

def pformat(object,indent=1,width=80,depth=None ):
 ''
 return PrettyPrinter(indent=indent,width=width,depth=depth). pformat(object)

def saferepr(object):
 ''
 return _safe_repr(object,{},None ,0)[0]

def isreadable(object):
 ''
 return _safe_repr(object,{},None ,0)[1]

def isrecursive(object):
 ''
 return _safe_repr(object,{},None ,0)[2]

class _safe_key:
 ''

 __slots__=['obj']

 def __init__(self,obj):
  self. obj=obj

 def __lt__(self,other):
  try :
   rv=self. obj. __lt__(other. obj)
  except TypeError:
   rv=NotImplemented

  if rv is NotImplemented:
   rv=(str(type(self. obj)),id(self. obj))<   (str(type(other. obj)),id(other. obj))
  return rv

def _safe_tuple(t):
 ''
 return _safe_key(t[0]),_safe_key(t[1])

class PrettyPrinter:
 def __init__(self,indent=1,width=80,depth=None ,stream=None ):
  ''

  indent=int(indent)
  width=int(width)
  assert indent >=0,"indent must be >= 0"
  assert depth is None or depth >0,"depth must be > 0"
  assert width,"width must be != 0"
  self. _depth=depth
  self. _indent_per_level=indent
  self. _width=width
  if stream is not None :
   self. _stream=stream
  else :
   self. _stream=_sys. stdout

 def pprint(self,object):
  self. _format(object,self. _stream,0,0,{},0)
  self. _stream. write("\n")

 def pformat(self,object):
  sio=_StringIO()
  self. _format(object,sio,0,0,{},0)
  return sio. getvalue()

 def isrecursive(self,object):
  return self. format(object,{},0,0)[2]

 def isreadable(self,object):
  s,readable,recursive=self. format(object,{},0,0)
  return readable and not recursive

 def _format(self,object,stream,indent,allowance,context,level):
  level=level+1
  import sys
  sys. stderr. write(str(object))
  objid=_id(object)
  if objid in context:
   stream. write(_recursion(object))
   self. _recursive=True
   self. _readable=False
   return
  rep=self. _repr(object,context,level -1)
  typ=_type(object)
  sepLines=_len(rep)>(self. _width -1 -indent -allowance)
  write=stream. write

  if self. _depth and level >self. _depth:
   write(rep)
   return

  if sepLines:
   r=getattr(typ,"__repr__",None )
   if issubclass(typ,dict):
    write('{')
    if self. _indent_per_level >1:
     write((self. _indent_per_level -1)*' ')
    length=_len(object)
    if length:
     context[objid]=1
     indent=indent+self. _indent_per_level
     if issubclass(typ,_OrderedDict):
      items=list(object. items())
     else :
      items=sorted(object. items(),key=_safe_tuple)
     key,ent=items[0]
     rep=self. _repr(key,context,level)
     write(rep)
     write(': ')
     self. _format(ent,stream,indent+_len(rep)+2,
     allowance+1,context,level)
     if length >1:
      for key,ent in items[1:]:
       rep=self. _repr(key,context,level)
       write(',\n%s%s: '%(' '*indent,rep))
       self. _format(ent,stream,indent+_len(rep)+2,
       allowance+1,context,level)
     indent=indent -self. _indent_per_level
     del context[objid]
    write('}')
    return

   if ((issubclass(typ,list)and r is list. __repr__)or
   (issubclass(typ,tuple)and r is tuple. __repr__)or
   (issubclass(typ,set)and r is set. __repr__)or
   (issubclass(typ,frozenset)and r is frozenset. __repr__)
   ):
    length=_len(object)
    if issubclass(typ,list):
     write('[')
     endchar=']'
    elif issubclass(typ,tuple):
     write('(')
     endchar=')'
    else :
     if not length:
      write(rep)
      return
     if typ is set:
      write('{')
      endchar='}'
     else :
      write(typ. __name__)
      write('({')
      endchar='})'
      indent +=len(typ. __name__)+1
     object=sorted(object,key=_safe_key)
    if self. _indent_per_level >1:
     write((self. _indent_per_level -1)*' ')
    if length:
     context[objid]=1
     indent=indent+self. _indent_per_level
     self. _format(object[0],stream,indent,allowance+1,
     context,level)
     if length >1:
      for ent in object[1:]:
       write(',\n'+' '*indent)
       self. _format(ent,stream,indent,
       allowance+1,context,level)
     indent=indent -self. _indent_per_level
     del context[objid]
    if issubclass(typ,tuple)and length ==1:
     write(',')
    write(endchar)
    return

  write(rep)

 def _repr(self,object,context,level):
  repr,readable,recursive=self. format(object,context. copy(),
  self. _depth,level)
  if not readable:
   self. _readable=False
  if recursive:
   self. _recursive=True
  return repr

 def format(self,object,context,maxlevels,level):
  ''

  return _safe_repr(object,context,maxlevels,level)

def _safe_repr(object,context,maxlevels,level):
 typ=_type(object)
 if typ is str:
  if'locale'not in _sys. modules:
   return repr(object),True ,False
  if"'"in object and'"'not in object:
   closure='"'
   quotes={'"':'\\"'}
  else :
   closure="'"
   quotes={"'":"\\'"}
  qget=quotes. get
  sio=_StringIO()
  write=sio. write
  for char in object:
   if char. isalpha():
    write(char)
   else :
    write(qget(char,repr(char)[1:-1]))
  return ("%s%s%s"%(closure,sio. getvalue(),closure)),True ,False

 r=getattr(typ,"__repr__",None )
 if issubclass(typ,dict)and r is dict. __repr__:
  if not object:
   return"{}",True ,False
  objid=_id(object)
  if maxlevels and level >=maxlevels:
   return"{...}",False ,objid in context
  if objid in context:
   return _recursion(object),False ,True
  context[objid]=1
  readable=True
  recursive=False
  components=[]
  append=components. append
  level +=1
  saferepr=_safe_repr
  items=sorted(object. items(),key=_safe_tuple)
  for k,v in items:
   krepr,kreadable,krecur=saferepr(k,context,maxlevels,level)
   vrepr,vreadable,vrecur=saferepr(v,context,maxlevels,level)
   append("%s: %s"%(krepr,vrepr))
   readable=readable and kreadable and vreadable
   if krecur or vrecur:
    recursive=True
  del context[objid]
  return"{%s}"%_commajoin(components),readable,recursive

 if (issubclass(typ,list)and r is list. __repr__)or (issubclass(typ,tuple)and r is tuple. __repr__):
  if issubclass(typ,list):
   if not object:
    return"[]",True ,False
   format="[%s]"
  elif _len(object)==1:
   format="(%s,)"
  else :
   if not object:
    return"()",True ,False
   format="(%s)"
  objid=_id(object)
  if maxlevels and level >=maxlevels:
   return format %"...",False ,objid in context
  if objid in context:
   return _recursion(object),False ,True
  context[objid]=1
  readable=True
  recursive=False
  components=[]
  append=components. append
  level +=1
  for o in object:
   orepr,oreadable,orecur=_safe_repr(o,context,maxlevels,level)
   append(orepr)
   if not oreadable:
    readable=False
   if orecur:
    recursive=True
  del context[objid]
  return format %_commajoin(components),readable,recursive

 rep=repr(object)
 return rep,(rep and not rep. startswith('<')),False

def _recursion(object):
 return ("<Recursion on %s with id=%s>"
 %(_type(object). __name__,_id(object)))

def _perfcheck(object=None ):
 import time
 if object is None :
  object=[("string",(1,2),[3,4],{5:6,7:8})]*100000
 p=PrettyPrinter()
 t1=time. time()
 _safe_repr(object,{},None ,0)
 t2=time. time()
 p. pformat(object)
 t3=time. time()
 print("_safe_repr:",t2 -t1)
 print("pformat:",t3 -t2)

if __name__ =="__main__":
 _perfcheck()
====pprint.py(file) end====

====pyecharts.py(module) start====

from pyecharts._version import __version__, __author__

from pyecharts.charts.bar import Bar
from pyecharts.charts.bar3D import Bar3D
from pyecharts.charts.boxplot import Boxplot
from pyecharts.charts.effectscatter import EffectScatter
from pyecharts.charts.funnel import Funnel
from pyecharts.charts.gauge import Gauge
from pyecharts.charts.geo import Geo
from pyecharts.charts.graph import Graph
from pyecharts.charts.heatmap import HeatMap
from pyecharts.charts.kline import Kline
from pyecharts.charts.line import Line
from pyecharts.charts.line3D import Line3D
from pyecharts.charts.liquid import Liquid
from pyecharts.charts.map import Map
from pyecharts.charts.parallel import Parallel
from pyecharts.charts.pie import Pie
from pyecharts.charts.polar import Polar
from pyecharts.charts.radar import Radar
from pyecharts.charts.sankey import Sankey
from pyecharts.charts.scatter import Scatter
from pyecharts.charts.scatter3D import Scatter3D
from pyecharts.charts.themeriver import ThemeRiver
from pyecharts.charts.treemap import TreeMap
from pyecharts.charts.wordcloud import WordCloud

from pyecharts.custom.grid import Grid
from pyecharts.custom.overlap import Overlap
from pyecharts.custom.page import Page
from pyecharts.custom.timeline import Timeline

from pyecharts.template import online
====pyecharts.py(module) end====

====pyecharts._version.py(file) start====
__version__ = '0.2.6'
__author__ = 'chenjiandongx'
====pyecharts._version.py(file) end====

====pyecharts.base.py(file) start====

import json
import random
import datetime
from browser import window, load, doc

from pyecharts.option import get_all_options
from pyecharts import template
import pyecharts.constants as constants


class Base(object):

    def __init__(self, title, subtitle,
                 width=800,
                 height=400,
                 title_pos="auto",
                 title_top="auto",
                 title_color="#000",
                 subtitle_color="#aaa",
                 title_text_size=18,
                 subtitle_text_size=12,
                 background_color="#fff",
                 page_title=constants.PAGE_TITLE,
                 jshost=None):
        self._option = {}
        self._width, self._height = width, height
        self._page_title = page_title
        self._colorlst = [
            '#c23531', '#2f4554', '#61a0a8', '#d48265', '#749f83',
            '#ca8622', '#bda29a', '#6e7074', '#546570', '#c4ccd3',
            '#f05b72', '#ef5b9c', '#f47920', '#905a3d', '#fab27b',
            '#2a5caa', '#444693', '#726930', '#b2d235', '#6d8346',
            '#ac6767', '#1d953f', '#6950a1', '#918597', '#f6f5ec']
        self._option.update(
            title=[{
                "text": title,
                "subtext": subtitle,
                "left": title_pos,
                "top": title_top,
                "textStyle": {
                    "color": title_color,
                    "fontSize": title_text_size
                },
                "subtextStyle": {
                    "color": subtitle_color,
                    "fontSize": subtitle_text_size
                }
            }],
            toolbox={
                "show": True,
                "orient": "vertical",
                "left": "95%",
                "top": "center",
                "feature": {
                    "saveAsImage": {
                        "show": True,
                        "title": "下载图片"
                    },
                    "restore": {"show": True},
                    "dataView": {"show": True},
                }
            },
            series_id = random.randint(1, 9000000),
            tooltip={},
            series=[],
            legend=[{"data": []}],
            backgroundColor=background_color
        )
        self._jshost = jshost if jshost else constants.CONFIGURATION['HOST']
        self._js_dependencies = {'echarts'}
        self._chart_id = ''

    def add(self, angle_data=None,
            angle_range=None,
            area_color=None,
            area_opacity=None,
            axis_range=None,
            bar_category_gap=None,
            border_color=None,
            boundary_gap=None,
            center=None,
            calendar_date_range=None,
            calendar_cell_size=None,
            datazoom_type=None,
            datazoom_range=None,
            datazoom_orient=None,
            datazoom_xaxis_index=None,
            datazoom_yaxis_index=None,
            effect_brushtype=None,
            effect_period=None,
            effect_scale=None,
            extra_data=None,
            geo_emphasis_color=None,
            geo_normal_color=None,
            geo_cities_coords=None,
            graph_layout=None,
            graph_gravity=None,
            graph_edge_length=None,
            graph_repulsion=None,
            graph_edge_symbol=None,
            graph_edge_symbolsize=None,
            grid_width=None,
            grid_height=None,
            grid_top=None,
            grid_bottom=None,
            grid_left=None,
            grid_right=None,
            grid3d_width=None,
            grid3d_height=None,
            grid3d_depth=None,
            grid3d_opacity=None,
            grid3d_shading=None,
            grid3d_rotate_speed=None,
            grid3d_rotate_sensitivity=None,
            is_angleaxis_show=None,
            is_area_show=None,
            is_axisline_show=None,
            is_calculable=None,
            is_calendar_heatmap=None,
            is_clockwise=None,
            is_convert=None,
            is_datazoom_show=None,
            is_fill=None,
            is_focusnode=None,
            is_grid3d_rotate=None,
            is_label_show=None,
            is_label_emphasis=None,
            is_legend_show=None,
            is_liquid_animation=None,
            is_liquid_outline_show=None,
            is_more_utils=None,
            is_piecewise=None,
            is_radiusaxis_show=None,
            is_random=None,
            is_roam=None,
            is_rotatelabel=None,
            is_smooth=None,
            is_splitline_show=None,
            is_stack=None,
            is_step=None,
            is_symbol_show=None,
            is_map_symbol_show=None,
            is_visualmap=None,
            is_xaxislabel_align=None,
            is_yaxislabel_align=None,
            is_xaxis_inverse=None,
            is_yaxis_inverse=None,
            is_xaxis_boundarygap=None,
            is_yaxis_boundarygap=None,
            is_xaxis_show=None,
            is_yaxis_show=None,
            item_color=None,
            label_color=None,
            label_pos=None,
            label_text_color=None,
            label_text_size=None,
            label_formatter=None,
            label_emphasis_textcolor=None,
            label_emphasis_textsize=None,
            label_emphasis_pos=None,
            legend_orient=None,
            legend_pos=None,
            legend_top=None,
            legend_selectedmode=None,
            legend_text_size=None,
            legend_text_color=None,
            line_curve=None,
            line_opacity=None,
            line_type=None,
            line_width=None,
            line_color=None,
            liquid_color=None,
            maptype=None,
            mark_line=None,
            mark_line_symbolsize=None,
            mark_line_valuedim=None,
            mark_point=None,
            mark_point_symbol=None,
            mark_point_symbolsize=None,
            mark_point_textcolor=None,
            radius_data=None,
            radius=None,
            rosetype=None,
            rotate_step=None,
            scale_range=None,
            shape=None,
            start_angle=None,
            symbol_size=None,
            symbol=None,
            sankey_node_width=None,
            sankey_node_gap=None,
            type=None,
            tooltip_tragger=None,
            tooltip_tragger_on=None,
            tooltip_axispointer_type=None,
            tooltip_formatter=None,
            tooltip_text_color=None,
            tooltip_font_size=None,
            treemap_left_depth=None,
            treemap_drilldown_icon=None,
            treemap_visible_min=None,
            visual_orient=None,
            visual_range_color=None,
            visual_range_size=None,
            visual_range_text=None,
            visual_range=None,
            visual_text_color=None,
            visual_pos=None,
            visual_top=None,
            visual_type=None,
            visual_split_number=None,
            visual_dimension=None,
            word_gap=None,
            word_size_range=None,
            x_axis=None,
            xaxis_margin=None,
            xaxis_interval=None,
            xaxis_force_interval=None,
            xaxis_pos=None,
            xaxis_name_gap=None,
            xaxis_name_size=None,
            xaxis_name_pos=None,
            xaxis_name=None,
            xaxis_rotate=None,
            xaxis_min=None,
            xaxis_max=None,
            xaxis_type=None,
            xaxis3d_name=None,
            xaxis3d_name_size=None,
            xaxis3d_name_gap=None,
            xaxis3d_min=None,
            xaxis3d_max=None,
            xaxis3d_interval=None,
            xaxis3d_margin=None,
            yaxis_margin=None,
            yaxis_interval=None,
            yaxis_force_interval=None,
            yaxis_pos=None,
            yaxis_formatter=None,
            yaxis_rotate=None,
            yaxis_min=None,
            yaxis_max=None,
            yaxis_name_gap=None,
            yaxis_name_size=None,
            yaxis_name_pos=None,
            yaxis_type=None,
            yaxis_name=None,
            yaxis3d_name=None,
            yaxis3d_name_size=None,
            yaxis3d_name_gap=None,
            yaxis3d_min=None,
            yaxis3d_max=None,
            yaxis3d_interval=None,
            yaxis3d_margin=None,
            zaxis3d_name=None,
            zaxis3d_name_size=None,
            zaxis3d_name_gap=None,
            zaxis3d_min=None,
            zaxis3d_max=None,
            zaxis3d_margin=None, **kwargs):
        pass

    def show_config(self):
        print(json_dumps(self._option, indent=4))

    @property
    def options(self):
        return self._option

    @staticmethod
    def cast(seq):
        k_lst, v_lst = [], []
        if isinstance(seq, list):
            for s in seq:
                try:
                    if isinstance(s, tuple):
                        _attr, _value = s
                        k_lst.append(_attr)
                        v_lst.append(_value)
                    elif isinstance(s, dict):
                        for k, v in s.items():
                            k_lst.append(k)
                            v_lst.append(v)
                except:
                    raise
        elif isinstance(seq, dict):
            for k, v in seq.items():
                k_lst.append(k)
                v_lst.append(v)
        return k_lst, v_lst

    def _config_components(self, is_visualmap=False,
                           is_more_utils=False,
                           **kwargs):
        kwargs.update(colorlst=self._colorlst)
        chart = get_all_options(**kwargs)
        self._option.update(color=chart['color'])

        self._option.get('legend')[0].update(chart['legend'])
        self._option.update(tooltip=chart['tooltip'])

        if kwargs.get('is_datazoom_show', None) is True:    # do not change this line anymore
            self._option.update(dataZoom=chart['datazoom'])
        if is_visualmap:
            self._option.update(visualMap=chart['visual_map'])
        if is_more_utils:
            self._option.get('toolbox').get('feature').update(
                magicType={
                    "show": True,
                    "type": ['line', 'bar', 'stack', 'tiled'],
                    "title": {
                        "line": "折线图",
                        "bar": "柱状图",
                        "stack": "堆叠",
                        "tiled": "平铺"}},
                dataZoom={
                    "show": True,
                    "title": {
                        "zoom": "区域缩放",
                        "back": "缩放还原"}}
            )

    def get_js_dependencies(self):
        return template.produce_html_script_list(self._js_dependencies)

    def render(self, _=None):
        for js_url in self.get_js_dependencies():
            load(constants.DEFAULT_HOST + '/' + js_url + ".js")
        myechart = window.echarts.init(doc['me'])
        myechart.setOption(self.options)


def handle(obj):
    if isinstance(obj, (datetime.datetime, datetime.date)):
        return obj.isoformat()


def json_dumps(data, indent=0):
    return json.dumps(data, indent=indent, default=handle)
====pyecharts.base.py(file) end====

====pyecharts.charts.py(module) start====
====pyecharts.charts.py(module) end====

====pyecharts.charts.bar.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Bar(Base):

    def __init__(self, title="", subtitle="", **kwargs):
        super(Bar, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, x_axis, y_axis,
              is_stack=False,
              bar_category_gap="20%",
              **kwargs):
        assert len(x_axis) == len(y_axis)
        kwargs.update(x_axis=x_axis)
        chart = get_all_options(**kwargs)

        is_stack = "stack_" + str(self._option['series_id']) if is_stack else ""
        xaxis, yaxis = chart['xy_axis']
        self._option.update(xAxis=xaxis, yAxis=yaxis)
        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "bar",
            "name": name,
            "data": y_axis,
            "stack": is_stack,
            "barCategoryGap": bar_category_gap,
            "label": chart['label'],
            "markPoint": chart['mark_point'],
            "markLine": chart['mark_line'],
            "seriesId": self._option.get('series_id'),
        })
        self._config_components(**kwargs)
====pyecharts.charts.bar.py(file) end====

====pyecharts.charts.bar3D.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Bar3D(Base):

    def __init__(self, title="", subtitle="", **kwargs):
        super(Bar3D, self).__init__(title, subtitle, **kwargs)
        self._js_dependencies.add('echartsgl')

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, x_axis, y_axis, data,
              grid3d_opacity=1,
              grid3d_shading='color',
              **kwargs):
        kwargs.update(xaxis3d_type='category',
                      yaxis3d_type='category',
                      zaxis3d_type='value')
        chart = get_all_options(**kwargs)

        self._option.get('legend')[0].get('data').append(name)
        self._option.update(
            xAxis3D=chart['xaxis3D'],
            yAxis3D=chart['yaxis3D'],
            zAxis3D=chart['zaxis3D'],
            grid3D=chart['grid3D']
        )
        self._option.get('xAxis3D').update(data=x_axis)
        self._option.get('yAxis3D').update(data=y_axis)

        self._option.get('series').append({
            "type": "bar3D",
            "name": name,
            "data": data,
            "label": chart['label'],
            "shading": grid3d_shading,
            "itemStyle": {"opacity": grid3d_opacity}
        })
        self._config_components(**kwargs)
====pyecharts.charts.bar3D.py(file) end====

====pyecharts.charts.boxplot.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Boxplot(Base):

    def __init__(self, title="", subtitle="", **kwargs):
        super(Boxplot, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, x_axis, y_axis, **kwargs):
        kwargs.update(x_axis=x_axis)
        chart = get_all_options(**kwargs)

        xaxis, yaxis = chart['xy_axis']
        self._option.update(xAxis=xaxis, yAxis=yaxis)
        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "boxplot",
            "name": name,
            "data": y_axis,
            "label": chart['label'],
            "markPoint": chart['mark_point'],
            "markLine": chart['mark_line'],
            "seriesId": self._option.get('series_id'),
        })
        self._config_components(**kwargs)

    @staticmethod
    def prepare_data(data):
        _data = []
        for d in data:
            try:
                _d, _result = sorted(d), []
                for i in range(1, 4):
                    n = i * (len(_d) + 1) / 4
                    m = n - int(n)
                    if m == 0:
                        _result.append(_d[int(n) - 1])
                    elif m == 1 / 4:
                        _result.append(_d[int(n) - 1] * 0.75 + _d[int(n)] * 0.25)
                    elif m == 1 / 2:
                        _result.append(_d[int(n) - 1] * 0.5 + _d[int(n)] * 0.5)
                    elif m == 3 / 4:
                        _result.append(_d[int(n) - 1] * 0.25 + _d[int(n)] * 0.75)
                _result.insert(0, _d[0])    # min
                _result.append(_d[-1])      # max
                _data.append(_result)
            except Exception:
                pass
        return _data
====pyecharts.charts.boxplot.py(file) end====

====pyecharts.charts.effectscatter.py(file) start====

from pyecharts.charts.scatter import Scatter
from pyecharts.option import get_all_options


class EffectScatter(Scatter):
    def __init__(self, title="", subtitle="", **kwargs):
        super(EffectScatter, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, x_axis, y_axis,
              symbol_size=10,
              **kwargs):
        assert len(x_axis) == len(y_axis)
        kwargs.update(type="scatter")
        chart = get_all_options(**kwargs)

        xaxis, yaxis = chart['xy_axis']
        self._option.update(xAxis=xaxis, yAxis=yaxis)
        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "effectScatter",
            "name": name,
            "showEffectOn":"render",
            "rippleEffect": chart['effect'],
            "symbol": chart['symbol'],
            "symbolSize": symbol_size,
            "data": [list(z) for z in zip(x_axis, y_axis)],
            "label": chart['label'],
            "seriesId": self._option.get('series_id'),
        })
        self._config_components(**kwargs)
====pyecharts.charts.effectscatter.py(file) end====

====pyecharts.charts.funnel.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Funnel(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Funnel, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, attr, value, **kwargs):
        assert len(attr) == len(value)
        chart = get_all_options(**kwargs)

        _data = []
        for data in zip(attr, value):
            _name, _value = data
            _data.append({"name": _name, "value": _value})
        for a in attr:
            self._option.get('legend')[0].get('data').append(a)
        _dset = set(self._option.get('legend')[0].get('data'))
        self._option.get('legend')[0].update(data=list(_dset))

        self._option.get('series').append({
            "type": "funnel",
            "name": name,
            "data": _data,
            "label": chart['label']
        })
        self._config_components(**kwargs)
====pyecharts.charts.funnel.py(file) end====

====pyecharts.charts.gauge.py(file) start====

from pyecharts.base import Base


class Gauge(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Gauge, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, attr, value,
              scale_range=None,
              angle_range=None,
              **kwargs):
        kwargs.update(type="gauge")
        _min, _max = 0, 100
        if scale_range:
            if len(scale_range) == 2:
                _min, _max = scale_range

        _start, _end = 225, -45
        if angle_range:
            if len(angle_range) == 2:
                _start, _end = angle_range

        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "gauge",
            "detail": {"formatter": '{value}%'},
            "name": name,
            "min": _min,
            "max": _max,
            "startAngle": _start,
            "endAngle": _end,
            "data": [{
                "value": value,
                "name": attr
            }]
        })
        self._config_components(**kwargs)
====pyecharts.charts.gauge.py(file) end====

====pyecharts.charts.geo.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options
from pyecharts.constants import CITY_GEO_COORDS
from pyecharts.constants import CITY_NAME_PINYIN_MAP


class Geo(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Geo, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, attr, value,
              type="scatter",
              maptype='china',
              symbol_size=12,
              border_color="#111",
              geo_normal_color="#323c48",
              geo_emphasis_color="#2a333d",
              geo_cities_coords=None,
              is_roam=True,
              **kwargs):
        assert len(attr) == len(value)
        kwargs.update(type="geo")
        chart = get_all_options(**kwargs)

        if geo_cities_coords:
            _geo_cities_coords = geo_cities_coords
        else:
            _geo_cities_coords = CITY_GEO_COORDS

        _data = []
        for name, value in zip(attr, value):
            if name in _geo_cities_coords:
                city_coordinate = _geo_cities_coords.get(name)
                city_coordinate.append(value)
                _data.append({"name": name, "value": city_coordinate})
            else:
                print("%s coordinates is not found" % name)
        self._option.update(
            geo={
                "map": maptype,
                "roam": is_roam,
                "label": {
                    "emphasis": {
                        "show": True,
                        "textStyle": {
                            "color": "#eee"
                        }
                    }},
                "itemStyle": {
                    "normal": {
                        "areaColor": geo_normal_color,
                        "borderColor": border_color
                    },
                    "emphasis": {
                        "areaColor": geo_emphasis_color
                    }}
            })
        self._option.get('legend')[0].get('data').append(name)

        if type == "scatter":
            self._option.get('series').append({
                "type": type,
                "name": name,
                "coordinateSystem": 'geo',
                "symbol": chart['symbol'],
                "symbolSize": symbol_size,
                "data": _data,
                "label": chart['label'],
            })

        elif type == "effectScatter":
            self._option.get('series').append({
                "type": type,
                "name": name,
                "coordinateSystem": 'geo',
                "showEffectOn": "render",
                "rippleEffect": chart['effect'],
                "symbol": chart['symbol'],
                "symbolSize": symbol_size,
                "data": _data,
                "label": chart['label'],
            })

        elif type == "heatmap":
            self._option.get('series').append({
                "type": type,
                "name": name,
                "coordinateSystem": 'geo',
                "data": _data,
            })
        name_in_pinyin = CITY_NAME_PINYIN_MAP.get(maptype, maptype)
        self._js_dependencies.add(name_in_pinyin)
        self._config_components(**kwargs)
====pyecharts.charts.geo.py(file) end====

====pyecharts.charts.graph.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Graph(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Graph, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, nodes, links, categories=None,
              is_focusnode=True,
              is_roam=True,
              is_rotatelabel=False,
              graph_layout="force",
              graph_edge_length=50,
              graph_gravity=0.2,
              graph_repulsion=50,
              graph_edge_symbol=None,
              graph_edge_symbolsize=10,
              **kwargs):
        kwargs.update(type="graph")
        chart = get_all_options(**kwargs)

        if categories:
            for c in categories:
                self._option.get('legend')[0].get('data').append(c)

        if graph_edge_symbol is None:
            graph_edge_symbol = [None, None]

        self._option.get('series').append({
            "type": "graph",
            "name": name,
            "layout": graph_layout,
            "symbol": chart['symbol'],
            "circular": {
                "rotateLabel": is_rotatelabel
            },
            "force": {
                "repulsion": graph_repulsion,
                "edgeLength": graph_edge_length,
                "gravity": graph_gravity
            },
            "label": chart['label'],
            "lineStyle": chart['line_style'],
            "roam": is_roam,
            "focusNodeAdjacency": is_focusnode,
            "data": nodes,
            "categories": categories,
            "edgeSymbol": graph_edge_symbol,
            "edgeSymbolSize": graph_edge_symbolsize,
            "links":links,
        })
        self._config_components(**kwargs)
====pyecharts.charts.graph.py(file) end====

====pyecharts.charts.heatmap.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class HeatMap(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(HeatMap, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, *args, **kwargs):
        _is_calendar = kwargs.get('is_calendar_heatmap', None) is True
        if _is_calendar:
            name, data = args
        else:
            name, x_axis, y_axis, data = args

        chart = get_all_options(**kwargs)
        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "heatmap",
            "name": name,
            "data": data,
            "label": chart['label'],
            "seriesId": self._option.get('series_id'),
        })

        if _is_calendar:
            self._option.get('toolbox')['show'] = False
            self._option.get('series')[0].update(coordinateSystem='calendar')
            self._option.update(calendar=chart['calendar'])
        else:
            xaxis, yaxis = chart['xy_axis']
            self._option.update(xAxis=xaxis, yAxis=yaxis)
            self._option.get('xAxis')[0].update(
                type='category', data=x_axis, splitArea={"show": True})
            self._option.get('yAxis')[0].update(
                type='category', data=y_axis, splitArea={"show": True})

        self._config_components(**kwargs)
====pyecharts.charts.heatmap.py(file) end====

====pyecharts.charts.kline.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Kline(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Kline, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, x_axis, y_axis, **kwargs):
        kwargs.update(type="candlestick", x_axis=x_axis)
        chart = get_all_options(**kwargs)

        xaxis, yaxis = chart['xy_axis']
        self._option.update(xAxis=xaxis, yAxis=yaxis)
        self._option.get('xAxis')[0].update(scale=True)
        self._option.get('yAxis')[0].update(
            scale=True, splitArea={"show": True})

        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "candlestick",
            "name": name,
            "data": y_axis,
            "markPoint": chart['mark_point'],
            "markLine": chart['mark_line'],
            "seriesId": self._option.get('series_id'),
        })
        self._config_components(**kwargs)
====pyecharts.charts.kline.py(file) end====

====pyecharts.charts.line.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Line(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Line, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, x_axis, y_axis,
              is_symbol_show=True,
              is_smooth=False,
              is_stack=False,
              is_step=False,
              is_fill=False,
              **kwargs):
        assert len(x_axis) == len(y_axis)
        kwargs.update(x_axis=x_axis, type="line")
        chart = get_all_options(**kwargs)

        xaxis, yaxis = chart['xy_axis']
        is_stack = "stack_" + str(self._option['series_id']) if is_stack else ""
        _area_style = {"normal": chart['area_style']} if is_fill else {}
        self._option.update(xAxis=xaxis, yAxis=yaxis)
        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "line",
            "name": name,
            "symbol": chart['symbol'],
            "smooth": is_smooth,
            "step": is_step,
            "stack": is_stack,
            "showSymbol": is_symbol_show,
            "data": y_axis,
            "label": chart['label'],
            "lineStyle": chart['line_style'],
            "areaStyle": _area_style,
            "markPoint": chart['mark_point'],
            "markLine": chart['mark_line'],
            "seriesId": self._option.get('series_id'),
        })
        self._config_components(**kwargs)
====pyecharts.charts.line.py(file) end====

====pyecharts.charts.line3D.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Line3D(Base):

    def __init__(self, title="", subtitle="", **kwargs):
        super(Line3D, self).__init__(title, subtitle, **kwargs)
        self._js_dependencies.add('echartsgl')

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, data,
              grid3d_opacity=1,
              **kwargs):
        kwargs.update(xaxis3d_type='value',
                      yaxis3d_type='value',
                      zaxis3d_type='value')
        chart = get_all_options(**kwargs)

        self._option.get('legend')[0].get('data').append(name)
        self._option.update(
            xAxis3D=chart['xaxis3D'],
            yAxis3D=chart['yaxis3D'],
            zAxis3D=chart['zaxis3D'],
            grid3D=chart['grid3D']
        )

        self._option.get('series').append({
            "type": "line3D",
            "name": name,
            "data": data,
            "label": chart['label'],
            "itemStyle": {"opacity": grid3d_opacity}
        })
        self._config_components(**kwargs)
====pyecharts.charts.line3D.py(file) end====

====pyecharts.charts.liquid.py(file) start====

from pyecharts.base import Base


class Liquid(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Liquid, self).__init__(title, subtitle, **kwargs)
        self._js_dependencies.add('liquidfill')

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, data,
              shape='circle',
              liquid_color=None,
              is_liquid_animation=True,
              is_liquid_outline_show=True):
        _animation_dur, _animation_dur_update = 2000, 1000
        if not is_liquid_animation:
            _animation_dur, _animation_dur_update = 0, 0

        _color = ['#294D99', '#156ACF', '#1598ED', '#45BDFF']
        if liquid_color:
            _color = liquid_color

        _shape = 'circle'
        if shape in ('circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow'):
            _shape = shape

        self._option.get('series').append({
            "type": "liquidFill",
            "name": name,
            "data": data,
            "waveAnimation": is_liquid_animation,
            "animationDuration": _animation_dur,
            "animationDurationUpdate": _animation_dur_update,
            "color": _color,
            "shape": _shape,
            "outline": {
                "show": is_liquid_outline_show
            }
        })
====pyecharts.charts.liquid.py(file) end====

====pyecharts.charts.map.py(file) start====
import sys

from pyecharts.base import Base
from pyecharts.option import get_all_options
from pyecharts.constants import CITY_NAME_PINYIN_MAP

PY2 = sys.version_info[0] == 2


class Map(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Map, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, attr, value,
              is_roam=True,
              maptype='china',
              is_map_symbol_show=True,
              **kwargs):
        assert len(attr) == len(value)
        chart = get_all_options(**kwargs)
        _data = []
        for data in zip(attr, value):
            _name, _value = data
            _data.append({"name": _name, "value": _value})
        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "map",
            "name": name,
            "symbol": chart['symbol'],
            "label": chart['label'],
            "mapType": maptype,
            "data": _data,
            "roam": is_roam,
            "showLegendSymbol": is_map_symbol_show
        })
        name_in_pinyin = CITY_NAME_PINYIN_MAP.get(maptype, maptype)
        self._js_dependencies.add(name_in_pinyin)
        self._config_components(**kwargs)
====pyecharts.charts.map.py(file) end====

====pyecharts.charts.parallel.py(file) start====

from pyecharts.base import Base


class Parallel(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Parallel, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def config(self, schema=None, c_schema=None):
        if schema:
            _schema = [{"dim": i, "name": v} for i, v in enumerate(schema)]
            self._option.update(parallelAxis=_schema)
        if c_schema:
            self._option.update(parallelAxis=c_schema)

    def __add(self, name, data, **kwargs):
        self._option.update(
            parallel={
                "left": "5%",
                "right": "13%",
                "bottom": "10%",
                "top": "20%"
            })
        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "parallel",
            "coordinateSystem": "parallel",
            "name": name,
            "data": data,
        })
        self._config_components(**kwargs)
====pyecharts.charts.parallel.py(file) end====

====pyecharts.charts.pie.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Pie(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Pie, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, attr, value,
              radius=None,
              center=None,
              rosetype=None,
              **kwargs):
        kwargs.update(type="pie")
        chart = get_all_options(**kwargs)
        assert len(attr) == len(value)
        _data = []
        for data in zip(attr, value):
            _name, _value = data
            _data.append({"name": _name, "value": _value})

        _rmin, _rmax = "0%", "75%"
        if radius:
            if len(radius) == 2:
                _rmin, _rmax = ["{}%".format(r) for r in radius]

        _cmin, _cmax = "50%", "50%"
        if center:
            if len(center) == 2:
                _cmin, _cmax = ["{}%".format(c) for c in center]

        if rosetype:
            if rosetype not in ("radius", "area"):
                rosetype = "radius"

        for a in attr:
            self._option.get('legend')[0].get('data').append(a)

        _dlst = self._option.get('legend')[0].get('data')
        _dset = list(set(_dlst))
        _dset.sort(key=_dlst.index)
        self._option.get('legend')[0].update(data=list(_dset))

        self._option.get('series').append({
            "type": "pie",
            "name": name,
            "data": _data,
            "radius": [_rmin, _rmax],
            "center": [_cmin, _cmax],
            "roseType": rosetype,
            "label": chart['label'],
            "seriesId": self._option.get('series_id'),
        })
        self._config_components(**kwargs)
====pyecharts.charts.pie.py(file) end====

====pyecharts.charts.polar.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Polar(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Polar, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, data,
              angle_data=None,
              radius_data=None,
              type='line',
              symbol_size=4,
              start_angle=90,
              rotate_step=0,
              boundary_gap=True,
              is_clockwise=True,
              is_stack=False,
              axis_range=None,
              is_angleaxis_show=True,
              is_radiusaxis_show=True,
              **kwargs):
        chart = get_all_options(**kwargs)
        polar_type = 'value' if type == "line" else "category"
        is_stack = "stack" if is_stack else ""
        self._option.get('legend')[0].get('data').append(name)

        _amin, _amax = None, None
        if axis_range:
            if len(axis_range) == 2:
                _amin, _amax = axis_range
        _area_style = {
            "normal": chart['area_style']
        }
        if kwargs.get('area_color', None) is None:
            _area_style = None

        if type in ("scatter", "line"):
            self._option.get('series').append({
                "type": type,
                "name": name,
                "coordinateSystem": 'polar',
                "symbol": chart['symbol'],
                "symbolSize": symbol_size,
                "data": data,
                "label": chart['label'],
                "areaStyle": _area_style
            })

        elif type == "effectScatter":
            self._option.get('series').append({
                "type": type,
                "name": name,
                "coordinateSystem": 'polar',
                "showEffectOn": "render",
                "rippleEffect": chart['effect'],
                "symbol": chart['symbol'],
                "symbolSize": symbol_size,
                "data": data,
                "label": chart['label'],
            })

        elif type == "barRadius":
            self._option.get('series').append({
                "type": "bar",
                "stack": is_stack,
                "name": name,
                "coordinateSystem": 'polar',
                "data": data,
            })
            self._option.update(angleAxis={})
            self._option.update(
                radiusAxis={
                    "type": polar_type,
                    "data": radius_data,
                    "z": 50,
                })

        elif type == "barAngle":
            self._option.get('series').append({
                "type": "bar",
                "stack": is_stack,
                "name": name,
                "coordinateSystem": 'polar',
                "data": data,
            })
            self._option.update(radiusAxis={})
            self._option.update(
                angleAxis={
                    "type": polar_type,
                    "data": radius_data,
                    "z": 50
                })

        if type not in ("barAngle", "barRadius"):
            self._option.update(
                angleAxis={
                    "show":is_angleaxis_show,
                    "type": polar_type,
                    "data": angle_data,
                    "clockwise": is_clockwise,
                    "startAngle": start_angle,
                    "boundaryGap": boundary_gap,
                    "splitLine": chart['split_line'],
                    "axisLine": chart['axis_line']
                }
            )
            self._option.update(
                radiusAxis={
                    "show": is_radiusaxis_show,
                    "type": polar_type,
                    "data": radius_data,
                    "min": _amin,
                    "max": _amax,
                    "axisLine": chart['axis_line'],
                    "axisLabel": {"rotate": rotate_step}
                }
            )
        self._option.update(polar={})
        self._config_components(**kwargs)
====pyecharts.charts.polar.py(file) end====

====pyecharts.charts.radar.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Radar(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Radar, self).__init__(title, subtitle, **kwargs)

    def config(self, schema=None,
               c_schema=None,
               shape="",
               radar_text_color="#333",
               radar_text_size=12,
               **kwargs):
        chart = get_all_options(**kwargs)
        indicator = []
        if schema:
            for s in schema:
                _name, _max = s
                indicator.append({"name": _name, "max": _max})
        if c_schema:
            indicator = c_schema
        self._option.update(
            radar={
                "indicator": indicator,
                "shape": shape,
                "name": {
                    "textStyle": {
                        "color": radar_text_color,
                        "fontSize": radar_text_size,
                    }},
                "splitLine": chart['split_line'],
                "splitArea": chart['split_area'],
                "axisLine": chart['axis_line']}
        )

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, value, item_color=None, **kwargs):
        kwargs.update(flag=True, type='radar')
        chart = get_all_options(**kwargs)
        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "radar",
            "name": name,
            "data": value,
            "symbol": chart['symbol'],
            "label": chart['label'],
            "itemStyle": {
                "normal": {
                    "color": item_color
                }},
            "lineStyle": chart['line_style'],
            "areaStyle": {
                "normal": chart['area_style']
            },
        })
        self._config_components(**kwargs)
====pyecharts.charts.radar.py(file) end====

====pyecharts.charts.sankey.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Sankey(Base):

    def __init__(self, title="", subtitle="", **kwargs):
        super(Sankey, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, nodes, links,
              sankey_node_width=20,
              sankey_node_gap=8,
              **kwargs):
        chart = get_all_options(**kwargs)
        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "sankey",
            "name": name,
            "layout": None,
            "data": nodes,
            "links": links,
            "nodeWidth": sankey_node_width,
            "nodeGap": sankey_node_gap,
            "label": chart['label'],
            "lineStyle": chart['line_style'],
        })
        self._config_components(**kwargs)
====pyecharts.charts.sankey.py(file) end====

====pyecharts.charts.scatter.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Scatter(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(Scatter, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, x_axis, y_axis, extra_data=None,
              symbol_size=10,
              **kwargs):
        assert len(x_axis) == len(y_axis)
        kwargs.update(type="scatter", x_axis=x_axis)
        chart = get_all_options(**kwargs)

        xaxis, yaxis = chart['xy_axis']
        self._option.update(xAxis=xaxis, yAxis=yaxis)
        self._option.get('legend')[0].get('data').append(name)

        if extra_data:
            _data = [list(z) for z in zip(x_axis, y_axis, extra_data)]
        else:
            _data = [list(z) for z in zip(x_axis, y_axis)]

        self._option.get('series').append({
            "type": "scatter",
            "name": name,
            "symbol": chart['symbol'],
            "symbolSize": symbol_size,
            "data": _data,
            "label": chart['label'],
            "seriesId": self._option.get('series_id'),
        })
        self._config_components(**kwargs)

    def draw(self, path, color=None):
        raise Exception("Not implemented")

====pyecharts.charts.scatter.py(file) end====

====pyecharts.charts.scatter3D.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class Scatter3D(Base):

    def __init__(self, title="", subtitle="", **kwargs):
        super(Scatter3D, self).__init__(title, subtitle, **kwargs)
        self._js_dependencies.add('echartsgl')

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, data,
              grid3d_opacity=1,
              **kwargs):
        kwargs.update(xaxis3d_type='value',
                      yaxis3d_type='value',
                      zaxis3d_type='value')
        chart = get_all_options(**kwargs)

        self._option.get('legend')[0].get('data').append(name)
        self._option.update(
            xAxis3D=chart['xaxis3D'],
            yAxis3D=chart['yaxis3D'],
            zAxis3D=chart['zaxis3D'],
            grid3D=chart['grid3D']
        )

        self._option.get('series').append({
            "type": "scatter3D",
            "name": name,
            "data": data,
            "label": chart['label'],
            "itemStyle": {
                "opacity": grid3d_opacity
            }
        })
        self._config_components(**kwargs)
====pyecharts.charts.scatter3D.py(file) end====

====pyecharts.charts.themeriver.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class ThemeRiver(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(ThemeRiver, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, data, **kwargs):
        chart = get_all_options(**kwargs)
        self._option.get('legend')[0].get('data').extend(name)

        self._option.get('series').append({
            "type": "themeRiver",
            "name": name,
            "data": data,
            "label": chart['label'],
            "seriesId": self._option.get('series_id'),
        })

        self._option.update(singleAxis={"type": "time"})
        self._config_components(**kwargs)
        self._option.get('tooltip').update(trigger='axis')
====pyecharts.charts.themeriver.py(file) end====

====pyecharts.charts.treemap.py(file) start====

from pyecharts.base import Base
from pyecharts.option import get_all_options


class TreeMap(Base):

    def __init__(self, title="", subtitle="", **kwargs):
        super(TreeMap, self).__init__(title, subtitle, **kwargs)

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, data,
              treemap_left_depth=None,
              treemap_drilldown_icon='▶',
              treemap_visible_min=10,
              **kwargs):
        chart = get_all_options(**kwargs)
        self._option.get('legend')[0].get('data').append(name)

        self._option.get('series').append({
            "type": "treemap",
            "name": name,
            "data": data,
            "label": chart['label'],
            "leafDepth": treemap_left_depth,
            "drillDownIcon": treemap_drilldown_icon,
            "visibleMin": treemap_visible_min,
            "seriesId": self._option.get('series_id'),
        })
        self._config_components(**kwargs)
====pyecharts.charts.treemap.py(file) end====

====pyecharts.charts.wordcloud.py(file) start====

from pyecharts.base import Base
from pyecharts.option import gen_color


class WordCloud(Base):
    def __init__(self, title="", subtitle="", **kwargs):
        super(WordCloud, self).__init__(title, subtitle, **kwargs)
        self._js_dependencies.add('wordcloud')

    def add(self, *args, **kwargs):
        self.__add(*args, **kwargs)

    def __add(self, name, attr, value,
              shape="circle",
              word_gap=20,
              word_size_range=None,
              rotate_step=45):
        assert len(attr) == len(value)
        _data = []
        for data in zip(attr, value):
            _name, _value = data
            _data.append({
                "name": _name,
                "value": _value,
                "textStyle": {
                    "normal": {
                        "color": gen_color()
                    }}
            })
        _min, _max = 12, 60
        if word_size_range is not None:
            if len(word_size_range) == 2:
                _min, _max = word_size_range

        _rmin, _rmax = -90, 90
        if shape in ("cardioid", "diamond", "triangle-forward", "triangle", "pentagon", "star"):
            _rmin = _rmax = 0
        else:
            shape = "circle"

        self._option.get('series').append({
            "type": "wordCloud",
            "name": name,
            "shape": shape,
            "rotationRange": [_rmin, _rmax],
            "rotationStep": rotate_step,
            "girdSize": word_gap,
            "sizeRange": [_min, _max],
            "data": _data
        })
====pyecharts.charts.wordcloud.py(file) end====

====pyecharts.constants.py(file) start====
from __future__ import unicode_literals

from browser import ajax
import json


DEFAULT_HOST = 'https://chfw.github.io/jupyter-echarts/echarts'

CONFIGURATION = dict(
    HOST=DEFAULT_HOST
)

DEFAULT_ECHARTS_REGISTRY = DEFAULT_HOST+'/registry.json'
DEFAULT_JS_LIBRARIES = {}
CITY_NAME_PINYIN_MAP = {}


def on_complete(response):
    CONFIG = json.loads(response.text)
    DEFAULT_JS_LIBRARIES.update(CONFIG['FILE_MAP'])
    CITY_NAME_PINYIN_MAP.update(CONFIG['PINYIN_MAP'])


request = ajax.ajax()
request.bind('complete', on_complete)
request.open('GET', DEFAULT_ECHARTS_REGISTRY, False)
request.send()

PAGE_TITLE = "Echarts"


CITY_GEO_COORDS = {
    '阿城': [126.58, 45.32],
    '阿克苏': [80.19, 41.09],
    '阿勒泰': [88.12, 47.50],
    '阿图什': [76.08, 39.42],
    '安达': [125.18, 46.24],
    '安国': [115.20, 38.24],
    '安康': [109.01, 32.41],
    '安陆': [113.41, 31.15],
    '安庆': [117.02, 30.31],
    '安丘': [119.12, 36.25],
    '安顺': [105.55, 26.14],
    '安阳': [114.35, 36.1],
    '鞍山': [122.85, 41.12],
    '澳门': [115.07, 21.33],
    '巴中': [106.43, 31.51],
    '霸州': [116.24, 39.06],
    '白城': [122.50, 45.38],
    '白山': [126.26, 41.56],
    '白银': [104.12, 36.33],
    '百色': [106.36, 23.54],
    '蚌埠': [117.21, 32.56],
    '包头': [110, 40.58],
    '宝鸡': [107.15, 34.38],
    '保定': [115.48, 38.85],
    '保山': [99.10, 25.08],
    '北海': [109.12, 21.49],
    '北京': [116.46, 39.92],
    '北流': [110.21, 22.42],
    '北票': [120.47, 41.48],
    '本溪': [123.73, 41.3],
    '毕节': [105.18, 27.18],
    '滨州': [118.03, 37.36],
    '亳州': [115.47, 33.52],
    '博乐': [82.08, 44.57],
    '沧州': [116.83, 38.33],
    '昌吉': [87.18, 44.02],
    '昌邑': [119.24, 39.52],
    '常德': [111.69, 29.05],
    '常熟': [120.74, 31.64],
    '常州': [119.95, 31.79],
    '巢湖': [117.52, 31.36],
    '朝阳': [120.27, 41.34],
    '潮阳': [116.36, 23.16],
    '潮州': [116.63, 23.68],
    '郴州': [113.02, 25.46],
    '成都': [104.06, 30.67],
    '承德': [117.93, 40.97],
    '澄海': [116.46, 23.28],
    '赤峰': [118.87, 42.28],
    '赤水': [105.42, 28.34],
    '重庆': [106.54, 29.59],
    '崇州': [103.40, 30.39],
    '滁州': [118.18, 32.18],
    '楚雄': [101.32, 25.01],
    '慈溪': [121.15, 30.11],
    '从化': [113.33, 23.33],
    '达川': [107.29, 31.14],
    '大安': [124.18, 45.30],
    '大理': [100.13, 25.34],
    '大连': [121.62, 38.92],
    '大庆': [125.03, 46.58],
    '大石桥': [122.31, 40.37],
    '大同': [113.3, 40.12],
    '大冶': [114.58, 30.06],
    '丹东': [124.37, 40.13],
    '丹江口': [108.30, 32.33],
    '丹阳': [119.32, 32.00],
    '儋州': [109.34, 19.31],
    '当阳': [111.47, 30.50],
    '德惠': [125.42, 44.32],
    '德令哈': [97.23, 37.22],
    '德兴': [117.35, 28.57],
    '德阳': [104.37, 31.13],
    '德州': [116.29, 37.45],
    '登封': [113.02, 34.27],
    '邓州': [112.05, 32.42],
    '定州': [115.00, 38.30],
    '东川': [103.12, 26.06],
    '东港': [124.08, 39.53],
    '东莞': [113.75, 23.04],
    '东胜': [109.59, 39.48],
    '东台': [120.19, 32.51],
    '东阳': [120.14, 29.16],
    '东营': [118.49, 37.46],
    '都江堰': [103.37, 31.01],
    '都匀': [107.31, 26.15],
    '敦化': [128.13, 43.22],
    '敦煌': [94.41, 40.08],
    '峨眉山': [103.29, 29.36],
    '额尔古纳': [120.11, 50.13],
    '鄂尔多斯': [109.781327, 39.608266],
    '鄂州': [114.52, 30.23],
    '恩平': [112.19, 22.12],
    '恩施': [109.29, 30.16],
    '二连浩特': [111.58, 43.38],
    '番禺': [113.22, 22.57],
    '防城港': [108.20, 21.37],
    '肥城': [116.46, 36.14],
    '丰城': [115.48, 28.12],
    '丰南': [118.06, 39.34],
    '丰镇': [113.09, 40.27],
    '凤城': [124.02, 40.28],
    '奉化': [121.24, 29.39],
    '佛山': [113.11, 23.05],
    '涪陵': [107.22, 29.42],
    '福安': [119.39, 27.06],
    '福清': [119.23, 25.42],
    '福州': [119.3, 26.08],
    '抚顺': [123.97, 41.97],
    '阜康': [87.58, 44.09],
    '阜新': [121.39, 42.01],
    '阜阳': [115.48, 32.54],
    '富锦': [132.02, 47.15],
    '富阳': [119.95, 30.07],
    '盖州': [122.21, 40.24],
    '赣州': [114.56, 28.52],
    '高安': [115.22, 28.25],
    '高碑店': [115.51, 39.20],
    '高密': [119.44, 36.22],
    '高明': [112.50, 22.53],
    '高平': [112.55, 35.48],
    '高要': [112.26, 23.02],
    '高邮': [119.27, 32.47],
    '高州': [110.50, 21.54],
    '格尔木': [94.55, 36.26],
    '个旧': [103.09, 23.21],
    '根河': [121.29, 50.48],
    '公主岭': [124.49, 43.31],
    '巩义': [112.58, 34.46],
    '古交': [112.09, 37.54],
    '广汉': [104.15, 30.58],
    '广水': [113.48, 31.37],
    '广元': [105.51, 32.28],
    '广州': [113.23, 23.16],
    '贵池': [117.28, 30.39],
    '贵港': [109.36, 23.06],
    '贵阳': [106.71, 26.57],
    '桂林': [110.28, 25.29],
    '桂平': [110.04, 23.22],
    '哈尔滨': [126.63, 45.75],
    '哈密': [93.28, 42.50],
    '海城': [122.43, 40.51],
    '海口': [110.35, 20.02],
    '海拉尔': [119.39, 49.12],
    '海林': [129.21, 44.35],
    '海伦': [126.57, 47.28],
    '海门': [121.15, 31.89],
    '海宁': [120.42, 30.32],
    '邯郸': [114.47, 36.6],
    '韩城': [110.27, 35.28],
    '汉中': [107.01, 33.04],
    '杭州': [120.19, 30.26],
    '蒿城': [114.50, 38.02],
    '合川': [106.15, 30.02],
    '合肥': [117.27, 31.86],
    '合山': [108.52, 23.47],
    '和龙': [129.00, 42.32],
    '和田': [79.55, 37.09],
    '河池': [108.03, 24.42],
    '河间': [116.05, 38.26],
    '河津': [110.41, 35.35],
    '河源': [114.68, 23.73],
    '菏泽': [115.480656, 35.23375],
    '鹤壁': [114.11, 35.54],
    '鹤岗': [130.16, 47.20],
    '鹤山': [112.57, 22.46],
    '黑河': [127.29, 50.14],
    '衡水': [115.72, 37.72],
    '衡阳': [112.37, 26.53],
    '洪湖': [113.27, 29.48],
    '洪江': [109.59, 27.07],
    '侯马': [111.21, 35.37],
    '呼和浩特': [111.65, 40.82],
    '湖州': [120.1, 30.86],
    '葫芦岛': [120.836932, 40.711052],
    '花都': [113.12, 23.23],
    '华阴': [110.05, 34.34],
    '华蓥': [106.44, 30.26],
    '化州': [110.37, 21.39],
    '桦甸': [126.44, 42.58],
    '怀化': [109.58, 27.33],
    '淮安': [119.15, 33.5],
    '淮北': [116.47, 33.57],
    '淮南': [116.58, 32.37],
    '淮阴': [119.02, 33.36],
    '黄骅': [117.21, 38.21],
    '黄山': [118.18, 29.43],
    '黄石': [115.06, 30.12],
    '黄州': [114.52, 30.27],
    '珲春': [130.22, 42.52],
    '辉县': [113.47, 35.27],
    '惠阳': [114.28, 22.48],
    '惠州': [114.4, 23.09],
    '霍林郭勒': [119.38, 45.32],
    '霍州': [111.42, 36.34],
    '鸡西': [130.57, 45.17],
    '吉安': [114.58, 27.07],
    '吉林': [126.57, 43.87],
    '吉首': [109.43, 28.18],
    '即墨': [120.45, 36.38],
    '集安': [126.11, 41.08],
    '集宁': [113.06, 41.02],
    '济南': [117, 36.65],
    '济宁': [116.59, 35.38],
    '济源': [112.35, 35.04],
    '冀州': [115.33, 37.34],
    '佳木斯': [130.22, 46.47],
    '嘉兴': [120.76, 30.77],
    '嘉峪关': [98.289152, 39.77313],
    '简阳': [104.32, 30.24],
    '建德': [119.16, 29.29],
    '建瓯': [118.20, 27.03],
    '建阳': [118.07, 27.21],
    '江都': [119.32, 32.26],
    '江津': [106.16, 29.18],
    '江门': [113.06, 22.61],
    '江山': [118.37, 28.45],
    '江阴': [120.26, 31.91],
    '江油': [104.42, 31.48],
    '姜堰': [120.08, 32.34],
    '胶南': [119.97, 35.88],
    '胶州': [120.03336, 36.264622],
    '焦作': [113.21, 35.24],
    '蛟河': [127.21, 43.42],
    '揭阳': [116.35, 23.55],
    '介休': [111.55, 37.02],
    '界首': [115.21, 33.15],
    '金昌': [102.188043, 38.520089],
    '金华': [119.64, 29.12],
    '金坛': [119.56, 31.74],
    '津市': [111.52, 29.38],
    '锦州': [121.15, 41.13],
    '晋城': [112.51, 35.30],
    '晋江': [118.35, 24.49],
    '晋州': [115.02, 38.02],
    '荆门': [112.12, 31.02],
    '荆沙': [112.16, 30.18],
    '荆州': [112.239741, 30.335165],
    '井冈山': [114.10, 26.34],
    '景德镇': [117.13, 29.17],
    '景洪': [100.48, 22.01],
    '靖江': [120.17, 32.02],
    '九江': [115.97, 29.71],
    '九台': [125.51, 44.09],
    '酒泉': [98.31, 39.44],
    '句容': [119.16, 31.95],
    '喀什': [75.59, 39.30],
    '开封': [114.35, 34.79],
    '开平': [112.40, 22.22],
    '开原': [124.02, 42.32],
    '开远': [103.13, 23.43],
    '凯里': [107.58, 26.35],
    '克拉玛依': [84.77, 45.59],
    '库尔勒': [86.06, 41.68],
    '奎屯': [84.56, 44.27],
    '昆明': [102.73, 25.04],
    '昆山': [120.95, 31.39],
    '廓坊': [116.42, 39.31],
    '拉萨': [91.11, 29.97],
    '莱芜': [117.67, 36.19],
    '莱西': [120.53, 36.86],
    '莱阳': [120.42, 36.58],
    '莱州': [119.942327, 37.177017],
    '兰溪': [119.28, 29.12],
    '兰州': [103.73, 36.03],
    '阆中': [105.58, 31.36],
    '廊坊': [116.7, 39.53],
    '老河口': [111.40, 32.23],
    '乐昌': [113.21, 25.09],
    '乐陵': [117.12, 37.44],
    '乐平': [117.08, 28.58],
    '乐清': [120.58, 28.08],
    '乐山': [103.44, 29.36],
    '雷州': [110.04, 20.54],
    '耒阳': [112.51, 26.24],
    '冷水江': [111.26, 27.42],
    '冷水滩': [111.35, 26.26],
    '醴陵': [113.30, 27.40],
    '丽水': [119.92, 28.45],
    '利川': [108.56, 30.18],
    '溧阳': [119.48, 31.43],
    '连云港': [119.16, 34.59],
    '连州': [112.23, 24.48],
    '涟源': [111.41, 27.41],
    '廉江': [110.17, 21.37],
    '辽阳': [123.12, 41.16],
    '辽源': [125.09, 42.54],
    '聊城': [115.97, 36.45],
    '林州': [113.49, 36.03],
    '临安': [119.72, 30.23],
    '临川': [116.21, 27.59],
    '临汾': [111.5, 36.08],
    '临海': [121.08, 28.51],
    '临河': [107.22, 40.46],
    '临江': [126.53, 41.49],
    '临清': [115.42, 36.51],
    '临夏': [103.12, 35.37],
    '临湘': [113.27, 29.29],
    '临沂': [118.35, 35.05],
    '赁祥': [106.44, 22.07],
    '灵宝': [110.52, 34.31],
    '凌海': [121.21, 41.10],
    '凌源': [119.22, 41.14],
    '浏阳': [113.37, 28.09],
    '柳州': [109.4, 24.33],
    '六安': [116.28, 31.44],
    '六盘水': [104.50, 26.35],
    '龙海': [117.48, 24.26],
    '龙井': [129.26, 42.46],
    '龙口': [120.21, 37.39],
    '龙泉': [119.08, 28.04],
    '龙岩': [117.01, 25.06],
    '娄底': [111.59, 27.44],
    '泸州': [105.39, 28.91],
    '鹿泉': [114.19, 38.04],
    '潞城': [113.14, 36.21],
    '罗定': [111.33, 22.46],
    '洛阳': [112.44, 34.7],
    '漯河': [114.02, 33.33],
    '麻城': [115.01, 31.10],
    '马鞍山': [118.48, 31.56],
    '满洲里': [117.23, 49.35],
    '茂名': [110.88, 21.68],
    '梅河口': [125.40, 42.32],
    '梅州': [116.1, 24.55],
    '汨罗': [113.03, 28.49],
    '密山': [131.50, 45.32],
    '绵阳': [104.73, 31.48],
    '明光': [117.58, 32.47],
    '牡丹江': [129.58, 44.6],
    '南安': [118.23, 24.57],
    '南昌': [115.89, 28.68],
    '南充': [106.110698, 30.837793],
    '南川': [107.05, 29.10],
    '南宫': [115.23, 37.22],
    '南海': [113.09, 23.01],
    '南京': [118.78, 32.04],
    '南宁': [108.33, 22.84],
    '南平': [118.10, 26.38],
    '南通': [121.05, 32.08],
    '南阳': [112.32, 33.00],
    '讷河': [124.51, 48.29],
    '内江': [105.02, 29.36],
    '宁安': [129.28, 44.21],
    '宁波': [121.56, 29.86],
    '宁德': [119.31, 26.39],
    '攀枝花': [101.718637, 26.582347],
    '盘锦': [122.070714, 41.119997],
    '彭州': [103.57, 30.59],
    '蓬莱': [120.75, 37.8],
    '邳州': [117.59, 34.19],
    '平顶山': [113.29, 33.75],
    '平度': [119.97, 36.77],
    '平湖': [121.01, 30.42],
    '平凉': [106.40, 35.32],
    '萍乡': [113.50, 27.37],
    '泊头': [116.34, 38.04],
    '莆田': [119.01, 24.26],
    '濮阳': [115.01, 35.44],
    '浦圻': [113.51, 29.42],
    '普兰店': [121.58, 39.23],
    '普宁': [116.10, 23.18],
    '七台河': [130.49, 45.48],
    '齐齐哈尔': [123.97, 47.33],
    '启乐': [121.39, 31.48],
    '潜江': [112.53, 30.26],
    '钦州': [108.37, 21.57],
    '秦皇岛': [119.57, 39.95],
    '沁阳': [112.57, 35.05],
    '青岛': [120.33, 36.07],
    '青铜峡': [105.59, 37.56],
    '青州': [118.28, 36.42],
    '清远': [113.01, 23.7],
    '清镇': [106.27, 26.33],
    '邛崃': [103.28, 30.26],
    '琼海': [110.28, 19.14],
    '琼山': [110.21, 19.59],
    '曲阜': [116.58, 35.36],
    '曲靖': [103.79, 25.51],
    '衢州': [118.88, 28.97],
    '泉州': [118.58, 24.93],
    '任丘': [116.07, 38.42],
    '日喀则': [88.51, 29.16],
    '日照': [119.46, 35.42],
    '荣成': [122.41, 37.16],
    '如皋': [120.33, 32.23],
    '汝州': [112.50, 34.09],
    '乳山': [121.52, 36.89],
    '瑞安': [120.38, 27.48],
    '瑞昌': [115.38, 29.40],
    '瑞金': [116.01, 25.53],
    '瑞丽': [97.50, 24.00],
    '三河': [117.04, 39.58],
    '三门峡': [111.19, 34.76],
    '三明': [117.36, 26.13],
    '三水': [112.52, 23.10],
    '三亚': [109.511909, 18.252847],
    '沙河': [114.30, 36.51],
    '厦门': [118.1, 24.46],
    '汕头': [116.69, 23.39],
    '汕尾': [115.375279, 22.786211],
    '商丘': [115.38, 34.26],
    '商州': [109.57, 33.52],
    '上海': [121.48, 31.22],
    '上饶': [117.58, 25.27],
    '上虞': [120.52, 30.01],
    '尚志': [127.55, 45.14],
    '韶关': [113.62, 24.84],
    '韶山': [112.29, 27.54],
    '邵武': [117.29, 27.20],
    '邵阳': [111.28, 27.14],
    '绍兴': [120.58, 30.01],
    '深圳': [114.07, 22.62],
    '深州': [115.32, 38.01],
    '沈阳': [123.38, 41.8],
    '十堰': [110.47, 32.40],
    '石河子': [86.00, 44.18],
    '石家庄': [114.48, 38.03],
    '石狮': [118.38, 24.44],
    '石首': [112.24, 29.43],
    '石嘴山': [106.39, 39.04],
    '寿光': [118.73, 36.86],
    '舒兰': [126.57, 44.24],
    '双城': [126.15, 45.22],
    '双鸭山': [131.11, 46.38],
    '顺德': [113.15, 22.50],
    '朔州': [112.26, 39.19],
    '思茅': [100.58, 22.48],
    '四会': [112.41, 23.21],
    '四平': [124.22, 43.10],
    '松原': [124.49, 45.11],
    '苏州': [120.62, 31.32],
    '宿迁': [118.3, 33.96],
    '宿州': [116.58, 33.38],
    '绥芬河': [131.11, 44.25],
    '绥化': [126.59, 46.38],
    '随州': [113.22, 31.42],
    '遂宁': [105.33, 30.31],
    '塔城': [82.59, 46.46],
    '台北': [121.30, 25.03],
    '台山': [112.48, 22.15],
    '台州': [121.420757, 28.656386],
    '太仓': [121.1, 31.45],
    '太原': [112.53, 37.87],
    '泰安': [117.13, 36.18],
    '泰兴': [120.01, 32.10],
    '泰州': [119.9, 32.49],
    '唐山': [118.02, 39.63],
    '洮南': [122.47, 45.20],
    '滕州': [117.09, 35.06],
    '天津': [117.2, 39.13],
    '天门': [113.10, 30.39],
    '天水': [105.42, 34.37],
    '天长': [118.59, 32.41],
    '铁法': [123.32, 42.28],
    '铁力': [128.01, 46.59],
    '铁岭': [123.51, 42.18],
    '通化': [125.56, 41.43],
    '通辽': [122.16, 43.37],
    '通什': [109.31, 18.46],
    '通州': [121.03, 32.05],
    '同江': [132.30, 47.39],
    '桐乡': [120.32, 30.38],
    '铜川': [109.11, 35.09],
    '铜陵': [117.48, 30.56],
    '铜仁': [109.12, 27.43],
    '图们': [129.51, 42.57],
    '吐鲁番': [89.11, 42.54],
    '瓦房店': [121.979603, 39.627114],
    '畹町': [98.04, 24.06],
    '万县': [108.21, 30.50],
    '万源': [108.03, 32.03],
    '威海': [122.1, 37.5],
    '潍坊': [119.1, 36.62],
    '卫辉': [114.03, 35.24],
    '渭南': [109.5, 34.52],
    '温岭': [121.21, 28.22],
    '温州': [120.65, 28.01],
    '文登': [122.05, 37.2],
    '乌海': [106.48, 39.40],
    '乌兰浩特': [122.03, 46.03],
    '乌鲁木齐': [87.68, 43.77],
    '无锡': [120.29, 31.59],
    '吴川': [110.47, 21.26],
    '吴江': [120.63, 31.16],
    '吴忠': [106.11, 37.59],
    '芜湖': [118.38, 31.33],
    '梧州': [111.20, 23.29],
    '五常': [127.11, 44.55],
    '五大连池': [126.07, 48.38],
    '武安': [114.11, 36.42],
    '武冈': [110.37, 26.43],
    '武汉': [114.31, 30.52],
    '武威': [102.39, 37.56],
    '武穴': [115.33, 29.51],
    '武夷山': [118.02, 27.46],
    '舞钢': [113.30, 33.17],
    '西安': [108.95, 34.27],
    '西昌': [102.16, 27.54],
    '西峰': [107.40, 35.45],
    '西宁': [101.74, 36.56],
    '锡林浩特': [116.03, 43.57],
    '仙桃': [113.27, 30.22],
    '咸宁': [114.17, 29.53],
    '咸阳': [108.72, 34.36],
    '香港': [115.12, 21.23],
    '湘潭': [112.91, 27.87],
    '湘乡': [112.31, 27.44],
    '襄樊': [112.08, 32.02],
    '项城': [114.54, 33.26],
    '萧山': [120.16, 30.09],
    '孝感': [113.54, 30.56],
    '孝义': [111.48, 37.08],
    '忻州': [112.43, 38.24],
    '辛集': [115.12, 37.54],
    '新会': [113.01, 22.32],
    '新乐': [114.41, 38.20],
    '新密': [113.22, 34.31],
    '新民': [122.49, 41.59],
    '新泰': [117.45, 35.54],
    '新乡': [113.52, 35.18],
    '新沂': [118.20, 34.22],
    '新余': [114.56, 27.48],
    '新郑': [113.43, 34.24],
    '信阳': [114.04, 32.07],
    '邢台': [114.48, 37.05],
    '荥阳': [113.21, 34.46],
    '兴城': [120.41, 40.37],
    '兴化': [119.50, 32.56],
    '兴宁': [115.43, 24.09],
    '兴平': [108.29, 34.18],
    '兴义': [104.53, 25.05],
    '徐州': [117.2, 34.26],
    '许昌': [113.49, 34.01],
    '宣威': [104.06, 26.13],
    '宣州': [118.44, 30.57],
    '牙克石': [120.40, 49.17],
    '雅安': [102.59, 29.59],
    '烟台': [121.39, 37.52],
    '延安': [109.47, 36.6],
    '延吉': [129.30, 42.54],
    '盐城': [120.13, 33.38],
    '盐在': [120.08, 33.22],
    '兖州': [116.49, 35.32],
    '偃师': [112.47, 34.43],
    '扬中': [119.49, 32.14],
    '扬州': [119.42, 32.39],
    '阳春': [111.48, 22.10],
    '阳江': [111.95, 21.85],
    '阳泉': [113.57, 37.85],
    '伊春': [128.56, 47.42],
    '伊宁': [81.20, 43.55],
    '仪征': [119.10, 32.16],
    '宜宾': [104.56, 29.77],
    '宜昌': [111.3, 30.7],
    '宜城': [112.15, 31.42],
    '宜春': [114.23, 27.47],
    '宜兴': [119.82, 31.36],
    '宜州': [108.40, 24.28],
    '义马': [111.55, 34.43],
    '义乌': [120.06, 29.32],
    '益阳': [112.20, 28.36],
    '银川': [106.27, 38.47],
    '应城': [113.33, 30.57],
    '英德': [113.22, 24.10],
    '鹰潭': [117.03, 28.14],
    '营口': [122.18, 40.65],
    '永安': [117.23, 25.58],
    '永川': [105.53, 29.23],
    '永济': [110.27, 34.52],
    '永康': [120.01, 29.54],
    '永州': [111.37, 26.13],
    '余杭': [120.18, 30.26],
    '余姚': [121.10, 30.02],
    '愉树': [126.32, 44.49],
    '榆次': [112.43, 37.41],
    '榆林': [109.47, 38.18],
    '禹城': [116.39, 36.56],
    '禹州': [113.28, 34.09],
    '玉林': [110.09, 22.38],
    '玉门': [97.35, 39.49],
    '玉溪': [102.52, 24.35],
    '沅江': [112.22, 28.50],
    '原平': [112.42, 38.43],
    '岳阳': [113.09, 29.37],
    '云浮': [112.02, 22.93],
    '运城': [110.59, 35.02],
    '枣阳': [112.44, 32.07],
    '枣庄': [117.57, 34.86],
    '增城': [113.49, 23.18],
    '扎兰屯': [122.47, 48.00],
    '湛江': [110.359377, 21.270708],
    '张家港': [120.555821, 31.875428],
    '张家界': [110.479191, 29.117096],
    '张家口': [114.87, 40.82],
    '张掖': [100.26, 38.56],
    '章丘': [117.53, 36.72],
    '漳平': [117.24, 25.17],
    '漳州': [117.39, 24.31],
    '樟树': [115.32, 28.03],
    '长春': [125.35, 43.88],
    '长葛': [113.47, 34.12],
    '长乐': [119.31, 25.58],
    '长沙': [113, 28.21],
    '长治': [113.08, 36.18],
    '招远': [120.38, 37.35],
    '昭通': [103.42, 27.20],
    '肇东': [125.58, 46.04],
    '肇庆': [112.44, 23.05],
    '镇江': [119.44, 32.2],
    '郑州': [113.65, 34.76],
    '枝城': [111.27, 30.23],
    '中山': [113.38, 22.52],
    '钟祥': [112.34, 31.10],
    '舟山': [122.207216, 29.985295],
    '周口': [114.38, 33.37],
    '株洲': [113.16, 27.83],
    '珠海': [113.52, 22.3],
    '诸城': [119.24, 35.59],
    '诸暨': [120.23, 29.71],
    '驻马店': [114.01, 32.58],
    '庄河': [122.58, 39.41],
    '涿州': [115.59, 39.29],
    '资兴': [113.13, 25.58],
    '资阳': [104.38, 30.09],
    '淄博': [118.05, 36.78],
    '自贡': [104.778442, 29.33903],
    '邹城': [116.58, 35.24],
    '遵化': [117.58, 40.11],
    '遵义': [106.9, 27.7],
    '北京市': [116.4, 39.9],
    '天安门': [116.38, 39.9],
    '东城区': [116.42, 39.93],
    '西城区': [116.37, 39.92],
    '崇文区': [116.43, 39.88],
    '宣武区': [116.35, 39.87],
    '丰台区': [116.28, 39.85],
    '石景山区': [116.22, 39.9],
    '海淀区': [116.3, 39.95],
    '门头沟区': [116.1, 39.93],
    '房山区': [116.13, 39.75],
    '通州区': [116.65, 39.92],
    '顺义区': [116.65, 40.13],
    '昌平区': [116.23, 40.22],
    '大兴区': [116.33, 39.73],
    '怀柔区': [116.63, 40.32],
    '平谷区': [117.12, 40.13],
    '密云县': [116.83, 40.37],
    '延庆县': [115.97, 40.45],
    '天津市': [117.2, 39.12],
    '河西区': [117.22, 39.12],
    '南开区': [117.15, 39.13],
    '河北区': [117.18, 39.15],
    '红桥区': [117.15, 39.17],
    '塘沽区': [117.65, 39.02],
    '汉沽区': [117.8, 39.25],
    '大港区': [117.45, 38.83],
    '东丽区': [117.3, 39.08],
    '西青区': [117.0, 39.13],
    '津南区': [117.38, 38.98],
    '北辰区': [117.13, 39.22],
    '武清区': [117.03, 39.38],
    '宝坻区': [117.3, 39.72],
    '滨海新区': [117.68, 39.03],
    '宁河县': [117.82, 39.33],
    '静海县': [116.92, 38.93],
    '蓟县': [117.4, 40.05],
    '石家庄市': [114.52, 38.05],
    '井陉矿区': [114.05, 38.08],
    '裕华区': [114.52, 38.02],
    '井陉县': [114.13, 38.03],
    '正定县': [114.57, 38.15],
    '栾城县': [114.65, 37.88],
    '行唐县': [114.55, 38.43],
    '灵寿县': [114.37, 38.3],
    '高邑县': [114.6, 37.6],
    '深泽县': [115.2, 38.18],
    '赞皇县': [114.38, 37.67],
    '无极县': [114.97, 38.18],
    '平山县': [114.2, 38.25],
    '元氏县': [114.52, 37.75],
    '赵县': [114.77, 37.75],
    '辛集市': [115.22, 37.92],
    '藁城市': [114.83, 38.03],
    '晋州市': [115.03, 38.03],
    '新乐市': [114.68, 38.35],
    '鹿泉市': [114.3, 38.08],
    '唐山市': [118.2, 39.63],
    '路南区': [118.17, 39.63],
    '路北区': [118.22, 39.63],
    '古冶区': [118.42, 39.73],
    '开平区': [118.27, 39.68],
    '丰南区': [118.1, 39.57],
    '丰润区': [118.17, 39.83],
    '滦县': [118.7, 39.75],
    '滦南县': [118.68, 39.5],
    '乐亭县': [118.9, 39.42],
    '迁西县': [118.32, 40.15],
    '玉田县': [117.73, 39.88],
    '唐海县': [118.45, 39.27],
    '遵化市': [117.95, 40.18],
    '迁安市': [118.7, 40.02],
    '秦皇岛市': [119.6, 39.93],
    '海港区': [119.6, 39.93],
    '山海关区': [119.77, 40.0],
    '北戴河区': [119.48, 39.83],
    '青龙满族自治县': [118.95, 40.4],
    '昌黎县': [119.17, 39.7],
    '抚宁县': [119.23, 39.88],
    '卢龙县': [118.87, 39.88],
    '邯郸市': [114.48, 36.62],
    '邯山区': [114.48, 36.6],
    '丛台区': [114.48, 36.63],
    '复兴区': [114.45, 36.63],
    '峰峰矿区': [114.2, 36.42],
    '邯郸县': [114.53, 36.6],
    '临漳县': [114.62, 36.35],
    '成安县': [114.68, 36.43],
    '大名县': [115.15, 36.28],
    '涉县': [113.67, 36.57],
    '磁县': [114.37, 36.35],
    '肥乡县': [114.8, 36.55],
    '永年县': [114.48, 36.78],
    '邱县': [115.17, 36.82],
    '鸡泽县': [114.87, 36.92],
    '广平县': [114.93, 36.48],
    '馆陶县': [115.3, 36.53],
    '魏县': [114.93, 36.37],
    '曲周县': [114.95, 36.78],
    '武安市': [114.2, 36.7],
    '邢台市': [114.48, 37.07],
    '邢台县': [114.5, 37.08],
    '临城县': [114.5, 37.43],
    '内丘县': [114.52, 37.3],
    '柏乡县': [114.68, 37.5],
    '隆尧县': [114.77, 37.35],
    '任县': [114.68, 37.13],
    '南和县': [114.68, 37.0],
    '宁晋县': [114.92, 37.62],
    '巨鹿县': [115.03, 37.22],
    '新河县': [115.25, 37.53],
    '广宗县': [115.15, 37.07],
    '平乡县': [115.03, 37.07],
    '威县': [115.25, 36.98],
    '清河县': [115.67, 37.07],
    '临西县': [115.5, 36.85],
    '南宫市': [115.38, 37.35],
    '沙河市': [114.5, 36.85],
    '保定市': [115.47, 38.87],
    '北市区': [115.48, 38.87],
    '南市区': [115.5, 38.85],
    '满城县': [115.32, 38.95],
    '清苑县': [115.48, 38.77],
    '涞水县': [115.72, 39.4],
    '阜平县': [114.18, 38.85],
    '徐水县': [115.65, 39.02],
    '定兴县': [115.77, 39.27],
    '唐县': [114.98, 38.75],
    '高阳县': [115.78, 38.68],
    '容城县': [115.87, 39.05],
    '涞源县': [114.68, 39.35],
    '望都县': [115.15, 38.72],
    '安新县': [115.93, 38.92],
    '易县': [115.5, 39.35],
    '曲阳县': [114.7, 38.62],
    '蠡县': [115.57, 38.48],
    '顺平县': [115.13, 38.83],
    '博野县': [115.47, 38.45],
    '雄县': [116.1, 38.98],
    '涿州市': [115.97, 39.48],
    '定州市': [114.97, 38.52],
    '安国市': [115.32, 38.42],
    '高碑店市': [115.85, 39.33],
    '张家口市': [114.88, 40.82],
    '宣化区': [115.05, 40.6],
    '下花园区': [115.27, 40.48],
    '宣化县': [115.02, 40.55],
    '张北县': [114.7, 41.15],
    '康保县': [114.62, 41.85],
    '沽源县': [115.7, 41.67],
    '尚义县': [113.97, 41.08],
    '蔚县': [114.57, 39.85],
    '阳原县': [114.17, 40.12],
    '怀安县': [114.42, 40.67],
    '万全县': [114.72, 40.75],
    '怀来县': [115.52, 40.4],
    '涿鹿县': [115.22, 40.38],
    '赤城县': [115.83, 40.92],
    '崇礼县': [115.27, 40.97],
    '承德市': [117.93, 40.97],
    '双滦区': [117.78, 40.95],
    '鹰手营子矿区': [117.65, 40.55],
    '承德县': [118.17, 40.77],
    '兴隆县': [117.52, 40.43],
    '平泉县': [118.68, 41.0],
    '滦平县': [117.33, 40.93],
    '隆化县': [117.72, 41.32],
    '丰宁满族自治县': [116.65, 41.2],
    '宽城满族自治县': [118.48, 40.6],
    '围场满族蒙古族自治县': [117.75, 41.93],
    '沧州市': [116.83, 38.3],
    '运河区': [116.85, 38.32],
    '沧县': [116.87, 38.3],
    '青县': [116.82, 38.58],
    '东光县': [116.53, 37.88],
    '海兴县': [117.48, 38.13],
    '盐山县': [117.22, 38.05],
    '肃宁县': [115.83, 38.43],
    '南皮县': [116.7, 38.03],
    '吴桥县': [116.38, 37.62],
    '献县': [116.12, 38.18],
    '孟村回族自治县': [117.1, 38.07],
    '泊头市': [116.57, 38.07],
    '任丘市': [116.1, 38.72],
    '黄骅市': [117.35, 38.37],
    '河间市': [116.08, 38.43],
    '廊坊市': [116.7, 39.52],
    '安次区': [116.68, 39.52],
    '广阳区': [116.72, 39.53],
    '固安县': [116.3, 39.43],
    '永清县': [116.5, 39.32],
    '香河县': [117.0, 39.77],
    '大城县': [116.63, 38.7],
    '文安县': [116.47, 38.87],
    '大厂回族自治县': [116.98, 39.88],
    '霸州市': [116.4, 39.1],
    '三河市': [117.07, 39.98],
    '衡水市': [115.68, 37.73],
    '桃城区': [115.68, 37.73],
    '枣强县': [115.72, 37.52],
    '武邑县': [115.88, 37.82],
    '武强县': [115.98, 38.03],
    '饶阳县': [115.73, 38.23],
    '安平县': [115.52, 38.23],
    '故城县': [115.97, 37.35],
    '景县': [116.27, 37.7],
    '阜城县': [116.15, 37.87],
    '冀州市': [115.57, 37.57],
    '深州市': [115.55, 38.02],
    '太原市': [112.55, 37.87],
    '小店区': [112.57, 37.73],
    '迎泽区': [112.57, 37.87],
    '杏花岭区': [112.57, 37.88],
    '尖草坪区': [112.48, 37.93],
    '万柏林区': [112.52, 37.87],
    '晋源区': [112.48, 37.73],
    '清徐县': [112.35, 37.6],
    '阳曲县': [112.67, 38.07],
    '娄烦县': [111.78, 38.07],
    '古交市': [112.17, 37.92],
    '大同市': [113.3, 40.08],
    '南郊区': [113.13, 40.0],
    '新荣区': [113.15, 40.27],
    '阳高县': [113.75, 40.37],
    '天镇县': [114.08, 40.42],
    '广灵县': [114.28, 39.77],
    '灵丘县': [114.23, 39.43],
    '浑源县': [113.68, 39.7],
    '左云县': [112.7, 40.0],
    '大同县': [113.6, 40.03],
    '阳泉市': [113.57, 37.85],
    '平定县': [113.62, 37.8],
    '盂县': [113.4, 38.08],
    '长治市': [113.12, 36.2],
    '长治县': [113.03, 36.05],
    '襄垣县': [113.05, 36.53],
    '屯留县': [112.88, 36.32],
    '平顺县': [113.43, 36.2],
    '黎城县': [113.38, 36.5],
    '壶关县': [113.2, 36.12],
    '长子县': [112.87, 36.12],
    '武乡县': [112.85, 36.83],
    '沁县': [112.7, 36.75],
    '沁源县': [112.33, 36.5],
    '潞城市': [113.22, 36.33],
    '晋城市': [112.83, 35.5],
    '沁水县': [112.18, 35.68],
    '阳城县': [112.42, 35.48],
    '陵川县': [113.27, 35.78],
    '泽州县': [112.83, 35.5],
    '高平市': [112.92, 35.8],
    '朔州市': [112.43, 39.33],
    '朔城区': [112.43, 39.33],
    '山阴县': [112.82, 39.52],
    '应县': [113.18, 39.55],
    '右玉县': [112.47, 39.98],
    '怀仁县': [113.08, 39.83],
    '晋中市': [112.75, 37.68],
    '榆次区': [112.75, 37.68],
    '榆社县': [112.97, 37.07],
    '左权县': [113.37, 37.07],
    '和顺县': [113.57, 37.33],
    '昔阳县': [113.7, 37.62],
    '寿阳县': [113.18, 37.88],
    '太谷县': [112.55, 37.42],
    '祁县': [112.33, 37.35],
    '平遥县': [112.17, 37.18],
    '灵石县': [111.77, 36.85],
    '介休市': [111.92, 37.03],
    '运城市': [110.98, 35.02],
    '盐湖区': [110.98, 35.02],
    '临猗县': [110.77, 35.15],
    '万荣县': [110.83, 35.42],
    '闻喜县': [111.22, 35.35],
    '稷山县': [110.97, 35.6],
    '新绛县': [111.22, 35.62],
    '绛县': [111.57, 35.48],
    '垣曲县': [111.67, 35.3],
    '夏县': [111.22, 35.15],
    '平陆县': [111.22, 34.83],
    '芮城县': [110.68, 34.7],
    '河津市': [110.7, 35.6],
    '忻州市': [112.73, 38.42],
    '忻府区': [112.73, 38.42],
    '定襄县': [112.95, 38.48],
    '五台县': [113.25, 38.73],
    '代县': [112.95, 39.07],
    '繁峙县': [113.25, 39.18],
    '宁武县': [112.3, 39.0],
    '静乐县': [111.93, 38.37],
    '神池县': [112.2, 39.08],
    '五寨县': [111.85, 38.9],
    '岢岚县': [111.57, 38.7],
    '河曲县': [111.13, 39.38],
    '偏关县': [111.5, 39.43],
    '原平市': [112.7, 38.73],
    '临汾市': [111.52, 36.08],
    '尧都区': [111.52, 36.08],
    '曲沃县': [111.47, 35.63],
    '翼城县': [111.72, 35.73],
    '襄汾县': [111.43, 35.88],
    '洪洞县': [111.67, 36.25],
    '古县': [111.92, 36.27],
    '安泽县': [112.25, 36.15],
    '浮山县': [111.83, 35.97],
    '吉县': [110.68, 36.1],
    '乡宁县': [110.83, 35.97],
    '大宁县': [110.75, 36.47],
    '隰县': [110.93, 36.7],
    '永和县': [110.63, 36.77],
    '蒲县': [111.08, 36.42],
    '汾西县': [111.57, 36.65],
    '侯马市': [111.35, 35.62],
    '霍州市': [111.72, 36.57],
    '吕梁市': [111.13, 37.52],
    '离石区': [111.13, 37.52],
    '文水县': [112.02, 37.43],
    '交城县': [112.15, 37.55],
    '兴县': [111.12, 38.47],
    '临县': [110.98, 37.95],
    '柳林县': [110.9, 37.43],
    '石楼县': [110.83, 37.0],
    '岚县': [111.67, 38.28],
    '方山县': [111.23, 37.88],
    '中阳县': [111.18, 37.33],
    '交口县': [111.2, 36.97],
    '孝义市': [111.77, 37.15],
    '汾阳市': [111.78, 37.27],
    '呼和浩特市': [111.73, 40.83],
    '回民区': [111.6, 40.8],
    '玉泉区': [111.67, 40.75],
    '赛罕区': [111.68, 40.8],
    '土默特左旗': [111.13, 40.72],
    '托克托县': [111.18, 40.27],
    '和林格尔县': [111.82, 40.38],
    '清水河县': [111.68, 39.92],
    '武川县': [111.45, 41.08],
    '包头市': [109.83, 40.65],
    '东河区': [110.02, 40.58],
    '昆都仑区': [109.83, 40.63],
    '石拐区': [110.27, 40.68],
    '九原区': [109.97, 40.6],
    '土默特右旗': [110.52, 40.57],
    '固阳县': [110.05, 41.03],
    '达尔罕茂明安联合旗': [110.43, 41.7],
    '乌海市': [106.82, 39.67],
    '海勃湾区': [106.83, 39.7],
    '海南区': [106.88, 39.43],
    '乌达区': [106.7, 39.5],
    '赤峰市': [118.92, 42.27],
    '红山区': [118.97, 42.28],
    '元宝山区': [119.28, 42.03],
    '松山区': [118.92, 42.28],
    '阿鲁科尔沁旗': [120.08, 43.88],
    '巴林左旗': [119.38, 43.98],
    '巴林右旗': [118.67, 43.52],
    '林西县': [118.05, 43.6],
    '克什克腾旗': [117.53, 43.25],
    '翁牛特旗': [119.02, 42.93],
    '喀喇沁旗': [118.7, 41.93],
    '宁城县': [119.33, 41.6],
    '敖汉旗': [119.9, 42.28],
    '通辽市': [122.27, 43.62],
    '科尔沁区': [122.27, 43.62],
    '科尔沁左翼中旗': [123.32, 44.13],
    '科尔沁左翼后旗': [122.35, 42.95],
    '开鲁县': [121.3, 43.6],
    '库伦旗': [121.77, 42.73],
    '奈曼旗': [120.65, 42.85],
    '扎鲁特旗': [120.92, 44.55],
    '霍林郭勒市': [119.65, 45.53],
    '鄂尔多斯市': [109.8, 39.62],
    '东胜区': [110.0, 39.82],
    '达拉特旗': [110.03, 40.4],
    '准格尔旗': [111.23, 39.87],
    '鄂托克前旗': [107.48, 38.18],
    '鄂托克旗': [107.98, 39.1],
    '杭锦旗': [108.72, 39.83],
    '乌审旗': [108.85, 38.6],
    '伊金霍洛旗': [109.73, 39.57],
    '呼伦贝尔市': [119.77, 49.22],
    '海拉尔区': [119.77, 49.22],
    '阿荣旗': [123.47, 48.13],
    '鄂伦春自治旗': [123.72, 50.58],
    '鄂温克族自治旗': [119.75, 49.13],
    '陈巴尔虎旗': [119.43, 49.32],
    '新巴尔虎左旗': [118.27, 48.22],
    '新巴尔虎右旗': [116.82, 48.67],
    '满洲里市': [117.45, 49.58],
    '牙克石市': [120.73, 49.28],
    '扎兰屯市': [122.75, 47.98],
    '额尔古纳市': [120.18, 50.23],
    '根河市': [121.52, 50.78],
    '巴彦淖尔市': [107.42, 40.75],
    '临河区': [107.4, 40.75],
    '五原县': [108.27, 41.1],
    '磴口县': [107.02, 40.33],
    '乌拉特前旗': [108.65, 40.72],
    '乌拉特中旗': [108.52, 41.57],
    '乌拉特后旗': [107.07, 41.1],
    '杭锦后旗': [107.15, 40.88],
    '乌兰察布市': [113.12, 40.98],
    '集宁区': [113.1, 41.03],
    '卓资县': [112.57, 40.9],
    '化德县': [114.0, 41.9],
    '商都县': [113.53, 41.55],
    '兴和县': [113.88, 40.88],
    '凉城县': [112.48, 40.53],
    '察哈尔右翼前旗': [113.22, 40.78],
    '察哈尔右翼中旗': [112.63, 41.27],
    '察哈尔右翼后旗': [113.18, 41.45],
    '四子王旗': [111.7, 41.52],
    '丰镇市': [113.15, 40.43],
    '兴安盟': [122.05, 46.08],
    '乌兰浩特市': [122.05, 46.08],
    '阿尔山市': [119.93, 47.18],
    '科尔沁右翼前旗': [121.92, 46.07],
    '科尔沁右翼中旗': [121.47, 45.05],
    '扎赉特旗': [122.9, 46.73],
    '突泉县': [121.57, 45.38],
    '锡林郭勒盟': [116.07, 43.95],
    '二连浩特市': [111.98, 43.65],
    '锡林浩特市': [116.07, 43.93],
    '阿巴嘎旗': [114.97, 44.02],
    '苏尼特左旗': [113.63, 43.85],
    '苏尼特右旗': [112.65, 42.75],
    '东乌珠穆沁旗': [116.97, 45.52],
    '西乌珠穆沁旗': [117.6, 44.58],
    '太仆寺旗': [115.28, 41.9],
    '镶黄旗': [113.83, 42.23],
    '正镶白旗': [115.0, 42.3],
    '正蓝旗': [116.0, 42.25],
    '多伦县': [116.47, 42.18],
    '阿拉善盟': [105.67, 38.83],
    '阿拉善左旗': [105.67, 38.83],
    '阿拉善右旗': [101.68, 39.2],
    '额济纳旗': [101.07, 41.97],
    '沈阳市': [123.43, 41.8],
    '和平区': [123.4, 41.78],
    '沈河区': [123.45, 41.8],
    '大东区': [123.47, 41.8],
    '皇姑区': [123.42, 41.82],
    '铁西区': [123.35, 41.8],
    '苏家屯区': [123.33, 41.67],
    '东陵区': [123.47, 41.77],
    '新城子区': [123.52, 42.05],
    '于洪区': [123.3, 41.78],
    '辽中县': [122.72, 41.52],
    '康平县': [123.35, 42.75],
    '法库县': [123.4, 42.5],
    '新民市': [122.82, 42.0],
    '大连市': [121.62, 38.92],
    '中山区': [121.63, 38.92],
    '西岗区': [121.6, 38.92],
    '沙河口区': [121.58, 38.9],
    '甘井子区': [121.57, 38.95],
    '旅顺口区': [121.27, 38.82],
    '金州区': [121.7, 39.1],
    '长海县': [122.58, 39.27],
    '瓦房店市': [122.0, 39.62],
    '普兰店市': [121.95, 39.4],
    '庄河市': [122.98, 39.7],
    '鞍山市': [122.98, 41.1],
    '立山区': [123.0, 41.15],
    '千山区': [122.97, 41.07],
    '台安县': [122.42, 41.38],
    '岫岩满族自治县': [123.28, 40.28],
    '海城市': [122.7, 40.88],
    '抚顺市': [123.98, 41.88],
    '新抚区': [123.88, 41.87],
    '东洲区': [124.02, 41.85],
    '望花区': [123.78, 41.85],
    '顺城区': [123.93, 41.88],
    '抚顺县': [123.9, 41.88],
    '新宾满族自治县': [125.03, 41.73],
    '清原满族自治县': [124.92, 42.1],
    '本溪市': [123.77, 41.3],
    '平山区': [123.77, 41.3],
    '溪湖区': [123.77, 41.33],
    '明山区': [123.82, 41.3],
    '南芬区': [123.73, 41.1],
    '本溪满族自治县': [124.12, 41.3],
    '桓仁满族自治县': [125.35, 41.27],
    '丹东市': [124.38, 40.13],
    '元宝区': [124.38, 40.13],
    '振兴区': [124.35, 40.08],
    '振安区': [124.42, 40.17],
    '宽甸满族自治县': [124.78, 40.73],
    '东港市': [124.15, 39.87],
    '凤城市': [124.07, 40.45],
    '锦州市': [121.13, 41.1],
    '古塔区': [121.12, 41.13],
    '凌河区': [121.15, 41.12],
    '太和区': [121.1, 41.1],
    '黑山县': [122.12, 41.7],
    '义县': [121.23, 41.53],
    '凌海市': [121.35, 41.17],
    '营口市': [122.23, 40.67],
    '站前区': [122.27, 40.68],
    '西市区': [122.22, 40.67],
    '鲅鱼圈区': [122.12, 40.27],
    '老边区': [122.37, 40.67],
    '盖州市': [122.35, 40.4],
    '大石桥市': [122.5, 40.65],
    '阜新市': [121.67, 42.02],
    '海州区': [121.65, 42.02],
    '太平区': [121.67, 42.02],
    '清河门区': [121.42, 41.75],
    '细河区': [121.68, 42.03],
    '阜新蒙古族自治县': [121.75, 42.07],
    '彰武县': [122.53, 42.38],
    '辽阳市': [123.17, 41.27],
    '白塔区': [123.17, 41.27],
    '文圣区': [123.18, 41.27],
    '宏伟区': [123.2, 41.2],
    '弓长岭区': [123.45, 41.13],
    '太子河区': [123.18, 41.25],
    '辽阳县': [123.07, 41.22],
    '灯塔市': [123.33, 41.42],
    '盘锦市': [122.07, 41.12],
    '双台子区': [122.05, 41.2],
    '兴隆台区': [122.07, 41.12],
    '大洼县': [122.07, 40.98],
    '盘山县': [122.02, 41.25],
    '铁岭市': [123.83, 42.28],
    '银州区': [123.85, 42.28],
    '铁岭县': [123.83, 42.3],
    '西丰县': [124.72, 42.73],
    '昌图县': [124.1, 42.78],
    '调兵山市': [123.55, 42.47],
    '开原市': [124.03, 42.55],
    '朝阳市': [120.45, 41.57],
    '双塔区': [120.45, 41.57],
    '龙城区': [120.43, 41.6],
    '朝阳县': [120.47, 41.58],
    '建平县': [119.63, 41.4],
    '北票市': [120.77, 41.8],
    '凌源市': [119.4, 41.25],
    '葫芦岛市': [120.83, 40.72],
    '连山区': [120.87, 40.77],
    '龙港区': [120.93, 40.72],
    '南票区': [120.75, 41.1],
    '绥中县': [120.33, 40.32],
    '建昌县': [119.8, 40.82],
    '兴城市': [120.72, 40.62],
    '长春市': [125.32, 43.9],
    '南关区': [125.33, 43.87],
    '宽城区': [125.32, 43.92],
    '朝阳区': [125.28, 43.83],
    '二道区': [125.37, 43.87],
    '绿园区': [125.25, 43.88],
    '双阳区': [125.67, 43.52],
    '农安县': [125.18, 44.43],
    '九台市': [125.83, 44.15],
    '榆树市': [126.55, 44.82],
    '德惠市': [125.7, 44.53],
    '吉林市': [126.55, 43.83],
    '昌邑区': [126.57, 43.88],
    '龙潭区': [126.57, 43.92],
    '船营区': [126.53, 43.83],
    '丰满区': [126.57, 43.82],
    '永吉县': [126.5, 43.67],
    '蛟河市': [127.33, 43.72],
    '桦甸市': [126.73, 42.97],
    '舒兰市': [126.95, 44.42],
    '磐石市': [126.05, 42.95],
    '四平市': [124.35, 43.17],
    '铁东区': [124.38, 43.17],
    '梨树县': [124.33, 43.32],
    '伊通满族自治县': [125.3, 43.35],
    '公主岭市': [124.82, 43.5],
    '双辽市': [123.5, 43.52],
    '辽源市': [125.13, 42.88],
    '龙山区': [125.12, 42.9],
    '西安区': [125.15, 42.92],
    '东丰县': [125.53, 42.68],
    '东辽县': [125.0, 42.92],
    '通化市': [125.93, 41.73],
    '东昌区': [125.95, 41.73],
    '二道江区': [126.03, 41.77],
    '通化县': [125.75, 41.68],
    '辉南县': [126.03, 42.68],
    '柳河县': [125.73, 42.28],
    '梅河口市': [125.68, 42.53],
    '集安市': [126.18, 41.12],
    '白山市': [126.42, 41.93],
    '八道江区': [126.4, 41.93],
    '抚松县': [127.28, 42.33],
    '靖宇县': [126.8, 42.4],
    '长白朝鲜族自治县': [128.2, 41.42],
    '临江市': [126.9, 41.8],
    '松原市': [124.82, 45.13],
    '宁江区': [124.8, 45.17],
    '长岭县': [123.98, 44.28],
    '乾安县': [124.02, 45.02],
    '扶余县': [126.02, 44.98],
    '白城市': [122.83, 45.62],
    '洮北区': [122.85, 45.62],
    '镇赉县': [123.2, 45.85],
    '通榆县': [123.08, 44.82],
    '洮南市': [122.78, 45.33],
    '大安市': [124.28, 45.5],
    '延边朝鲜族自治州': [129.5, 42.88],
    '延吉市': [129.5, 42.88],
    '图们市': [129.83, 42.97],
    '敦化市': [128.23, 43.37],
    '珲春市': [130.37, 42.87],
    '龙井市': [129.42, 42.77],
    '和龙市': [129.0, 42.53],
    '汪清县': [129.75, 43.32],
    '安图县': [128.9, 43.12],
    '哈尔滨市': [126.53, 45.8],
    '道里区': [126.62, 45.77],
    '南岗区': [126.68, 45.77],
    '道外区': [126.65, 45.78],
    '香坊区': [126.68, 45.72],
    '平房区': [126.62, 45.62],
    '松北区': [126.55, 45.8],
    '呼兰区': [126.58, 45.9],
    '依兰县': [129.55, 46.32],
    '方正县': [128.83, 45.83],
    '宾县': [127.48, 45.75],
    '巴彦县': [127.4, 46.08],
    '木兰县': [128.03, 45.95],
    '通河县': [128.75, 45.97],
    '延寿县': [128.33, 45.45],
    '双城市': [126.32, 45.37],
    '尚志市': [127.95, 45.22],
    '五常市': [127.15, 44.92],
    '齐齐哈尔市': [123.95, 47.33],
    '龙沙区': [123.95, 47.32],
    '建华区': [123.95, 47.35],
    '铁锋区': [123.98, 47.35],
    '昂昂溪区': [123.8, 47.15],
    '富拉尔基区': [123.62, 47.2],
    '龙江县': [123.18, 47.33],
    '依安县': [125.3, 47.88],
    '泰来县': [123.42, 46.4],
    '甘南县': [123.5, 47.92],
    '富裕县': [124.47, 47.82],
    '克山县': [125.87, 48.03],
    '克东县': [126.25, 48.03],
    '拜泉县': [126.08, 47.6],
    '讷河市': [124.87, 48.48],
    '鸡西市': [130.97, 45.3],
    '鸡冠区': [130.97, 45.3],
    '恒山区': [130.93, 45.2],
    '滴道区': [130.78, 45.37],
    '梨树区': [130.68, 45.08],
    '城子河区': [131.0, 45.33],
    '麻山区': [130.52, 45.2],
    '鸡东县': [131.13, 45.25],
    '虎林市': [132.98, 45.77],
    '密山市': [131.87, 45.55],
    '鹤岗市': [130.27, 47.33],
    '向阳区': [130.28, 47.33],
    '工农区': [130.25, 47.32],
    '兴安区': [130.22, 47.27],
    '东山区': [130.32, 47.33],
    '兴山区': [130.3, 47.37],
    '萝北县': [130.83, 47.58],
    '绥滨县': [131.85, 47.28],
    '双鸭山市': [131.15, 46.63],
    '尖山区': [131.17, 46.63],
    '岭东区': [131.13, 46.57],
    '四方台区': [131.33, 46.58],
    '集贤县': [131.13, 46.72],
    '友谊县': [131.8, 46.78],
    '宝清县': [132.2, 46.32],
    '饶河县': [134.02, 46.8],
    '大庆市': [125.03, 46.58],
    '萨尔图区': [125.02, 46.6],
    '龙凤区': [125.1, 46.53],
    '让胡路区': [124.85, 46.65],
    '红岗区': [124.88, 46.4],
    '大同区': [124.82, 46.03],
    '肇州县': [125.27, 45.7],
    '肇源县': [125.08, 45.52],
    '林甸县': [124.87, 47.18],
    '杜尔伯特蒙古族自治县': [124.45, 46.87],
    '伊春市': [128.9, 47.73],
    '南岔区': [129.28, 47.13],
    '友好区': [128.82, 47.85],
    '西林区': [129.28, 47.48],
    '翠峦区': [128.65, 47.72],
    '新青区': [129.53, 48.28],
    '美溪区': [129.13, 47.63],
    '金山屯区': [129.43, 47.42],
    '五营区': [129.25, 48.12],
    '乌马河区': [128.78, 47.72],
    '汤旺河区': [129.57, 48.45],
    '带岭区': [129.02, 47.02],
    '乌伊岭区': [129.42, 48.6],
    '红星区': [129.38, 48.23],
    '上甘岭区': [129.02, 47.97],
    '嘉荫县': [130.38, 48.88],
    '铁力市': [128.02, 46.98],
    '佳木斯市': [130.37, 46.82],
    '前进区': [130.37, 46.82],
    '东风区': [130.4, 46.82],
    '桦南县': [130.57, 46.23],
    '桦川县': [130.72, 47.02],
    '汤原县': [129.9, 46.73],
    '抚远县': [134.28, 48.37],
    '同江市': [132.52, 47.65],
    '富锦市': [132.03, 47.25],
    '七台河市': [130.95, 45.78],
    '新兴区': [130.83, 45.8],
    '桃山区': [130.97, 45.77],
    '茄子河区': [131.07, 45.77],
    '勃利县': [130.57, 45.75],
    '牡丹江市': [129.6, 44.58],
    '东安区': [129.62, 44.58],
    '阳明区': [129.63, 44.6],
    '爱民区': [129.58, 44.58],
    '东宁县': [131.12, 44.07],
    '林口县': [130.27, 45.3],
    '绥芬河市': [131.15, 44.42],
    '海林市': [129.38, 44.57],
    '宁安市': [129.47, 44.35],
    '穆棱市': [130.52, 44.92],
    '黑河市': [127.48, 50.25],
    '爱辉区': [127.48, 50.25],
    '逊克县': [128.47, 49.58],
    '孙吴县': [127.32, 49.42],
    '北安市': [126.52, 48.23],
    '五大连池市': [126.2, 48.52],
    '绥化市': [126.98, 46.63],
    '北林区': [126.98, 46.63],
    '望奎县': [126.48, 46.83],
    '兰西县': [126.28, 46.27],
    '青冈县': [126.1, 46.68],
    '庆安县': [127.52, 46.88],
    '明水县': [125.9, 47.18],
    '绥棱县': [127.1, 47.25],
    '安达市': [125.33, 46.4],
    '肇东市': [125.98, 46.07],
    '海伦市': [126.97, 47.47],
    '大兴安岭地区': [124.12, 50.42],
    '呼玛县': [126.65, 51.73],
    '塔河县': [124.7, 52.32],
    '漠河县': [122.53, 52.97],
    '上海市': [121.47, 31.23],
    '黄浦区': [121.48, 31.23],
    '卢湾区': [121.47, 31.22],
    '徐汇区': [121.43, 31.18],
    '长宁区': [121.42, 31.22],
    '静安区': [121.45, 31.23],
    '闸北区': [121.45, 31.25],
    '虹口区': [121.5, 31.27],
    '杨浦区': [121.52, 31.27],
    '闵行区': [121.38, 31.12],
    '宝山区': [121.48, 31.4],
    '嘉定区': [121.27, 31.38],
    '浦东新区': [121.53, 31.22],
    '金山区': [121.33, 30.75],
    '松江区': [121.22, 31.03],
    '青浦区': [121.12, 31.15],
    '南汇区': [121.75, 31.05],
    '奉贤区': [121.47, 30.92],
    '崇明县': [121.4, 31.62],
    '南京市': [118.78, 32.07],
    '玄武区': [118.8, 32.05],
    '白下区': [118.78, 32.03],
    '秦淮区': [118.8, 32.02],
    '建邺区': [118.75, 32.03],
    '下关区': [118.73, 32.08],
    '浦口区': [118.62, 32.05],
    '栖霞区': [118.88, 32.12],
    '雨花台区': [118.77, 32.0],
    '江宁区': [118.85, 31.95],
    '六合区': [118.83, 32.35],
    '溧水县': [119.02, 31.65],
    '高淳县': [118.88, 31.33],
    '无锡市': [120.3, 31.57],
    '崇安区': [120.3, 31.58],
    '南长区': [120.3, 31.57],
    '北塘区': [120.28, 31.58],
    '锡山区': [120.35, 31.6],
    '惠山区': [120.28, 31.68],
    '滨湖区': [120.27, 31.57],
    '江阴市': [120.27, 31.9],
    '宜兴市': [119.82, 31.35],
    '徐州市': [117.18, 34.27],
    '云龙区': [117.22, 34.25],
    '九里区': [117.13, 34.3],
    '贾汪区': [117.45, 34.45],
    '泉山区': [117.18, 34.25],
    '丰县': [116.6, 34.7],
    '沛县': [116.93, 34.73],
    '铜山县': [117.17, 34.18],
    '睢宁县': [117.95, 33.9],
    '新沂市': [118.35, 34.38],
    '邳州市': [117.95, 34.32],
    '常州市': [119.95, 31.78],
    '天宁区': [119.93, 31.75],
    '钟楼区': [119.93, 31.78],
    '戚墅堰区': [120.05, 31.73],
    '新北区': [119.97, 31.83],
    '武进区': [119.93, 31.72],
    '溧阳市': [119.48, 31.42],
    '金坛市': [119.57, 31.75],
    '苏州市': [120.58, 31.3],
    '沧浪区': [120.63, 31.3],
    '平江区': [120.63, 31.32],
    '金阊区': [120.6, 31.32],
    '虎丘区': [120.57, 31.3],
    '吴中区': [120.63, 31.27],
    '相城区': [120.63, 31.37],
    '常熟市': [120.75, 31.65],
    '张家港市': [120.55, 31.87],
    '昆山市': [120.98, 31.38],
    '吴江市': [120.63, 31.17],
    '太仓市': [121.1, 31.45],
    '南通市': [120.88, 31.98],
    '崇川区': [120.85, 32.0],
    '港闸区': [120.8, 32.03],
    '海安县': [120.45, 32.55],
    '如东县': [121.18, 32.32],
    '启东市': [121.65, 31.82],
    '如皋市': [120.57, 32.4],
    '通州市': [121.07, 32.08],
    '海门市': [121.17, 31.9],
    '连云港市': [119.22, 34.6],
    '连云区': [119.37, 34.75],
    '新浦区': [119.17, 34.6],
    '赣榆县': [119.12, 34.83],
    '东海县': [118.77, 34.53],
    '灌云县': [119.25, 34.3],
    '灌南县': [119.35, 34.08],
    '淮安市': [119.02, 33.62],
    '清河区': [119.02, 33.6],
    '楚州区': [119.13, 33.5],
    '淮阴区': [119.03, 33.63],
    '清浦区': [119.03, 33.58],
    '涟水县': [119.27, 33.78],
    '洪泽县': [118.83, 33.3],
    '盱眙县': [118.48, 33.0],
    '金湖县': [119.02, 33.02],
    '盐城市': [120.15, 33.35],
    '亭湖区': [120.13, 33.4],
    '盐都区': [120.15, 33.33],
    '响水县': [119.57, 34.2],
    '滨海县': [119.83, 33.98],
    '阜宁县': [119.8, 33.78],
    '射阳县': [120.25, 33.78],
    '建湖县': [119.8, 33.47],
    '东台市': [120.3, 32.85],
    '大丰市': [120.47, 33.2],
    '扬州市': [119.4, 32.4],
    '广陵区': [119.43, 32.38],
    '邗江区': [119.4, 32.38],
    '维扬区': [119.4, 32.42],
    '宝应县': [119.3, 33.23],
    '仪征市': [119.18, 32.27],
    '高邮市': [119.43, 32.78],
    '江都市': [119.55, 32.43],
    '镇江市': [119.45, 32.2],
    '京口区': [119.47, 32.2],
    '润州区': [119.4, 32.2],
    '丹徒区': [119.45, 32.13],
    '丹阳市': [119.57, 32.0],
    '扬中市': [119.82, 32.23],
    '句容市': [119.17, 31.95],
    '泰州市': [119.92, 32.45],
    '兴化市': [119.85, 32.92],
    '靖江市': [120.27, 32.02],
    '泰兴市': [120.02, 32.17],
    '姜堰市': [120.15, 32.52],
    '宿迁市': [118.28, 33.97],
    '宿城区': [118.25, 33.97],
    '宿豫区': [118.32, 33.95],
    '沭阳县': [118.77, 34.13],
    '泗阳县': [118.68, 33.72],
    '泗洪县': [118.22, 33.47],
    '杭州市': [120.15, 30.28],
    '上城区': [120.17, 30.25],
    '下城区': [120.17, 30.28],
    '江干区': [120.2, 30.27],
    '拱墅区': [120.13, 30.32],
    '滨江区': [120.2, 30.2],
    '萧山区': [120.27, 30.17],
    '余杭区': [120.3, 30.42],
    '桐庐县': [119.67, 29.8],
    '淳安县': [119.03, 29.6],
    '建德市': [119.28, 29.48],
    '富阳市': [119.95, 30.05],
    '临安市': [119.72, 30.23],
    '宁波市': [121.55, 29.88],
    '海曙区': [121.55, 29.87],
    '江东区': [121.57, 29.87],
    '北仑区': [121.85, 29.93],
    '镇海区': [121.72, 29.95],
    '鄞州区': [121.53, 29.83],
    '象山县': [121.87, 29.48],
    '宁海县': [121.43, 29.28],
    '余姚市': [121.15, 30.03],
    '慈溪市': [121.23, 30.17],
    '奉化市': [121.4, 29.65],
    '温州市': [120.7, 28.0],
    '鹿城区': [120.65, 28.02],
    '龙湾区': [120.82, 27.93],
    '洞头县': [121.15, 27.83],
    '永嘉县': [120.68, 28.15],
    '平阳县': [120.57, 27.67],
    '苍南县': [120.4, 27.5],
    '文成县': [120.08, 27.78],
    '泰顺县': [119.72, 27.57],
    '瑞安市': [120.63, 27.78],
    '乐清市': [120.95, 28.13],
    '嘉兴市': [120.75, 30.75],
    '秀洲区': [120.7, 30.77],
    '嘉善县': [120.92, 30.85],
    '海盐县': [120.95, 30.53],
    '海宁市': [120.68, 30.53],
    '平湖市': [121.02, 30.7],
    '桐乡市': [120.57, 30.63],
    '湖州市': [120.08, 30.9],
    '吴兴区': [120.12, 30.87],
    '南浔区': [120.43, 30.88],
    '德清县': [119.97, 30.53],
    '长兴县': [119.9, 31.02],
    '安吉县': [119.68, 30.63],
    '绍兴市': [120.57, 30.0],
    '越城区': [120.57, 30.0],
    '绍兴县': [120.47, 30.08],
    '新昌县': [120.9, 29.5],
    '诸暨市': [120.23, 29.72],
    '上虞市': [120.87, 30.03],
    '嵊州市': [120.82, 29.58],
    '金华市': [119.65, 29.08],
    '婺城区': [119.65, 29.08],
    '金东区': [119.7, 29.08],
    '武义县': [119.82, 28.9],
    '浦江县': [119.88, 29.45],
    '磐安县': [120.43, 29.05],
    '兰溪市': [119.45, 29.22],
    '义乌市': [120.07, 29.3],
    '东阳市': [120.23, 29.28],
    '永康市': [120.03, 28.9],
    '衢州市': [118.87, 28.93],
    '柯城区': [118.87, 28.93],
    '衢江区': [118.93, 28.98],
    '常山县': [118.52, 28.9],
    '开化县': [118.42, 29.13],
    '龙游县': [119.17, 29.03],
    '江山市': [118.62, 28.75],
    '舟山市': [122.2, 30.0],
    '定海区': [122.1, 30.02],
    '普陀区': [122.3, 29.95],
    '岱山县': [122.2, 30.25],
    '嵊泗县': [122.45, 30.73],
    '台州市': [121.43, 28.68],
    '椒江区': [121.43, 28.68],
    '黄岩区': [121.27, 28.65],
    '路桥区': [121.38, 28.58],
    '玉环县': [121.23, 28.13],
    '三门县': [121.38, 29.12],
    '天台县': [121.03, 29.13],
    '仙居县': [120.73, 28.87],
    '温岭市': [121.37, 28.37],
    '临海市': [121.12, 28.85],
    '丽水市': [119.92, 28.45],
    '莲都区': [119.92, 28.45],
    '青田县': [120.28, 28.15],
    '缙云县': [120.07, 28.65],
    '遂昌县': [119.27, 28.6],
    '松阳县': [119.48, 28.45],
    '云和县': [119.57, 28.12],
    '庆元县': [119.05, 27.62],
    '景宁畲族自治县': [119.63, 27.98],
    '龙泉市': [119.13, 28.08],
    '合肥市': [117.25, 31.83],
    '瑶海区': [117.3, 31.87],
    '庐阳区': [117.25, 31.88],
    '蜀山区': [117.27, 31.85],
    '包河区': [117.3, 31.8],
    '长丰县': [117.17, 32.48],
    '肥东县': [117.47, 31.88],
    '肥西县': [117.17, 31.72],
    '芜湖市': [118.38, 31.33],
    '镜湖区': [118.37, 31.35],
    '鸠江区': [118.38, 31.37],
    '芜湖县': [118.57, 31.15],
    '繁昌县': [118.2, 31.08],
    '南陵县': [118.33, 30.92],
    '蚌埠市': [117.38, 32.92],
    '龙子湖区': [117.38, 32.95],
    '蚌山区': [117.35, 32.95],
    '禹会区': [117.33, 32.93],
    '淮上区': [117.35, 32.97],
    '怀远县': [117.18, 32.97],
    '五河县': [117.88, 33.15],
    '固镇县': [117.32, 33.32],
    '淮南市': [117.0, 32.63],
    '大通区': [117.05, 32.63],
    '田家庵区': [117.0, 32.67],
    '谢家集区': [116.85, 32.6],
    '八公山区': [116.83, 32.63],
    '潘集区': [116.82, 32.78],
    '凤台县': [116.72, 32.7],
    '马鞍山市': [118.5, 31.7],
    '金家庄区': [118.48, 31.73],
    '花山区': [118.5, 31.72],
    '雨山区': [118.48, 31.68],
    '当涂县': [118.48, 31.55],
    '淮北市': [116.8, 33.95],
    '杜集区': [116.82, 34.0],
    '相山区': [116.8, 33.95],
    '烈山区': [116.8, 33.9],
    '濉溪县': [116.77, 33.92],
    '铜陵市': [117.82, 30.93],
    '铜官山区': [117.82, 30.93],
    '狮子山区': [117.85, 30.95],
    '铜陵县': [117.78, 30.95],
    '安庆市': [117.05, 30.53],
    '迎江区': [117.05, 30.5],
    '大观区': [117.03, 30.52],
    '怀宁县': [116.83, 30.72],
    '枞阳县': [117.2, 30.7],
    '潜山县': [116.57, 30.63],
    '太湖县': [116.27, 30.43],
    '宿松县': [116.12, 30.15],
    '望江县': [116.68, 30.13],
    '岳西县': [116.35, 30.85],
    '桐城市': [116.95, 31.05],
    '黄山市': [118.33, 29.72],
    '屯溪区': [118.33, 29.72],
    '黄山区': [118.13, 30.3],
    '徽州区': [118.33, 29.82],
    '歙县': [118.43, 29.87],
    '休宁县': [118.18, 29.78],
    '黟县': [117.93, 29.93],
    '祁门县': [117.72, 29.87],
    '滁州市': [118.32, 32.3],
    '琅琊区': [118.3, 32.3],
    '南谯区': [118.3, 32.32],
    '来安县': [118.43, 32.45],
    '全椒县': [118.27, 32.1],
    '定远县': [117.67, 32.53],
    '凤阳县': [117.57, 32.87],
    '天长市': [119.0, 32.7],
    '明光市': [117.98, 32.78],
    '阜阳市': [115.82, 32.9],
    '颍州区': [115.8, 32.88],
    '颍东区': [115.85, 32.92],
    '颍泉区': [115.8, 32.93],
    '临泉县': [115.25, 33.07],
    '太和县': [115.62, 33.17],
    '阜南县': [115.58, 32.63],
    '颍上县': [116.27, 32.63],
    '宿州市': [116.98, 33.63],
    '埇桥区': [116.97, 33.63],
    '砀山县': [116.35, 34.42],
    '萧县': [116.93, 34.18],
    '灵璧县': [117.55, 33.55],
    '泗县': [117.88, 33.48],
    '巢湖市': [117.87, 31.6],
    '居巢区': [117.85, 31.6],
    '庐江县': [117.28, 31.25],
    '无为县': [117.92, 31.3],
    '含山县': [118.1, 31.72],
    '和县': [118.37, 31.72],
    '六安市': [116.5, 31.77],
    '金安区': [116.5, 31.77],
    '裕安区': [116.48, 31.77],
    '寿县': [116.78, 32.58],
    '霍邱县': [116.27, 32.33],
    '舒城县': [116.93, 31.47],
    '金寨县': [115.92, 31.72],
    '霍山县': [116.33, 31.4],
    '亳州市': [115.78, 33.85],
    '谯城区': [115.77, 33.88],
    '涡阳县': [116.22, 33.52],
    '蒙城县': [116.57, 33.27],
    '利辛县': [116.2, 33.15],
    '池州市': [117.48, 30.67],
    '贵池区': [117.48, 30.65],
    '东至县': [117.02, 30.1],
    '石台县': [117.48, 30.22],
    '青阳县': [117.85, 30.65],
    '宣城市': [118.75, 30.95],
    '宣州区': [118.75, 30.95],
    '郎溪县': [119.17, 31.13],
    '广德县': [119.42, 30.9],
    '泾县': [118.4, 30.7],
    '绩溪县': [118.6, 30.07],
    '旌德县': [118.53, 30.28],
    '宁国市': [118.98, 30.63],
    '福州市': [119.3, 26.08],
    '鼓楼区': [119.3, 26.08],
    '台江区': [119.3, 26.07],
    '仓山区': [119.32, 26.05],
    '马尾区': [119.45, 26.0],
    '晋安区': [119.32, 26.08],
    '闽侯县': [119.13, 26.15],
    '连江县': [119.53, 26.2],
    '罗源县': [119.55, 26.48],
    '闽清县': [118.85, 26.22],
    '永泰县': [118.93, 25.87],
    '平潭县': [119.78, 25.52],
    '福清市': [119.38, 25.72],
    '长乐市': [119.52, 25.97],
    '厦门市': [118.08, 24.48],
    '思明区': [118.08, 24.45],
    '海沧区': [117.98, 24.47],
    '湖里区': [118.08, 24.52],
    '集美区': [118.1, 24.57],
    '同安区': [118.15, 24.73],
    '翔安区': [118.23, 24.62],
    '莆田市': [119.0, 25.43],
    '城厢区': [119.0, 25.43],
    '涵江区': [119.1, 25.45],
    '荔城区': [119.02, 25.43],
    '秀屿区': [119.08, 25.32],
    '仙游县': [118.68, 25.37],
    '三明市': [117.62, 26.27],
    '梅列区': [117.63, 26.27],
    '三元区': [117.6, 26.23],
    '明溪县': [117.2, 26.37],
    '清流县': [116.82, 26.18],
    '宁化县': [116.65, 26.27],
    '大田县': [117.85, 25.7],
    '尤溪县': [118.18, 26.17],
    '沙县': [117.78, 26.4],
    '将乐县': [117.47, 26.73],
    '泰宁县': [117.17, 26.9],
    '建宁县': [116.83, 26.83],
    '永安市': [117.37, 25.98],
    '泉州市': [118.67, 24.88],
    '鲤城区': [118.6, 24.92],
    '丰泽区': [118.6, 24.92],
    '洛江区': [118.67, 24.95],
    '泉港区': [118.88, 25.12],
    '惠安县': [118.8, 25.03],
    '安溪县': [118.18, 25.07],
    '永春县': [118.3, 25.32],
    '德化县': [118.23, 25.5],
    '金门县': [118.32, 24.43],
    '石狮市': [118.65, 24.73],
    '晋江市': [118.58, 24.82],
    '南安市': [118.38, 24.97],
    '漳州市': [117.65, 24.52],
    '芗城区': [117.65, 24.52],
    '龙文区': [117.72, 24.52],
    '云霄县': [117.33, 23.95],
    '漳浦县': [117.62, 24.13],
    '诏安县': [117.18, 23.72],
    '长泰县': [117.75, 24.62],
    '东山县': [117.43, 23.7],
    '南靖县': [117.37, 24.52],
    '平和县': [117.3, 24.37],
    '华安县': [117.53, 25.02],
    '龙海市': [117.82, 24.45],
    '南平市': [118.17, 26.65],
    '延平区': [118.17, 26.65],
    '顺昌县': [117.8, 26.8],
    '浦城县': [118.53, 27.92],
    '光泽县': [117.33, 27.55],
    '松溪县': [118.78, 27.53],
    '政和县': [118.85, 27.37],
    '邵武市': [117.48, 27.37],
    '武夷山市': [118.03, 27.77],
    '建瓯市': [118.32, 27.03],
    '建阳市': [118.12, 27.33],
    '龙岩市': [117.03, 25.1],
    '新罗区': [117.03, 25.1],
    '长汀县': [116.35, 25.83],
    '永定县': [116.73, 24.72],
    '上杭县': [116.42, 25.05],
    '武平县': [116.1, 25.1],
    '连城县': [116.75, 25.72],
    '漳平市': [117.42, 25.3],
    '宁德市': [119.52, 26.67],
    '蕉城区': [119.52, 26.67],
    '霞浦县': [120.0, 26.88],
    '古田县': [118.75, 26.58],
    '屏南县': [118.98, 26.92],
    '寿宁县': [119.5, 27.47],
    '周宁县': [119.33, 27.12],
    '柘荣县': [119.9, 27.23],
    '福安市': [119.65, 27.08],
    '福鼎市': [120.22, 27.33],
    '南昌市': [115.85, 28.68],
    '东湖区': [115.9, 28.68],
    '西湖区': [115.87, 28.67],
    '青云谱区': [115.92, 28.63],
    '湾里区': [115.73, 28.72],
    '青山湖区': [115.95, 28.68],
    '南昌县': [115.93, 28.55],
    '新建县': [115.82, 28.7],
    '安义县': [115.55, 28.85],
    '进贤县': [116.27, 28.37],
    '景德镇市': [117.17, 29.27],
    '昌江区': [117.17, 29.27],
    '珠山区': [117.2, 29.3],
    '浮梁县': [117.25, 29.37],
    '乐平市': [117.12, 28.97],
    '萍乡市': [113.85, 27.63],
    '安源区': [113.87, 27.65],
    '湘东区': [113.73, 27.65],
    '莲花县': [113.95, 27.13],
    '上栗县': [113.8, 27.88],
    '芦溪县': [114.03, 27.63],
    '九江市': [116.0, 29.7],
    '庐山区': [115.98, 29.68],
    '浔阳区': [115.98, 29.73],
    '九江县': [115.88, 29.62],
    '武宁县': [115.1, 29.27],
    '修水县': [114.57, 29.03],
    '永修县': [115.8, 29.03],
    '德安县': [115.77, 29.33],
    '星子县': [116.03, 29.45],
    '都昌县': [116.18, 29.27],
    '湖口县': [116.22, 29.73],
    '彭泽县': [116.55, 29.9],
    '瑞昌市': [115.67, 29.68],
    '新余市': [114.92, 27.82],
    '渝水区': [114.93, 27.8],
    '分宜县': [114.67, 27.82],
    '鹰潭市': [117.07, 28.27],
    '月湖区': [117.05, 28.23],
    '余江县': [116.82, 28.2],
    '贵溪市': [117.22, 28.28],
    '赣州市': [114.93, 25.83],
    '章贡区': [114.93, 25.87],
    '赣县': [115.0, 25.87],
    '信丰县': [114.93, 25.38],
    '大余县': [114.35, 25.4],
    '上犹县': [114.53, 25.8],
    '崇义县': [114.3, 25.7],
    '安远县': [115.38, 25.13],
    '龙南县': [114.78, 24.92],
    '定南县': [115.03, 24.78],
    '全南县': [114.52, 24.75],
    '宁都县': [116.02, 26.48],
    '于都县': [115.42, 25.95],
    '兴国县': [115.35, 26.33],
    '会昌县': [115.78, 25.6],
    '寻乌县': [115.65, 24.95],
    '石城县': [116.33, 26.33],
    '瑞金市': [116.03, 25.88],
    '南康市': [114.75, 25.65],
    '吉安市': [114.98, 27.12],
    '吉州区': [114.98, 27.12],
    '青原区': [115.0, 27.1],
    '吉安县': [114.9, 27.05],
    '吉水县': [115.13, 27.22],
    '峡江县': [115.33, 27.62],
    '新干县': [115.4, 27.77],
    '永丰县': [115.43, 27.32],
    '泰和县': [114.88, 26.8],
    '遂川县': [114.52, 26.33],
    '万安县': [114.78, 26.47],
    '安福县': [114.62, 27.38],
    '永新县': [114.23, 26.95],
    '井冈山市': [114.27, 26.72],
    '宜春市': [114.38, 27.8],
    '袁州区': [114.38, 27.8],
    '奉新县': [115.38, 28.7],
    '万载县': [114.43, 28.12],
    '上高县': [114.92, 28.23],
    '宜丰县': [114.78, 28.38],
    '靖安县': [115.35, 28.87],
    '铜鼓县': [114.37, 28.53],
    '丰城市': [115.78, 28.2],
    '樟树市': [115.53, 28.07],
    '高安市': [115.37, 28.42],
    '抚州市': [116.35, 28.0],
    '临川区': [116.35, 27.98],
    '南城县': [116.63, 27.55],
    '黎川县': [116.92, 27.3],
    '南丰县': [116.53, 27.22],
    '崇仁县': [116.05, 27.77],
    '乐安县': [115.83, 27.43],
    '宜黄县': [116.22, 27.55],
    '金溪县': [116.77, 27.92],
    '资溪县': [117.07, 27.7],
    '东乡县': [116.62, 28.23],
    '广昌县': [116.32, 26.83],
    '上饶市': [117.97, 28.45],
    '信州区': [117.95, 28.43],
    '上饶县': [117.92, 28.43],
    '广丰县': [118.18, 28.43],
    '玉山县': [118.25, 28.68],
    '铅山县': [117.7, 28.32],
    '横峰县': [117.6, 28.42],
    '弋阳县': [117.43, 28.4],
    '余干县': [116.68, 28.7],
    '鄱阳县': [116.67, 29.0],
    '万年县': [117.07, 28.7],
    '婺源县': [117.85, 29.25],
    '德兴市': [117.57, 28.95],
    '济南市': [116.98, 36.67],
    '历下区': [117.08, 36.67],
    '市中区': [117.57, 34.87],
    '槐荫区': [116.93, 36.65],
    '天桥区': [116.98, 36.68],
    '历城区': [117.07, 36.68],
    '长清区': [116.73, 36.55],
    '平阴县': [116.45, 36.28],
    '济阳县': [117.22, 36.98],
    '商河县': [117.15, 37.32],
    '章丘市': [117.53, 36.72],
    '青岛市': [120.38, 36.07],
    '市南区': [120.38, 36.07],
    '市北区': [120.38, 36.08],
    '四方区': [120.35, 36.1],
    '黄岛区': [120.18, 35.97],
    '崂山区': [120.47, 36.1],
    '李沧区': [120.43, 36.15],
    '城阳区': [120.37, 36.3],
    '胶州市': [120.03, 36.27],
    '即墨市': [120.45, 36.38],
    '平度市': [119.95, 36.78],
    '胶南市': [120.03, 35.87],
    '莱西市': [120.5, 36.87],
    '淄博市': [118.05, 36.82],
    '张店区': [118.03, 36.82],
    '博山区': [117.85, 36.5],
    '临淄区': [118.3, 36.82],
    '周村区': [117.87, 36.8],
    '桓台县': [118.08, 36.97],
    '高青县': [117.82, 37.17],
    '沂源县': [118.17, 36.18],
    '枣庄市': [117.32, 34.82],
    '薛城区': [117.25, 34.8],
    '峄城区': [117.58, 34.77],
    '台儿庄区': [117.73, 34.57],
    '山亭区': [117.45, 35.08],
    '滕州市': [117.15, 35.08],
    '东营市': [118.67, 37.43],
    '东营区': [118.5, 37.47],
    '河口区': [118.53, 37.88],
    '垦利县': [118.55, 37.58],
    '利津县': [118.25, 37.48],
    '广饶县': [118.4, 37.07],
    '烟台市': [121.43, 37.45],
    '芝罘区': [121.38, 37.53],
    '福山区': [121.25, 37.5],
    '牟平区': [121.6, 37.38],
    '莱山区': [121.43, 37.5],
    '长岛县': [120.73, 37.92],
    '龙口市': [120.52, 37.65],
    '莱阳市': [120.7, 36.98],
    '莱州市': [119.93, 37.18],
    '蓬莱市': [120.75, 37.82],
    '招远市': [120.4, 37.37],
    '栖霞市': [120.83, 37.3],
    '海阳市': [121.15, 36.78],
    '潍坊市': [119.15, 36.7],
    '潍城区': [119.1, 36.72],
    '寒亭区': [119.22, 36.77],
    '坊子区': [119.17, 36.67],
    '奎文区': [119.12, 36.72],
    '临朐县': [118.53, 36.52],
    '昌乐县': [118.82, 36.7],
    '青州市': [118.47, 36.68],
    '诸城市': [119.4, 36.0],
    '寿光市': [118.73, 36.88],
    '安丘市': [119.2, 36.43],
    '高密市': [119.75, 36.38],
    '昌邑市': [119.4, 36.87],
    '济宁市': [116.58, 35.42],
    '任城区': [116.58, 35.42],
    '微山县': [117.13, 34.82],
    '鱼台县': [116.65, 35.0],
    '金乡县': [116.3, 35.07],
    '嘉祥县': [116.33, 35.42],
    '汶上县': [116.48, 35.73],
    '泗水县': [117.27, 35.67],
    '梁山县': [116.08, 35.8],
    '曲阜市': [116.98, 35.58],
    '兖州市': [116.83, 35.55],
    '邹城市': [116.97, 35.4],
    '泰安市': [117.08, 36.2],
    '泰山区': [117.13, 36.18],
    '岱岳区': [117.0, 36.18],
    '宁阳县': [116.8, 35.77],
    '东平县': [116.47, 35.93],
    '新泰市': [117.77, 35.92],
    '肥城市': [116.77, 36.18],
    '威海市': [122.12, 37.52],
    '环翠区': [122.12, 37.5],
    '文登市': [122.05, 37.2],
    '荣成市': [122.42, 37.17],
    '乳山市': [121.53, 36.92],
    '日照市': [119.52, 35.42],
    '东港区': [119.45, 35.42],
    '岚山区': [119.33, 35.1],
    '五莲县': [119.2, 35.75],
    '莒县': [118.83, 35.58],
    '莱芜市': [117.67, 36.22],
    '莱城区': [117.65, 36.2],
    '钢城区': [117.8, 36.07],
    '临沂市': [118.35, 35.05],
    '兰山区': [118.33, 35.07],
    '罗庄区': [118.28, 34.98],
    '河东区': [118.4, 35.08],
    '沂南县': [118.47, 35.55],
    '郯城县': [118.35, 34.62],
    '沂水县': [118.62, 35.78],
    '苍山县': [118.05, 34.85],
    '费县': [117.97, 35.27],
    '平邑县': [117.63, 35.5],
    '莒南县': [118.83, 35.18],
    '蒙阴县': [117.93, 35.72],
    '临沭县': [118.65, 34.92],
    '德州市': [116.3, 37.45],
    '德城区': [116.3, 37.45],
    '陵县': [116.57, 37.33],
    '宁津县': [116.78, 37.65],
    '庆云县': [117.38, 37.78],
    '临邑县': [116.87, 37.18],
    '齐河县': [116.75, 36.8],
    '平原县': [116.43, 37.17],
    '夏津县': [116.0, 36.95],
    '武城县': [116.07, 37.22],
    '乐陵市': [117.23, 37.73],
    '禹城市': [116.63, 36.93],
    '聊城市': [115.98, 36.45],
    '东昌府区': [115.98, 36.45],
    '阳谷县': [115.78, 36.12],
    '莘县': [115.67, 36.23],
    '茌平县': [116.25, 36.58],
    '东阿县': [116.25, 36.33],
    '冠县': [115.43, 36.48],
    '高唐县': [116.23, 36.87],
    '临清市': [115.7, 36.85],
    '滨州市': [117.97, 37.38],
    '滨城区': [118.0, 37.38],
    '惠民县': [117.5, 37.48],
    '阳信县': [117.58, 37.63],
    '无棣县': [117.6, 37.73],
    '沾化县': [118.13, 37.7],
    '博兴县': [118.13, 37.15],
    '邹平县': [117.73, 36.88],
    '牡丹区': [115.43, 35.25],
    '曹县': [115.53, 34.83],
    '单县': [116.08, 34.8],
    '成武县': [115.88, 34.95],
    '巨野县': [116.08, 35.4],
    '郓城县': [115.93, 35.6],
    '鄄城县': [115.5, 35.57],
    '定陶县': [115.57, 35.07],
    '东明县': [115.08, 35.28],
    '郑州市': [113.62, 34.75],
    '中原区': [113.6, 34.75],
    '二七区': [113.65, 34.73],
    '管城回族区': [113.67, 34.75],
    '金水区': [113.65, 34.78],
    '上街区': [113.28, 34.82],
    '惠济区': [113.6, 34.87],
    '中牟县': [113.97, 34.72],
    '巩义市': [112.98, 34.77],
    '荥阳市': [113.4, 34.78],
    '新密市': [113.38, 34.53],
    '新郑市': [113.73, 34.4],
    '登封市': [113.03, 34.47],
    '开封市': [114.3, 34.8],
    '龙亭区': [114.35, 34.8],
    '顺河回族区': [114.35, 34.8],
    '杞县': [114.78, 34.55],
    '通许县': [114.47, 34.48],
    '尉氏县': [114.18, 34.42],
    '开封县': [114.43, 34.77],
    '兰考县': [114.82, 34.82],
    '洛阳市': [112.45, 34.62],
    '老城区': [112.47, 34.68],
    '西工区': [112.43, 34.67],
    '涧西区': [112.4, 34.67],
    '吉利区': [112.58, 34.9],
    '洛龙区': [112.45, 34.62],
    '孟津县': [112.43, 34.83],
    '新安县': [112.15, 34.72],
    '栾川县': [111.62, 33.78],
    '嵩县': [112.1, 34.15],
    '汝阳县': [112.47, 34.15],
    '宜阳县': [112.17, 34.52],
    '洛宁县': [111.65, 34.38],
    '伊川县': [112.42, 34.42],
    '偃师市': [112.78, 34.73],
    '平顶山市': [113.18, 33.77],
    '新华区': [113.3, 33.73],
    '卫东区': [113.33, 33.73],
    '石龙区': [112.88, 33.9],
    '湛河区': [113.28, 33.73],
    '宝丰县': [113.07, 33.88],
    '叶县': [113.35, 33.62],
    '鲁山县': [112.9, 33.73],
    '郏县': [113.22, 33.97],
    '舞钢市': [113.52, 33.3],
    '汝州市': [112.83, 34.17],
    '安阳市': [114.38, 36.1],
    '文峰区': [114.35, 36.08],
    '北关区': [114.35, 36.12],
    '殷都区': [114.3, 36.12],
    '龙安区': [114.32, 36.1],
    '安阳县': [114.35, 36.1],
    '汤阴县': [114.35, 35.92],
    '滑县': [114.52, 35.58],
    '内黄县': [114.9, 35.95],
    '林州市': [113.82, 36.07],
    '鹤壁市': [114.28, 35.75],
    '鹤山区': [114.15, 35.95],
    '山城区': [114.18, 35.9],
    '淇滨区': [114.3, 35.73],
    '浚县': [114.55, 35.67],
    '淇县': [114.2, 35.6],
    '新乡市': [113.9, 35.3],
    '红旗区': [113.87, 35.3],
    '卫滨区': [113.85, 35.3],
    '凤泉区': [113.92, 35.38],
    '牧野区': [113.9, 35.32],
    '新乡县': [113.8, 35.2],
    '获嘉县': [113.65, 35.27],
    '原阳县': [113.97, 35.05],
    '延津县': [114.2, 35.15],
    '封丘县': [114.42, 35.05],
    '长垣县': [114.68, 35.2],
    '卫辉市': [114.07, 35.4],
    '辉县市': [113.8, 35.47],
    '焦作市': [113.25, 35.22],
    '解放区': [113.22, 35.25],
    '中站区': [113.17, 35.23],
    '马村区': [113.32, 35.27],
    '山阳区': [113.25, 35.22],
    '修武县': [113.43, 35.23],
    '博爱县': [113.07, 35.17],
    '武陟县': [113.38, 35.1],
    '温县': [113.08, 34.93],
    '济源市': [112.58, 35.07],
    '沁阳市': [112.93, 35.08],
    '孟州市': [112.78, 34.9],
    '濮阳市': [115.03, 35.77],
    '华龙区': [115.07, 35.78],
    '清丰县': [115.12, 35.9],
    '南乐县': [115.2, 36.08],
    '范县': [115.5, 35.87],
    '台前县': [115.85, 36.0],
    '濮阳县': [115.02, 35.7],
    '许昌市': [113.85, 34.03],
    '魏都区': [113.82, 34.03],
    '许昌县': [113.83, 34.0],
    '鄢陵县': [114.2, 34.1],
    '襄城县': [113.48, 33.85],
    '禹州市': [113.47, 34.17],
    '长葛市': [113.77, 34.22],
    '漯河市': [114.02, 33.58],
    '郾城区': [114.0, 33.58],
    '召陵区': [114.07, 33.57],
    '舞阳县': [113.6, 33.43],
    '临颍县': [113.93, 33.82],
    '三门峡市': [111.2, 34.78],
    '湖滨区': [111.2, 34.78],
    '渑池县': [111.75, 34.77],
    '陕县': [111.08, 34.7],
    '卢氏县': [111.05, 34.05],
    '义马市': [111.87, 34.75],
    '灵宝市': [110.87, 34.52],
    '南阳市': [112.52, 33.0],
    '宛城区': [112.55, 33.02],
    '卧龙区': [112.53, 32.98],
    '南召县': [112.43, 33.5],
    '方城县': [113.0, 33.27],
    '西峡县': [111.48, 33.28],
    '镇平县': [112.23, 33.03],
    '内乡县': [111.85, 33.05],
    '淅川县': [111.48, 33.13],
    '社旗县': [112.93, 33.05],
    '唐河县': [112.83, 32.7],
    '新野县': [112.35, 32.52],
    '桐柏县': [113.4, 32.37],
    '邓州市': [112.08, 32.68],
    '商丘市': [115.65, 34.45],
    '梁园区': [115.63, 34.45],
    '睢阳区': [115.63, 34.38],
    '民权县': [115.13, 34.65],
    '睢县': [115.07, 34.45],
    '宁陵县': [115.32, 34.45],
    '柘城县': [115.3, 34.07],
    '虞城县': [115.85, 34.4],
    '夏邑县': [116.13, 34.23],
    '永城市': [116.43, 33.92],
    '信阳市': [114.07, 32.13],
    '浉河区': [114.05, 32.12],
    '平桥区': [114.12, 32.1],
    '罗山县': [114.53, 32.2],
    '光山县': [114.9, 32.02],
    '新县': [114.87, 31.63],
    '商城县': [115.4, 31.8],
    '固始县': [115.68, 32.18],
    '潢川县': [115.03, 32.13],
    '淮滨县': [115.4, 32.43],
    '息县': [114.73, 32.35],
    '周口市': [114.65, 33.62],
    '扶沟县': [114.38, 34.07],
    '西华县': [114.53, 33.8],
    '商水县': [114.6, 33.53],
    '沈丘县': [115.07, 33.4],
    '郸城县': [115.2, 33.65],
    '淮阳县': [114.88, 33.73],
    '太康县': [114.85, 34.07],
    '鹿邑县': [115.48, 33.87],
    '项城市': [114.9, 33.45],
    '驻马店市': [114.02, 32.98],
    '驿城区': [114.05, 32.97],
    '西平县': [114.02, 33.38],
    '上蔡县': [114.27, 33.27],
    '平舆县': [114.63, 32.97],
    '正阳县': [114.38, 32.6],
    '确山县': [114.02, 32.8],
    '泌阳县': [113.32, 32.72],
    '汝南县': [114.35, 33.0],
    '遂平县': [114.0, 33.15],
    '新蔡县': [114.98, 32.75],
    '武汉市': [114.3, 30.6],
    '江岸区': [114.3, 30.6],
    '江汉区': [114.27, 30.6],
    '硚口区': [114.27, 30.57],
    '汉阳区': [114.27, 30.55],
    '武昌区': [114.3, 30.57],
    '青山区': [114.38, 30.63],
    '洪山区': [114.33, 30.5],
    '东西湖区': [114.13, 30.62],
    '汉南区': [114.08, 30.32],
    '蔡甸区': [114.03, 30.58],
    '江夏区': [114.32, 30.35],
    '黄陂区': [114.37, 30.87],
    '新洲区': [114.8, 30.85],
    '黄石市': [115.03, 30.2],
    '黄石港区': [115.07, 30.23],
    '西塞山区': [115.12, 30.2],
    '下陆区': [114.97, 30.18],
    '铁山区': [114.9, 30.2],
    '阳新县': [115.2, 29.85],
    '大冶市': [114.97, 30.1],
    '十堰市': [110.78, 32.65],
    '茅箭区': [110.82, 32.6],
    '张湾区': [110.78, 32.65],
    '郧县': [110.82, 32.83],
    '郧西县': [110.42, 33.0],
    '竹山县': [110.23, 32.23],
    '竹溪县': [109.72, 32.32],
    '房县': [110.73, 32.07],
    '丹江口市': [111.52, 32.55],
    '宜昌市': [111.28, 30.7],
    '西陵区': [111.27, 30.7],
    '伍家岗区': [111.35, 30.65],
    '点军区': [111.27, 30.7],
    '猇亭区': [111.42, 30.53],
    '夷陵区': [111.32, 30.77],
    '远安县': [111.63, 31.07],
    '兴山县': [110.75, 31.35],
    '秭归县': [110.98, 30.83],
    '长阳土家族自治县': [111.18, 30.47],
    '五峰土家族自治县': [110.67, 30.2],
    '宜都市': [111.45, 30.4],
    '当阳市': [111.78, 30.82],
    '枝江市': [111.77, 30.43],
    '襄樊市': [112.15, 32.02],
    '襄城区': [112.15, 32.02],
    '樊城区': [112.13, 32.03],
    '襄阳区': [112.2, 32.08],
    '南漳县': [111.83, 31.78],
    '谷城县': [111.65, 32.27],
    '保康县': [111.25, 31.88],
    '老河口市': [111.67, 32.38],
    '枣阳市': [112.75, 32.13],
    '宜城市': [112.25, 31.72],
    '鄂州市': [114.88, 30.4],
    '梁子湖区': [114.67, 30.08],
    '华容区': [114.73, 30.53],
    '鄂城区': [114.88, 30.4],
    '荆门市': [112.2, 31.03],
    '东宝区': [112.2, 31.05],
    '掇刀区': [112.2, 30.98],
    '京山县': [113.1, 31.02],
    '沙洋县': [112.58, 30.7],
    '钟祥市': [112.58, 31.17],
    '孝感市': [113.92, 30.93],
    '孝南区': [113.92, 30.92],
    '孝昌县': [113.97, 31.25],
    '大悟县': [114.12, 31.57],
    '云梦县': [113.75, 31.02],
    '应城市': [113.57, 30.95],
    '安陆市': [113.68, 31.27],
    '汉川市': [113.83, 30.65],
    '荆州市': [112.23, 30.33],
    '沙市区': [112.25, 30.32],
    '荆州区': [112.18, 30.35],
    '公安县': [112.23, 30.07],
    '监利县': [112.88, 29.82],
    '江陵县': [112.42, 30.03],
    '石首市': [112.4, 29.73],
    '洪湖市': [113.45, 29.8],
    '松滋市': [111.77, 30.18],
    '黄冈市': [114.87, 30.45],
    '黄州区': [114.88, 30.43],
    '团风县': [114.87, 30.63],
    '红安县': [114.62, 31.28],
    '罗田县': [115.4, 30.78],
    '英山县': [115.67, 30.75],
    '浠水县': [115.27, 30.45],
    '蕲春县': [115.43, 30.23],
    '黄梅县': [115.93, 30.08],
    '麻城市': [115.03, 31.18],
    '武穴市': [115.55, 29.85],
    '咸宁市': [114.32, 29.85],
    '咸安区': [114.3, 29.87],
    '嘉鱼县': [113.9, 29.98],
    '通城县': [113.82, 29.25],
    '崇阳县': [114.03, 29.55],
    '通山县': [114.52, 29.6],
    '赤壁市': [113.88, 29.72],
    '随州市': [113.37, 31.72],
    '曾都区': [113.37, 31.72],
    '广水市': [113.82, 31.62],
    '恩施土家族苗族自治州': [109.47, 30.3],
    '恩施市': [109.47, 30.3],
    '利川市': [108.93, 30.3],
    '建始县': [109.73, 30.6],
    '巴东县': [110.33, 31.05],
    '宣恩县': [109.48, 29.98],
    '咸丰县': [109.15, 29.68],
    '来凤县': [109.4, 29.52],
    '鹤峰县': [110.03, 29.9],
    '仙桃市': [113.45, 30.37],
    '潜江市': [112.88, 30.42],
    '天门市': [113.17, 30.67],
    '神农架林区': [110.67, 31.75],
    '长沙市': [112.93, 28.23],
    '芙蓉区': [113.03, 28.18],
    '天心区': [112.98, 28.12],
    '岳麓区': [112.93, 28.23],
    '开福区': [112.98, 28.25],
    '雨花区': [113.03, 28.13],
    '长沙县': [113.07, 28.25],
    '望城县': [112.82, 28.37],
    '宁乡县': [112.55, 28.25],
    '浏阳市': [113.63, 28.15],
    '株洲市': [113.13, 27.83],
    '荷塘区': [113.17, 27.87],
    '芦淞区': [113.15, 27.83],
    '石峰区': [113.1, 27.87],
    '天元区': [113.12, 27.83],
    '株洲县': [113.13, 27.72],
    '攸县': [113.33, 27.0],
    '茶陵县': [113.53, 26.8],
    '炎陵县': [113.77, 26.48],
    '醴陵市': [113.48, 27.67],
    '湘潭市': [112.93, 27.83],
    '雨湖区': [112.9, 27.87],
    '岳塘区': [112.95, 27.87],
    '湘潭县': [112.95, 27.78],
    '湘乡市': [112.53, 27.73],
    '韶山市': [112.52, 27.93],
    '衡阳市': [112.57, 26.9],
    '珠晖区': [112.62, 26.9],
    '雁峰区': [112.6, 26.88],
    '石鼓区': [112.6, 26.9],
    '蒸湘区': [112.6, 26.9],
    '南岳区': [112.73, 27.25],
    '衡阳县': [112.37, 26.97],
    '衡南县': [112.67, 26.73],
    '衡山县': [112.87, 27.23],
    '衡东县': [112.95, 27.08],
    '祁东县': [112.12, 26.78],
    '耒阳市': [112.85, 26.42],
    '常宁市': [112.38, 26.42],
    '邵阳市': [111.47, 27.25],
    '双清区': [111.47, 27.23],
    '大祥区': [111.45, 27.23],
    '北塔区': [111.45, 27.25],
    '邵东县': [111.75, 27.25],
    '新邵县': [111.45, 27.32],
    '邵阳县': [111.27, 27.0],
    '隆回县': [111.03, 27.12],
    '洞口县': [110.57, 27.05],
    '绥宁县': [110.15, 26.58],
    '新宁县': [110.85, 26.43],
    '城步苗族自治县': [110.32, 26.37],
    '武冈市': [110.63, 26.73],
    '岳阳市': [113.12, 29.37],
    '岳阳楼区': [113.1, 29.37],
    '云溪区': [113.3, 29.47],
    '君山区': [113.0, 29.43],
    '岳阳县': [113.12, 29.15],
    '华容县': [112.57, 29.52],
    '湘阴县': [112.88, 28.68],
    '平江县': [113.58, 28.72],
    '汨罗市': [113.08, 28.8],
    '临湘市': [113.47, 29.48],
    '常德市': [111.68, 29.05],
    '武陵区': [111.68, 29.03],
    '鼎城区': [111.68, 29.02],
    '安乡县': [112.17, 29.42],
    '汉寿县': [111.97, 28.9],
    '澧县': [111.75, 29.63],
    '临澧县': [111.65, 29.45],
    '桃源县': [111.48, 28.9],
    '石门县': [111.38, 29.58],
    '津市市': [111.88, 29.62],
    '张家界市': [110.47, 29.13],
    '永定区': [110.48, 29.13],
    '武陵源区': [110.53, 29.35],
    '慈利县': [111.12, 29.42],
    '桑植县': [110.15, 29.4],
    '益阳市': [112.32, 28.6],
    '资阳区': [112.32, 28.6],
    '赫山区': [112.37, 28.6],
    '南县': [112.4, 29.38],
    '桃江县': [112.12, 28.53],
    '安化县': [111.22, 28.38],
    '沅江市': [112.38, 28.85],
    '郴州市': [113.02, 25.78],
    '北湖区': [113.02, 25.8],
    '苏仙区': [113.03, 25.8],
    '桂阳县': [112.73, 25.73],
    '宜章县': [112.95, 25.4],
    '永兴县': [113.1, 26.13],
    '嘉禾县': [112.37, 25.58],
    '临武县': [112.55, 25.28],
    '汝城县': [113.68, 25.55],
    '桂东县': [113.93, 26.08],
    '安仁县': [113.27, 26.7],
    '资兴市': [113.23, 25.98],
    '永州市': [111.62, 26.43],
    '冷水滩区': [111.6, 26.43],
    '祁阳县': [111.85, 26.58],
    '东安县': [111.28, 26.4],
    '双牌县': [111.65, 25.97],
    '道县': [111.58, 25.53],
    '江永县': [111.33, 25.28],
    '宁远县': [111.93, 25.6],
    '蓝山县': [112.18, 25.37],
    '新田县': [112.22, 25.92],
    '江华瑶族自治县': [111.58, 25.18],
    '怀化市': [110.0, 27.57],
    '鹤城区': [109.95, 27.55],
    '中方县': [109.93, 27.4],
    '沅陵县': [110.38, 28.47],
    '辰溪县': [110.18, 28.0],
    '溆浦县': [110.58, 27.92],
    '会同县': [109.72, 26.87],
    '麻阳苗族自治县': [109.8, 27.87],
    '新晃侗族自治县': [109.17, 27.37],
    '芷江侗族自治县': [109.68, 27.45],
    '靖州苗族侗族自治县': [109.68, 26.58],
    '通道侗族自治县': [109.78, 26.17],
    '洪江市': [109.82, 27.2],
    '娄底市': [112.0, 27.73],
    '娄星区': [112.0, 27.73],
    '双峰县': [112.2, 27.45],
    '新化县': [111.3, 27.75],
    '冷水江市': [111.43, 27.68],
    '涟源市': [111.67, 27.7],
    '湘西土家族苗族自治州': [109.73, 28.32],
    '吉首市': [109.73, 28.32],
    '泸溪县': [110.22, 28.22],
    '凤凰县': [109.6, 27.95],
    '花垣县': [109.48, 28.58],
    '保靖县': [109.65, 28.72],
    '古丈县': [109.95, 28.62],
    '永顺县': [109.85, 29.0],
    '龙山县': [109.43, 29.47],
    '广州市': [113.27, 23.13],
    '荔湾区': [113.23, 23.13],
    '越秀区': [113.27, 23.13],
    '海珠区': [113.25, 23.1],
    '天河区': [113.35, 23.12],
    '黄埔区': [113.45, 23.1],
    '番禺区': [113.35, 22.95],
    '花都区': [113.22, 23.4],
    '增城市': [113.83, 23.3],
    '从化市': [113.58, 23.55],
    '韶关市': [113.6, 24.82],
    '武江区': [113.57, 24.8],
    '浈江区': [113.6, 24.8],
    '曲江区': [113.6, 24.68],
    '始兴县': [114.07, 24.95],
    '仁化县': [113.75, 25.08],
    '翁源县': [114.13, 24.35],
    '乳源瑶族自治县': [113.27, 24.78],
    '新丰县': [114.2, 24.07],
    '乐昌市': [113.35, 25.13],
    '南雄市': [114.3, 25.12],
    '深圳市': [114.05, 22.55],
    '罗湖区': [114.12, 22.55],
    '福田区': [114.05, 22.53],
    '南山区': [113.92, 22.52],
    '宝安区': [113.9, 22.57],
    '龙岗区': [114.27, 22.73],
    '盐田区': [114.22, 22.55],
    '珠海市': [113.57, 22.27],
    '香洲区': [113.55, 22.27],
    '斗门区': [113.28, 22.22],
    '金湾区': [113.4, 22.07],
    '汕头市': [116.68, 23.35],
    '龙湖区': [116.72, 23.37],
    '金平区': [116.7, 23.37],
    '潮阳区': [116.6, 23.27],
    '潮南区': [116.43, 23.25],
    '澄海区': [116.77, 23.48],
    '南澳县': [117.02, 23.42],
    '佛山市': [113.12, 23.02],
    '南海区': [113.15, 23.03],
    '顺德区': [113.3, 22.8],
    '三水区': [112.87, 23.17],
    '高明区': [112.88, 22.9],
    '江门市': [113.08, 22.58],
    '新会区': [113.03, 22.47],
    '台山市': [112.78, 22.25],
    '开平市': [112.67, 22.38],
    '鹤山市': [112.97, 22.77],
    '恩平市': [112.3, 22.18],
    '湛江市': [110.35, 21.27],
    '赤坎区': [110.37, 21.27],
    '霞山区': [110.4, 21.2],
    '坡头区': [110.47, 21.23],
    '麻章区': [110.32, 21.27],
    '遂溪县': [110.25, 21.38],
    '徐闻县': [110.17, 20.33],
    '廉江市': [110.27, 21.62],
    '雷州市': [110.08, 20.92],
    '吴川市': [110.77, 21.43],
    '茂名市': [110.92, 21.67],
    '茂南区': [110.92, 21.63],
    '茂港区': [111.02, 21.47],
    '电白县': [111.0, 21.5],
    '高州市': [110.85, 21.92],
    '化州市': [110.63, 21.67],
    '信宜市': [110.95, 22.35],
    '肇庆市': [112.47, 23.05],
    '端州区': [112.48, 23.05],
    '鼎湖区': [112.57, 23.17],
    '广宁县': [112.43, 23.63],
    '怀集县': [112.18, 23.92],
    '封开县': [111.5, 23.43],
    '德庆县': [111.77, 23.15],
    '高要市': [112.45, 23.03],
    '四会市': [112.68, 23.33],
    '惠州市': [114.42, 23.12],
    '惠城区': [114.4, 23.08],
    '惠阳区': [114.47, 22.8],
    '博罗县': [114.28, 23.18],
    '惠东县': [114.72, 22.98],
    '龙门县': [114.25, 23.73],
    '梅州市': [116.12, 24.28],
    '梅江区': [116.12, 24.32],
    '梅县': [116.05, 24.28],
    '大埔县': [116.7, 24.35],
    '丰顺县': [116.18, 23.77],
    '五华县': [115.77, 23.93],
    '平远县': [115.88, 24.57],
    '蕉岭县': [116.17, 24.67],
    '兴宁市': [115.73, 24.15],
    '汕尾市': [115.37, 22.78],
    '海丰县': [115.33, 22.97],
    '陆河县': [115.65, 23.3],
    '陆丰市': [115.65, 22.95],
    '河源市': [114.7, 23.73],
    '源城区': [114.7, 23.73],
    '紫金县': [115.18, 23.63],
    '龙川县': [115.25, 24.1],
    '连平县': [114.48, 24.37],
    '和平县': [114.93, 24.45],
    '东源县': [114.77, 23.82],
    '阳江市': [111.98, 21.87],
    '江城区': [111.95, 21.87],
    '阳西县': [111.62, 21.75],
    '阳东县': [112.02, 21.88],
    '阳春市': [111.78, 22.18],
    '清远市': [113.03, 23.7],
    '清城区': [113.02, 23.7],
    '佛冈县': [113.53, 23.88],
    '阳山县': [112.63, 24.48],
    '连山壮族瑶族自治县': [112.08, 24.57],
    '连南瑶族自治县': [112.28, 24.72],
    '清新县': [112.98, 23.73],
    '英德市': [113.4, 24.18],
    '连州市': [112.38, 24.78],
    '东莞市': [113.75, 23.05],
    '中山市': [113.38, 22.52],
    '潮州市': [116.62, 23.67],
    '湘桥区': [116.63, 23.68],
    '潮安县': [116.68, 23.45],
    '饶平县': [117.0, 23.67],
    '揭阳市': [116.37, 23.55],
    '揭东县': [116.42, 23.57],
    '揭西县': [115.83, 23.43],
    '惠来县': [116.28, 23.03],
    '普宁市': [116.18, 23.3],
    '云浮市': [112.03, 22.92],
    '云城区': [112.03, 22.93],
    '新兴县': [112.23, 22.7],
    '郁南县': [111.53, 23.23],
    '云安县': [112.0, 23.08],
    '罗定市': [111.57, 22.77],
    '南宁市': [108.37, 22.82],
    '兴宁区': [108.38, 22.87],
    '江南区': [108.28, 22.78],
    '西乡塘区': [108.3, 22.83],
    '良庆区': [108.32, 22.77],
    '邕宁区': [108.48, 22.75],
    '武鸣县': [108.27, 23.17],
    '隆安县': [107.68, 23.18],
    '马山县': [108.17, 23.72],
    '上林县': [108.6, 23.43],
    '宾阳县': [108.8, 23.22],
    '横县': [109.27, 22.68],
    '柳州市': [109.42, 24.33],
    '柳南区': [109.38, 24.35],
    '柳江县': [109.33, 24.27],
    '柳城县': [109.23, 24.65],
    '鹿寨县': [109.73, 24.48],
    '融安县': [109.4, 25.23],
    '融水苗族自治县': [109.25, 25.07],
    '三江侗族自治县': [109.6, 25.78],
    '桂林市': [110.28, 25.28],
    '阳朔县': [110.48, 24.78],
    '临桂县': [110.2, 25.23],
    '灵川县': [110.32, 25.42],
    '全州县': [111.07, 25.93],
    '兴安县': [110.67, 25.62],
    '永福县': [109.98, 24.98],
    '灌阳县': [111.15, 25.48],
    '龙胜各族自治县': [110.0, 25.8],
    '资源县': [110.63, 26.03],
    '平乐县': [110.63, 24.63],
    '恭城瑶族自治县': [110.83, 24.83],
    '梧州市': [111.27, 23.48],
    '苍梧县': [111.23, 23.42],
    '藤县': [110.92, 23.38],
    '蒙山县': [110.52, 24.2],
    '岑溪市': [110.98, 22.92],
    '北海市': [109.12, 21.48],
    '铁山港区': [109.43, 21.53],
    '合浦县': [109.2, 21.67],
    '防城港市': [108.35, 21.7],
    '港口区': [108.37, 21.65],
    '防城区': [108.35, 21.77],
    '上思县': [107.98, 22.15],
    '东兴市': [107.97, 21.53],
    '钦州市': [108.62, 21.95],
    '钦北区': [108.63, 21.98],
    '灵山县': [109.3, 22.43],
    '浦北县': [109.55, 22.27],
    '贵港市': [109.6, 23.1],
    '覃塘区': [109.42, 23.13],
    '平南县': [110.38, 23.55],
    '桂平市': [110.08, 23.4],
    '玉林市': [110.17, 22.63],
    '容县': [110.55, 22.87],
    '陆川县': [110.27, 22.33],
    '博白县': [109.97, 22.28],
    '兴业县': [109.87, 22.75],
    '北流市': [110.35, 22.72],
    '百色市': [106.62, 23.9],
    '田阳县': [106.92, 23.73],
    '田东县': [107.12, 23.6],
    '平果县': [107.58, 23.32],
    '德保县': [106.62, 23.33],
    '靖西县': [106.42, 23.13],
    '那坡县': [105.83, 23.42],
    '凌云县': [106.57, 24.35],
    '乐业县': [106.55, 24.78],
    '田林县': [106.23, 24.3],
    '西林县': [105.1, 24.5],
    '隆林各族自治县': [105.33, 24.77],
    '贺州市': [111.55, 24.42],
    '昭平县': [110.8, 24.17],
    '钟山县': [111.3, 24.53],
    '富川瑶族自治县': [111.27, 24.83],
    '河池市': [108.07, 24.7],
    '金城江区': [108.05, 24.7],
    '南丹县': [107.53, 24.98],
    '天峨县': [107.17, 25.0],
    '凤山县': [107.05, 24.55],
    '东兰县': [107.37, 24.52],
    '罗城仫佬族自治县': [108.9, 24.78],
    '环江毛南族自治县': [108.25, 24.83],
    '巴马瑶族自治县': [107.25, 24.15],
    '都安瑶族自治县': [108.1, 23.93],
    '大化瑶族自治县': [107.98, 23.73],
    '宜州市': [108.67, 24.5],
    '来宾市': [109.23, 23.73],
    '忻城县': [108.67, 24.07],
    '象州县': [109.68, 23.97],
    '武宣县': [109.67, 23.6],
    '金秀瑶族自治县': [110.18, 24.13],
    '合山市': [108.87, 23.82],
    '崇左市': [107.37, 22.4],
    '扶绥县': [107.9, 22.63],
    '宁明县': [107.07, 22.13],
    '龙州县': [106.85, 22.35],
    '大新县': [107.2, 22.83],
    '天等县': [107.13, 23.08],
    '凭祥市': [106.75, 22.12],
    '海口市': [110.32, 20.03],
    '秀英区': [110.28, 20.02],
    '龙华区': [110.3, 20.03],
    '琼山区': [110.35, 20.0],
    '美兰区': [110.37, 20.03],
    '三亚市': [109.5, 18.25],
    '五指山市': [109.52, 18.78],
    '琼海市': [110.47, 19.25],
    '儋州市': [109.57, 19.52],
    '文昌市': [110.8, 19.55],
    '万宁市': [110.4, 18.8],
    '东方市': [108.63, 19.1],
    '定安县': [110.32, 19.7],
    '屯昌县': [110.1, 19.37],
    '澄迈县': [110.0, 19.73],
    '临高县': [109.68, 19.92],
    '白沙黎族自治县': [109.45, 19.23],
    '昌江黎族自治县': [109.05, 19.25],
    '乐东黎族自治县': [109.17, 18.75],
    '陵水黎族自治县': [110.03, 18.5],
    '保亭黎族苗族自治县': [109.7, 18.63],
    '琼中黎族苗族自治县': [109.83, 19.03],
    '重庆市': [106.55, 29.57],
    '万州区': [108.4, 30.82],
    '涪陵区': [107.4, 29.72],
    '渝中区': [106.57, 29.55],
    '大渡口区': [106.48, 29.48],
    '江北区': [106.57, 29.6],
    '沙坪坝区': [106.45, 29.53],
    '九龙坡区': [106.5, 29.5],
    '南岸区': [106.57, 29.52],
    '北碚区': [106.4, 29.8],
    '万盛区': [106.92, 28.97],
    '双桥区': [105.78, 29.48],
    '渝北区': [106.63, 29.72],
    '巴南区': [106.52, 29.38],
    '黔江区': [108.77, 29.53],
    '长寿区': [107.08, 29.87],
    '綦江县': [106.65, 29.03],
    '潼南县': [105.83, 30.18],
    '铜梁县': [106.05, 29.85],
    '大足县': [105.72, 29.7],
    '荣昌县': [105.58, 29.4],
    '璧山县': [106.22, 29.6],
    '梁平县': [107.8, 30.68],
    '城口县': [108.67, 31.95],
    '丰都县': [107.73, 29.87],
    '垫江县': [107.35, 30.33],
    '武隆县': [107.75, 29.33],
    '忠县': [108.02, 30.3],
    '开县': [108.42, 31.18],
    '云阳县': [108.67, 30.95],
    '奉节县': [109.47, 31.02],
    '巫山县': [109.88, 31.08],
    '巫溪县': [109.63, 31.4],
    '石柱土家族自治县': [108.12, 30.0],
    '秀山土家族苗族自治县': [108.98, 28.45],
    '酉阳土家族苗族自治县': [108.77, 28.85],
    '彭水苗族土家族自治县': [108.17, 29.3],
    '成都市': [104.07, 30.67],
    '锦江区': [104.08, 30.67],
    '青羊区': [104.05, 30.68],
    '金牛区': [104.05, 30.7],
    '武侯区': [104.05, 30.65],
    '成华区': [104.1, 30.67],
    '龙泉驿区': [104.27, 30.57],
    '青白江区': [104.23, 30.88],
    '新都区': [104.15, 30.83],
    '温江区': [103.83, 30.7],
    '金堂县': [104.43, 30.85],
    '双流县': [103.92, 30.58],
    '郫县': [103.88, 30.82],
    '大邑县': [103.52, 30.58],
    '蒲江县': [103.5, 30.2],
    '新津县': [103.82, 30.42],
    '都江堰市': [103.62, 31.0],
    '彭州市': [103.93, 30.98],
    '邛崃市': [103.47, 30.42],
    '崇州市': [103.67, 30.63],
    '自贡市': [104.78, 29.35],
    '自流井区': [104.77, 29.35],
    '贡井区': [104.72, 29.35],
    '大安区': [104.77, 29.37],
    '沿滩区': [104.87, 29.27],
    '荣县': [104.42, 29.47],
    '富顺县': [104.98, 29.18],
    '攀枝花市': [101.72, 26.58],
    '东区': [101.7, 26.55],
    '西区': [101.6, 26.6],
    '仁和区': [101.73, 26.5],
    '米易县': [102.12, 26.88],
    '盐边县': [101.85, 26.7],
    '泸州市': [105.43, 28.87],
    '江阳区': [105.45, 28.88],
    '纳溪区': [105.37, 28.77],
    '龙马潭区': [105.43, 28.9],
    '泸县': [105.38, 29.15],
    '合江县': [105.83, 28.82],
    '叙永县': [105.43, 28.17],
    '古蔺县': [105.82, 28.05],
    '德阳市': [104.38, 31.13],
    '旌阳区': [104.38, 31.13],
    '中江县': [104.68, 31.03],
    '罗江县': [104.5, 31.32],
    '广汉市': [104.28, 30.98],
    '什邡市': [104.17, 31.13],
    '绵竹市': [104.2, 31.35],
    '绵阳市': [104.73, 31.47],
    '涪城区': [104.73, 31.47],
    '游仙区': [104.75, 31.47],
    '三台县': [105.08, 31.1],
    '盐亭县': [105.38, 31.22],
    '安县': [104.57, 31.53],
    '梓潼县': [105.17, 31.63],
    '北川羌族自治县': [104.45, 31.82],
    '平武县': [104.53, 32.42],
    '江油市': [104.75, 31.78],
    '广元市': [105.83, 32.43],
    '元坝区': [105.97, 32.32],
    '朝天区': [105.88, 32.65],
    '旺苍县': [106.28, 32.23],
    '青川县': [105.23, 32.58],
    '剑阁县': [105.52, 32.28],
    '苍溪县': [105.93, 31.73],
    '遂宁市': [105.57, 30.52],
    '船山区': [105.57, 30.52],
    '安居区': [105.45, 30.35],
    '蓬溪县': [105.72, 30.78],
    '射洪县': [105.38, 30.87],
    '大英县': [105.25, 30.58],
    '内江市': [105.05, 29.58],
    '东兴区': [105.07, 29.6],
    '威远县': [104.67, 29.53],
    '资中县': [104.85, 29.78],
    '隆??县': [105.28, 29.35],
    '乐山市': [103.77, 29.57],
    '沙湾区': [103.55, 29.42],
    '五通桥区': [103.82, 29.4],
    '金口河区': [103.08, 29.25],
    '犍为县': [103.95, 29.22],
    '井研县': [104.07, 29.65],
    '夹江县': [103.57, 29.73],
    '沐川县': [103.9, 28.97],
    '峨边彝族自治县': [103.27, 29.23],
    '马边彝族自治县': [103.55, 28.83],
    '峨眉山市': [103.48, 29.6],
    '南充市': [106.08, 30.78],
    '顺庆区': [106.08, 30.78],
    '高坪区': [106.1, 30.77],
    '嘉陵区': [106.05, 30.77],
    '南部县': [106.07, 31.35],
    '营山县': [106.57, 31.08],
    '蓬安县': [106.42, 31.03],
    '仪陇县': [106.28, 31.27],
    '西充县': [105.88, 31.0],
    '阆中市': [106.0, 31.55],
    '眉山市': [103.83, 30.05],
    '东坡区': [103.83, 30.05],
    '仁寿县': [104.15, 30.0],
    '彭山县': [103.87, 30.2],
    '洪雅县': [103.37, 29.92],
    '丹棱县': [103.52, 30.02],
    '青神县': [103.85, 29.83],
    '宜宾市': [104.62, 28.77],
    '翠屏区': [104.62, 28.77],
    '宜宾县': [104.55, 28.7],
    '南溪县': [104.98, 28.85],
    '江安县': [105.07, 28.73],
    '长宁县': [104.92, 28.58],
    '高县': [104.52, 28.43],
    '珙县': [104.72, 28.45],
    '筠连县': [104.52, 28.17],
    '兴文县': [105.23, 28.3],
    '屏山县': [104.33, 28.83],
    '广安市': [106.63, 30.47],
    '岳池县': [106.43, 30.55],
    '武胜县': [106.28, 30.35],
    '邻水县': [106.93, 30.33],
    '华蓥市': [106.77, 30.38],
    '达州市': [107.5, 31.22],
    '通川区': [107.48, 31.22],
    '达县': [107.5, 31.2],
    '宣汉县': [107.72, 31.35],
    '开江县': [107.87, 31.08],
    '大竹县': [107.2, 30.73],
    '渠县': [106.97, 30.83],
    '万源市': [108.03, 32.07],
    '雅安市': [103.0, 29.98],
    '雨城区': [103.0, 29.98],
    '名山县': [103.12, 30.08],
    '荥经县': [102.85, 29.8],
    '汉源县': [102.65, 29.35],
    '石棉县': [102.37, 29.23],
    '天全县': [102.75, 30.07],
    '芦山县': [102.92, 30.15],
    '宝兴县': [102.82, 30.37],
    '巴中市': [106.77, 31.85],
    '巴州区': [106.77, 31.85],
    '通江县': [107.23, 31.92],
    '南江县': [106.83, 32.35],
    '平昌县': [107.1, 31.57],
    '资阳市': [104.65, 30.12],
    '雁江区': [104.65, 30.12],
    '安岳县': [105.33, 30.1],
    '乐至县': [105.02, 30.28],
    '简阳市': [104.55, 30.4],
    '阿坝藏族羌族自治州': [102.22, 31.9],
    '汶川县': [103.58, 31.48],
    '理县': [103.17, 31.43],
    '茂县': [103.85, 31.68],
    '松潘县': [103.6, 32.63],
    '九寨沟县': [104.23, 33.27],
    '金川县': [102.07, 31.48],
    '小金县': [102.37, 31.0],
    '黑水县': [102.98, 32.07],
    '马尔康县': [102.22, 31.9],
    '壤塘县': [100.98, 32.27],
    '阿坝县': [101.7, 32.9],
    '若尔盖县': [102.95, 33.58],
    '红原县': [102.55, 32.8],
    '甘孜藏族自治州': [101.97, 30.05],
    '康定县': [101.97, 30.05],
    '泸定县': [102.23, 29.92],
    '丹巴县': [101.88, 30.88],
    '九龙县': [101.5, 29.0],
    '雅江县': [101.02, 30.03],
    '道孚县': [101.12, 30.98],
    '炉霍县': [100.68, 31.4],
    '甘孜县': [99.98, 31.62],
    '新龙县': [100.32, 30.95],
    '德格县': [98.58, 31.82],
    '白玉县': [98.83, 31.22],
    '石渠县': [98.1, 32.98],
    '色达县': [100.33, 32.27],
    '理塘县': [100.27, 30.0],
    '巴塘县': [99.1, 30.0],
    '乡城县': [99.8, 28.93],
    '稻城县': [100.3, 29.03],
    '得荣县': [99.28, 28.72],
    '凉山彝族自治州': [102.27, 27.9],
    '西昌市': [102.27, 27.9],
    '木里藏族自治县': [101.28, 27.93],
    '盐源县': [101.5, 27.43],
    '德昌县': [102.18, 27.4],
    '会理县': [102.25, 26.67],
    '会东县': [102.58, 26.63],
    '宁南县': [102.77, 27.07],
    '普格县': [102.53, 27.38],
    '布拖县': [102.82, 27.72],
    '金阳县': [103.25, 27.7],
    '昭觉县': [102.85, 28.02],
    '喜德县': [102.42, 28.32],
    '冕宁县': [102.17, 28.55],
    '越西县': [102.52, 28.65],
    '甘洛县': [102.77, 28.97],
    '美姑县': [103.13, 28.33],
    '雷波县': [103.57, 28.27],
    '贵阳市': [106.63, 26.65],
    '南明区': [106.72, 26.57],
    '云岩区': [106.72, 26.62],
    '乌当区': [106.75, 26.63],
    '白云区': [106.65, 26.68],
    '小河区': [106.7, 26.53],
    '开阳县': [106.97, 27.07],
    '息烽县': [106.73, 27.1],
    '修文县': [106.58, 26.83],
    '清镇市': [106.47, 26.55],
    '六盘水市': [104.83, 26.6],
    '钟山区': [104.83, 26.6],
    '六枝特区': [105.48, 26.22],
    '水城县': [104.95, 26.55],
    '盘县': [104.47, 25.72],
    '遵义市': [106.92, 27.73],
    '红花岗区': [106.92, 27.65],
    '汇川区': [106.92, 27.73],
    '遵义县': [106.83, 27.53],
    '桐梓县': [106.82, 28.13],
    '绥阳县': [107.18, 27.95],
    '正安县': [107.43, 28.55],
    '道真仡佬族苗族自治县': [107.6, 28.88],
    '务川仡佬族苗族自治县': [107.88, 28.53],
    '凤冈县': [107.72, 27.97],
    '湄潭县': [107.48, 27.77],
    '余庆县': [107.88, 27.22],
    '习水县': [106.22, 28.32],
    '赤水市': [105.7, 28.58],
    '仁怀市': [106.42, 27.82],
    '安顺市': [105.95, 26.25],
    '西秀区': [105.92, 26.25],
    '平坝县': [106.25, 26.42],
    '普定县': [105.75, 26.32],
    '镇宁布依族苗族自治县': [105.77, 26.07],
    '关岭布依族苗族自治县': [105.62, 25.95],
    '紫云苗族布依族自治县': [106.08, 25.75],
    '铜仁地区': [109.18, 27.72],
    '铜仁市': [109.18, 27.72],
    '江口县': [108.85, 27.7],
    '玉屏侗族自治县': [108.92, 27.23],
    '石阡县': [108.23, 27.52],
    '思南县': [108.25, 27.93],
    '印江土家族苗族自治县': [108.4, 28.0],
    '德江县': [108.12, 28.27],
    '沿河土家族自治县': [108.5, 28.57],
    '松桃苗族自治县': [109.2, 28.17],
    '万山特区': [109.2, 27.52],
    '兴义市': [104.9, 25.08],
    '兴仁县': [105.18, 25.43],
    '普安县': [104.95, 25.78],
    '晴隆县': [105.22, 25.83],
    '贞丰县': [105.65, 25.38],
    '望谟县': [106.1, 25.17],
    '册亨县': [105.82, 24.98],
    '安龙县': [105.47, 25.12],
    '毕节地区': [105.28, 27.3],
    '毕节市': [105.28, 27.3],
    '大方县': [105.6, 27.15],
    '黔西县': [106.03, 27.03],
    '金沙县': [106.22, 27.47],
    '织金县': [105.77, 26.67],
    '纳雍县': [105.38, 26.78],
    '赫章县': [104.72, 27.13],
    '黔东南苗族侗族自治州': [107.97, 26.58],
    '凯里市': [107.97, 26.58],
    '黄平县': [107.9, 26.9],
    '施秉县': [108.12, 27.03],
    '三穗县': [108.68, 26.97],
    '镇远县': [108.42, 27.05],
    '岑巩县': [108.82, 27.18],
    '天柱县': [109.2, 26.92],
    '锦屏县': [109.2, 26.68],
    '剑河县': [108.45, 26.73],
    '台江县': [108.32, 26.67],
    '黎平县': [109.13, 26.23],
    '榕江县': [108.52, 25.93],
    '从江县': [108.9, 25.75],
    '雷山县': [108.07, 26.38],
    '麻江县': [107.58, 26.5],
    '丹寨县': [107.8, 26.2],
    '黔南布依族苗族自治州': [107.52, 26.27],
    '都匀市': [107.52, 26.27],
    '福泉市': [107.5, 26.7],
    '荔波县': [107.88, 25.42],
    '贵定县': [107.23, 26.58],
    '瓮安县': [107.47, 27.07],
    '独山县': [107.53, 25.83],
    '平塘县': [107.32, 25.83],
    '罗甸县': [106.75, 25.43],
    '长顺县': [106.45, 26.03],
    '龙里县': [106.97, 26.45],
    '惠水县': [106.65, 26.13],
    '三都水族自治县': [107.87, 25.98],
    '昆明市': [102.72, 25.05],
    '五华区': [102.7, 25.05],
    '盘龙区': [102.72, 25.03],
    '官渡区': [102.75, 25.02],
    '西山区': [102.67, 25.03],
    '东川区': [103.18, 26.08],
    '呈贡县': [102.8, 24.88],
    '晋宁县': [102.6, 24.67],
    '富民县': [102.5, 25.22],
    '宜良县': [103.15, 24.92],
    '石林彝族自治县': [103.27, 24.77],
    '嵩明县': [103.03, 25.35],
    '禄劝彝族苗族自治县': [102.47, 25.55],
    '寻甸回族彝族自治县': [103.25, 25.57],
    '安宁市': [102.48, 24.92],
    '曲靖市': [103.8, 25.5],
    '麒麟区': [103.8, 25.5],
    '马龙县': [103.58, 25.43],
    '陆良县': [103.67, 25.03],
    '师宗县': [103.98, 24.83],
    '罗平县': [104.3, 24.88],
    '富源县': [104.25, 25.67],
    '会泽县': [103.3, 26.42],
    '沾益县': [103.82, 25.62],
    '宣威市': [104.1, 26.22],
    '玉溪市': [102.55, 24.35],
    '江川县': [102.75, 24.28],
    '澄江县': [102.92, 24.67],
    '通海县': [102.75, 24.12],
    '华宁县': [102.93, 24.2],
    '易门县': [102.17, 24.67],
    '峨山彝族自治县': [102.4, 24.18],
    '新平彝族傣族自治县': [101.98, 24.07],
    '保山市': [99.17, 25.12],
    '隆阳区': [99.17, 25.12],
    '施甸县': [99.18, 24.73],
    '腾冲县': [98.5, 25.03],
    '龙陵县': [98.68, 24.58],
    '昌宁县': [99.6, 24.83],
    '昭通市': [103.72, 27.33],
    '昭阳区': [103.72, 27.33],
    '鲁甸县': [103.55, 27.2],
    '巧家县': [102.92, 26.92],
    '盐津县': [104.23, 28.12],
    '大关县': [103.88, 27.75],
    '永善县': [103.63, 28.23],
    '绥江县': [103.95, 28.6],
    '镇雄县': [104.87, 27.45],
    '彝良县': [104.05, 27.63],
    '威信县': [105.05, 27.85],
    '水富县': [104.4, 28.63],
    '丽江市': [100.23, 26.88],
    '古城区': [100.23, 26.88],
    '玉龙纳西族自治县': [100.23, 26.82],
    '永胜县': [100.75, 26.68],
    '华坪县': [101.27, 26.63],
    '宁蒗彝族自治县': [100.85, 27.28],
    '墨江哈尼族自治县': [101.68, 23.43],
    '景东彝族自治县': [100.83, 24.45],
    '景谷傣族彝族自治县': [100.7, 23.5],
    '江城哈尼族彝族自治县': [101.85, 22.58],
    '澜沧拉祜族自治县': [99.93, 22.55],
    '西盟佤族自治县': [99.62, 22.63],
    '临沧市': [100.08, 23.88],
    '临翔区': [100.08, 23.88],
    '凤庆县': [99.92, 24.6],
    '云县': [100.13, 24.45],
    '永德县': [99.25, 24.03],
    '镇康县': [98.83, 23.78],
    '耿马傣族佤族自治县': [99.4, 23.55],
    '沧源佤族自治县': [99.25, 23.15],
    '楚雄彝族自治州': [101.55, 25.03],
    '楚雄市': [101.55, 25.03],
    '双柏县': [101.63, 24.7],
    '牟定县': [101.53, 25.32],
    '南华县': [101.27, 25.2],
    '姚安县': [101.23, 25.5],
    '大姚县': [101.32, 25.73],
    '永仁县': [101.67, 26.07],
    '元谋县': [101.88, 25.7],
    '武定县': [102.4, 25.53],
    '禄丰县': [102.08, 25.15],
    '红河哈尼族彝族自治州': [103.4, 23.37],
    '个旧市': [103.15, 23.37],
    '开远市': [103.27, 23.72],
    '蒙自县': [103.4, 23.37],
    '屏边苗族自治县': [103.68, 22.98],
    '建水县': [102.83, 23.62],
    '石屏县': [102.5, 23.72],
    '弥勒县': [103.43, 24.4],
    '泸西县': [103.77, 24.53],
    '元阳县': [102.83, 23.23],
    '红河县': [102.42, 23.37],
    '绿春县': [102.4, 23.0],
    '河口瑶族自治县': [103.97, 22.52],
    '文山壮族苗族自治州': [104.25, 23.37],
    '文山县': [104.25, 23.37],
    '砚山县': [104.33, 23.62],
    '西畴县': [104.67, 23.45],
    '麻栗坡县': [104.7, 23.12],
    '马关县': [104.4, 23.02],
    '丘北县': [104.18, 24.05],
    '广南县': [105.07, 24.05],
    '富宁县': [105.62, 23.63],
    '西双版纳傣族自治州': [100.8, 22.02],
    '景洪市': [100.8, 22.02],
    '勐海县': [100.45, 21.97],
    '勐腊县': [101.57, 21.48],
    '大理白族自治州': [100.23, 25.6],
    '大理市': [100.23, 25.6],
    '漾濞彝族自治县': [99.95, 25.67],
    '祥云县': [100.55, 25.48],
    '宾川县': [100.58, 25.83],
    '弥渡县': [100.48, 25.35],
    '南涧彝族自治县': [100.52, 25.05],
    '巍山彝族回族自治县': [100.3, 25.23],
    '永平县': [99.53, 25.47],
    '云龙县': [99.37, 25.88],
    '洱源县': [99.95, 26.12],
    '剑川县': [99.9, 26.53],
    '鹤庆县': [100.18, 26.57],
    '德宏傣族景颇族自治州': [98.58, 24.43],
    '瑞丽市': [97.85, 24.02],
    '潞西市': [98.58, 24.43],
    '梁河县': [98.3, 24.82],
    '盈江县': [97.93, 24.72],
    '陇川县': [97.8, 24.2],
    '怒江傈僳族自治州': [98.85, 25.85],
    '泸水县': [98.85, 25.85],
    '福贡县': [98.87, 26.9],
    '贡山独龙族怒族自治县': [98.67, 27.73],
    '兰坪白族普米族自治县': [99.42, 26.45],
    '迪庆藏族自治州': [99.7, 27.83],
    '香格里拉县': [99.7, 27.83],
    '德钦县': [98.92, 28.48],
    '维西傈僳族自治县': [99.28, 27.18],
    '拉萨市': [91.13, 29.65],
    '林周县': [91.25, 29.9],
    '当雄县': [91.1, 30.48],
    '尼木县': [90.15, 29.45],
    '曲水县': [90.73, 29.37],
    '堆龙德庆县': [91.0, 29.65],
    '达孜县': [91.35, 29.68],
    '墨竹工卡县': [91.73, 29.83],
    '昌都地区': [97.18, 31.13],
    '昌都县': [97.18, 31.13],
    '江达县': [98.22, 31.5],
    '贡觉县': [98.27, 30.87],
    '类乌齐县': [96.6, 31.22],
    '丁青县': [95.6, 31.42],
    '察雅县': [97.57, 30.65],
    '八宿县': [96.92, 30.05],
    '左贡县': [97.85, 29.67],
    '芒康县': [98.6, 29.68],
    '洛隆县': [95.83, 30.75],
    '边坝县': [94.7, 30.93],
    '山南地区': [91.77, 29.23],
    '乃东县': [91.77, 29.23],
    '扎囊县': [91.33, 29.25],
    '贡嘎县': [90.98, 29.3],
    '桑日县': [92.02, 29.27],
    '琼结县': [91.68, 29.03],
    '曲松县': [92.2, 29.07],
    '措美县': [91.43, 28.43],
    '洛扎县': [90.87, 28.38],
    '加查县': [92.58, 29.15],
    '隆子县': [92.47, 28.42],
    '错那县': [91.95, 28.0],
    '浪卡子县': [90.4, 28.97],
    '日喀则地区': [88.88, 29.27],
    '日喀则市': [88.88, 29.27],
    '南木林县': [89.1, 29.68],
    '江孜县': [89.6, 28.92],
    '定日县': [87.12, 28.67],
    '萨迦县': [88.02, 28.9],
    '拉孜县': [87.63, 29.08],
    '昂仁县': [87.23, 29.3],
    '谢通门县': [88.27, 29.43],
    '白朗县': [89.27, 29.12],
    '仁布县': [89.83, 29.23],
    '康马县': [89.68, 28.57],
    '定结县': [87.77, 28.37],
    '仲巴县': [84.03, 29.77],
    '亚东县': [88.9, 27.48],
    '吉隆县': [85.3, 28.85],
    '聂拉木县': [85.98, 28.17],
    '萨嘎县': [85.23, 29.33],
    '岗巴县': [88.52, 28.28],
    '那曲地区': [92.07, 31.48],
    '那曲县': [92.07, 31.48],
    '嘉黎县': [93.25, 30.65],
    '比如县': [93.68, 31.48],
    '聂荣县': [92.3, 32.12],
    '安多县': [91.68, 32.27],
    '申扎县': [88.7, 30.93],
    '索县': [93.78, 31.88],
    '班戈县': [90.02, 31.37],
    '巴青县': [94.03, 31.93],
    '尼玛县': [87.23, 31.78],
    '阿里地区': [80.1, 32.5],
    '普兰县': [81.17, 30.3],
    '札达县': [79.8, 31.48],
    '噶尔县': [80.1, 32.5],
    '日土县': [79.72, 33.38],
    '革吉县': [81.12, 32.4],
    '改则县': [84.07, 32.3],
    '措勤县': [85.17, 31.02],
    '林芝地区': [94.37, 29.68],
    '林芝县': [94.37, 29.68],
    '工布江达县': [93.25, 29.88],
    '米林县': [94.22, 29.22],
    '墨脱县': [95.33, 29.33],
    '波密县': [95.77, 29.87],
    '察隅县': [97.47, 28.67],
    '朗县': [93.07, 29.05],
    '西安市': [108.93, 34.27],
    '新城区': [108.95, 34.27],
    '碑林区': [108.93, 34.23],
    '莲湖区': [108.93, 34.27],
    '灞桥区': [109.07, 34.27],
    '未央区': [108.93, 34.28],
    '雁塔区': [108.95, 34.22],
    '阎良区': [109.23, 34.65],
    '临潼区': [109.22, 34.37],
    '长安区': [108.93, 34.17],
    '蓝田县': [109.32, 34.15],
    '周至县': [108.2, 34.17],
    '户县': [108.6, 34.1],
    '高陵县': [109.08, 34.53],
    '铜川市': [108.93, 34.9],
    '王益区': [109.07, 35.07],
    '印台区': [109.1, 35.1],
    '耀州区': [108.98, 34.92],
    '宜君县': [109.12, 35.4],
    '宝鸡市': [107.13, 34.37],
    '渭滨区': [107.15, 34.37],
    '金台区': [107.13, 34.38],
    '陈仓区': [107.37, 34.37],
    '凤翔县': [107.38, 34.52],
    '岐山县': [107.62, 34.45],
    '扶风县': [107.87, 34.37],
    '眉县': [107.75, 34.28],
    '陇县': [106.85, 34.9],
    '千阳县': [107.13, 34.65],
    '麟游县': [107.78, 34.68],
    '凤县': [106.52, 33.92],
    '太白县': [107.32, 34.07],
    '咸阳市': [108.7, 34.33],
    '秦都区': [108.72, 34.35],
    '杨凌区': [108.07, 34.28],
    '渭城区': [108.73, 34.33],
    '三原县': [108.93, 34.62],
    '泾阳县': [108.83, 34.53],
    '乾县': [108.23, 34.53],
    '礼泉县': [108.42, 34.48],
    '永寿县': [108.13, 34.7],
    '彬县': [108.08, 35.03],
    '长武县': [107.78, 35.2],
    '旬邑县': [108.33, 35.12],
    '淳化县': [108.58, 34.78],
    '武功县': [108.2, 34.27],
    '兴平市': [108.48, 34.3],
    '渭南市': [109.5, 34.5],
    '临渭区': [109.48, 34.5],
    '华县': [109.77, 34.52],
    '潼关县': [110.23, 34.55],
    '大荔县': [109.93, 34.8],
    '合阳县': [110.15, 35.23],
    '澄城县': [109.93, 35.18],
    '蒲城县': [109.58, 34.95],
    '白水县': [109.58, 35.18],
    '富平县': [109.18, 34.75],
    '韩城市': [110.43, 35.48],
    '华阴市': [110.08, 34.57],
    '延安市': [109.48, 36.6],
    '宝塔区': [109.48, 36.6],
    '延长县': [110.0, 36.58],
    '延川县': [110.18, 36.88],
    '子长县': [109.67, 37.13],
    '安塞县': [109.32, 36.87],
    '志丹县': [108.77, 36.82],
    '甘泉县': [109.35, 36.28],
    '富县': [109.37, 35.98],
    '洛川县': [109.43, 35.77],
    '宜川县': [110.17, 36.05],
    '黄龙县': [109.83, 35.58],
    '黄陵县': [109.25, 35.58],
    '汉中市': [107.02, 33.07],
    '汉台区': [107.03, 33.07],
    '南郑县': [106.93, 33.0],
    '城固县': [107.33, 33.15],
    '洋县': [107.55, 33.22],
    '西乡县': [107.77, 32.98],
    '勉县': [106.67, 33.15],
    '宁强县': [106.25, 32.83],
    '略阳县': [106.15, 33.33],
    '镇巴县': [107.9, 32.53],
    '留坝县': [106.92, 33.62],
    '佛坪县': [107.98, 33.53],
    '榆林市': [109.73, 38.28],
    '榆阳区': [109.75, 38.28],
    '神木县': [110.5, 38.83],
    '府谷县': [111.07, 39.03],
    '横山县': [109.28, 37.95],
    '靖边县': [108.8, 37.6],
    '定边县': [107.6, 37.58],
    '绥德县': [110.25, 37.5],
    '米脂县': [110.18, 37.75],
    '佳县': [110.48, 38.02],
    '吴堡县': [110.73, 37.45],
    '清涧县': [110.12, 37.08],
    '子洲县': [110.03, 37.62],
    '安康市': [109.02, 32.68],
    '汉滨区': [109.02, 32.68],
    '汉阴县': [108.5, 32.9],
    '石泉县': [108.25, 33.05],
    '宁陕县': [108.32, 33.32],
    '紫阳县': [108.53, 32.52],
    '岚皋县': [108.9, 32.32],
    '平利县': [109.35, 32.4],
    '镇坪县': [109.52, 31.88],
    '旬阳县': [109.38, 32.83],
    '白河县': [110.1, 32.82],
    '商洛市': [109.93, 33.87],
    '商州区': [109.93, 33.87],
    '洛南县': [110.13, 34.08],
    '丹凤县': [110.33, 33.7],
    '商南县': [110.88, 33.53],
    '山阳县': [109.88, 33.53],
    '镇安县': [109.15, 33.43],
    '柞水县': [109.1, 33.68],
    '兰州市': [103.82, 36.07],
    '城关区': [103.83, 36.05],
    '西固区': [103.62, 36.1],
    '红古区': [102.87, 36.33],
    '永登县': [103.27, 36.73],
    '皋兰县': [103.95, 36.33],
    '榆中县': [104.12, 35.85],
    '嘉峪关市': [98.27, 39.8],
    '金昌市': [102.18, 38.5],
    '金川区': [102.18, 38.5],
    '永昌县': [101.97, 38.25],
    '白银市': [104.18, 36.55],
    '白银区': [104.18, 36.55],
    '平川区': [104.83, 36.73],
    '靖远县': [104.68, 36.57],
    '会宁县': [105.05, 35.7],
    '景泰县': [104.07, 37.15],
    '天水市': [105.72, 34.58],
    '清水县': [106.13, 34.75],
    '秦安县': [105.67, 34.87],
    '甘谷县': [105.33, 34.73],
    '武山县': [104.88, 34.72],
    '张家川回族自治县': [106.22, 35.0],
    '武威市': [102.63, 37.93],
    '凉州区': [102.63, 37.93],
    '民勤县': [103.08, 38.62],
    '古浪县': [102.88, 37.47],
    '天祝藏族自治县': [103.13, 36.98],
    '张掖市': [100.45, 38.93],
    '甘州区': [100.45, 38.93],
    '肃南裕固族自治县': [99.62, 38.83],
    '民乐县': [100.82, 38.43],
    '临泽县': [100.17, 39.13],
    '高台县': [99.82, 39.38],
    '山丹县': [101.08, 38.78],
    '平凉市': [106.67, 35.55],
    '崆峒区': [106.67, 35.55],
    '泾川县': [107.37, 35.33],
    '灵台县': [107.62, 35.07],
    '崇信县': [107.03, 35.3],
    '华亭县': [106.65, 35.22],
    '庄浪县': [106.05, 35.2],
    '静宁县': [105.72, 35.52],
    '酒泉市': [98.52, 39.75],
    '肃州区': [98.52, 39.75],
    '金塔县': [98.9, 39.98],
    '肃北蒙古族自治县': [94.88, 39.52],
    '阿克塞哈萨克族自治县': [94.33, 39.63],
    '玉门市': [97.05, 40.28],
    '敦煌市': [94.67, 40.13],
    '庆阳市': [107.63, 35.73],
    '西峰区': [107.63, 35.73],
    '庆城县': [107.88, 36.0],
    '环县': [107.3, 36.58],
    '华池县': [107.98, 36.47],
    '合水县': [108.02, 35.82],
    '正宁县': [108.37, 35.5],
    '宁县': [107.92, 35.5],
    '镇原县': [107.2, 35.68],
    '定西市': [104.62, 35.58],
    '安定区': [104.62, 35.58],
    '通渭县': [105.25, 35.2],
    '陇西县': [104.63, 35.0],
    '渭源县': [104.22, 35.13],
    '临洮县': [103.87, 35.38],
    '漳县': [104.47, 34.85],
    '岷县': [104.03, 34.43],
    '陇南市': [104.92, 33.4],
    '武都区': [104.92, 33.4],
    '成县': [105.72, 33.73],
    '文县': [104.68, 32.95],
    '宕昌县': [104.38, 34.05],
    '康县': [105.6, 33.33],
    '西和县': [105.3, 34.02],
    '礼县': [105.17, 34.18],
    '徽县': [106.08, 33.77],
    '两当县': [106.3, 33.92],
    '临夏回族自治州': [103.22, 35.6],
    '临夏市': [103.22, 35.6],
    '临夏县': [103.0, 35.5],
    '康乐县': [103.72, 35.37],
    '永靖县': [103.32, 35.93],
    '广河县': [103.58, 35.48],
    '和政县': [103.35, 35.43],
    '东乡族自治县': [103.4, 35.67],
    '甘南藏族自治州': [102.92, 34.98],
    '合作市': [102.92, 34.98],
    '临潭县': [103.35, 34.7],
    '卓尼县': [103.5, 34.58],
    '舟曲县': [104.37, 33.78],
    '迭部县': [103.22, 34.05],
    '玛曲县': [102.07, 34.0],
    '碌曲县': [102.48, 34.58],
    '夏河县': [102.52, 35.2],
    '西宁市': [101.78, 36.62],
    '城东区': [101.8, 36.62],
    '城中区': [101.78, 36.62],
    '城西区': [101.77, 36.62],
    '城北区': [101.77, 36.67],
    '大通回族土族自治县': [101.68, 36.93],
    '湟中县': [101.57, 36.5],
    '湟源县': [101.27, 36.68],
    '海东地区': [102.12, 36.5],
    '平安县': [102.12, 36.5],
    '民和回族土族自治县': [102.8, 36.33],
    '乐都县': [102.4, 36.48],
    '互助土族自治县': [101.95, 36.83],
    '化隆回族自治县': [102.27, 36.1],
    '循化撒拉族自治县': [102.48, 35.85],
    '海北藏族自治州': [100.9, 36.97],
    '门源回族自治县': [101.62, 37.38],
    '祁连县': [100.25, 38.18],
    '海晏县': [100.98, 36.9],
    '刚察县': [100.13, 37.33],
    '黄南藏族自治州': [102.02, 35.52],
    '同仁县': [102.02, 35.52],
    '尖扎县': [102.03, 35.93],
    '泽库县': [101.47, 35.03],
    '河南蒙古族自治县': [101.6, 34.73],
    '海南藏族自治州': [100.62, 36.28],
    '共和县': [100.62, 36.28],
    '同德县': [100.57, 35.25],
    '贵德县': [101.43, 36.05],
    '兴海县': [99.98, 35.58],
    '贵南县': [100.75, 35.58],
    '果洛藏族自治州': [100.23, 34.48],
    '玛沁县': [100.23, 34.48],
    '班玛县': [100.73, 32.93],
    '甘德县': [99.9, 33.97],
    '达日县': [99.65, 33.75],
    '久治县': [101.48, 33.43],
    '玛多县': [98.18, 34.92],
    '玉树藏族自治州': [97.02, 33.0],
    '玉树县': [97.02, 33.0],
    '杂多县': [95.3, 32.9],
    '称多县': [97.1, 33.37],
    '治多县': [95.62, 33.85],
    '囊谦县': [96.48, 32.2],
    '曲麻莱县': [95.8, 34.13],
    '海西蒙古族藏族自治州': [97.37, 37.37],
    '格尔木市': [94.9, 36.42],
    '德令哈市': [97.37, 37.37],
    '乌兰县': [98.48, 36.93],
    '都兰县': [98.08, 36.3],
    '天峻县': [99.02, 37.3],
    '银川市': [106.28, 38.47],
    '兴庆区': [106.28, 38.48],
    '西夏区': [106.18, 38.48],
    '金凤区': [106.25, 38.47],
    '永宁县': [106.25, 38.28],
    '贺兰县': [106.35, 38.55],
    '灵武市': [106.33, 38.1],
    '石嘴山市': [106.38, 39.02],
    '大武口区': [106.38, 39.02],
    '惠农区': [106.78, 39.25],
    '平罗县': [106.53, 38.9],
    '吴忠市': [106.2, 37.98],
    '利通区': [106.2, 37.98],
    '盐池县': [107.4, 37.78],
    '同心县': [105.92, 36.98],
    '青铜峡市': [106.07, 38.02],
    '固原市': [106.28, 36.0],
    '原州区': [106.28, 36.0],
    '西吉县': [105.73, 35.97],
    '隆德县': [106.12, 35.62],
    '泾源县': [106.33, 35.48],
    '彭阳县': [106.63, 35.85],
    '中卫市': [105.18, 37.52],
    '沙坡头区': [105.18, 37.52],
    '中宁县': [105.67, 37.48],
    '海原县': [105.65, 36.57],
    '乌鲁木齐市': [87.62, 43.82],
    '天山区': [87.65, 43.78],
    '沙依巴克区': [87.6, 43.78],
    '新市区': [87.6, 43.85],
    '水磨沟区': [87.63, 43.83],
    '头屯河区': [87.42, 43.87],
    '达坂城区': [88.3, 43.35],
    '乌鲁木齐县': [87.6, 43.8],
    '克拉玛依市': [84.87, 45.6],
    '独山子区': [84.85, 44.32],
    '克拉玛依区': [84.87, 45.6],
    '白碱滩区': [85.13, 45.7],
    '乌尔禾区': [85.68, 46.08],
    '吐鲁番地区': [89.17, 42.95],
    '吐鲁番市': [89.17, 42.95],
    '鄯善县': [90.22, 42.87],
    '托克逊县': [88.65, 42.78],
    '哈密地区': [93.52, 42.83],
    '哈密市': [93.52, 42.83],
    '伊吾县': [94.7, 43.25],
    '昌吉回族自治州': [87.3, 44.02],
    '昌吉市': [87.3, 44.02],
    '阜康市': [87.98, 44.15],
    '米泉市': [87.65, 43.97],
    '呼图壁县': [86.9, 44.18],
    '玛纳斯县': [86.22, 44.3],
    '奇台县': [89.58, 44.02],
    '吉木萨尔县': [89.18, 44.0],
    '木垒哈萨克自治县': [90.28, 43.83],
    '博尔塔拉蒙古自治州': [82.07, 44.9],
    '博乐市': [82.07, 44.9],
    '精河县': [82.88, 44.6],
    '温泉县': [81.03, 44.97],
    '巴音郭楞蒙古自治州': [86.15, 41.77],
    '库尔勒市': [86.15, 41.77],
    '轮台县': [84.27, 41.78],
    '尉犁县': [86.25, 41.33],
    '若羌县': [88.17, 39.02],
    '且末县': [85.53, 38.13],
    '焉耆回族自治县': [86.57, 42.07],
    '和静县': [86.4, 42.32],
    '和硕县': [86.87, 42.27],
    '博湖县': [86.63, 41.98],
    '阿克苏地区': [80.27, 41.17],
    '阿克苏市': [80.27, 41.17],
    '温宿县': [80.23, 41.28],
    '库车县': [82.97, 41.72],
    '沙雅县': [82.78, 41.22],
    '新和县': [82.6, 41.55],
    '拜城县': [81.87, 41.8],
    '乌什县': [79.23, 41.22],
    '阿瓦提县': [80.38, 40.63],
    '柯坪县': [79.05, 40.5],
    '阿图什市': [76.17, 39.72],
    '阿克陶县': [75.95, 39.15],
    '阿合奇县': [78.45, 40.93],
    '乌恰县': [75.25, 39.72],
    '喀什地区': [75.98, 39.47],
    '喀什市': [75.98, 39.47],
    '疏附县': [75.85, 39.38],
    '疏勒县': [76.05, 39.4],
    '英吉沙县': [76.17, 38.93],
    '泽普县': [77.27, 38.18],
    '莎车县': [77.23, 38.42],
    '叶城县': [77.42, 37.88],
    '麦盖提县': [77.65, 38.9],
    '岳普湖县': [76.77, 39.23],
    '伽师县': [76.73, 39.5],
    '巴楚县': [78.55, 39.78],
    '和田地区': [79.92, 37.12],
    '和田市': [79.92, 37.12],
    '和田县': [79.93, 37.1],
    '墨玉县': [79.73, 37.27],
    '皮山县': [78.28, 37.62],
    '洛浦县': [80.18, 37.07],
    '策勒县': [80.8, 37.0],
    '于田县': [81.67, 36.85],
    '民丰县': [82.68, 37.07],
    '伊犁哈萨克自治州': [81.32, 43.92],
    '伊宁市': [81.32, 43.92],
    '奎屯市': [84.9, 44.42],
    '伊宁县': [81.52, 43.98],
    '察布查尔锡伯自治县': [81.15, 43.83],
    '霍城县': [80.88, 44.05],
    '巩留县': [82.23, 43.48],
    '新源县': [83.25, 43.43],
    '昭苏县': [81.13, 43.15],
    '特克斯县': [81.83, 43.22],
    '尼勒克县': [82.5, 43.78],
    '塔城地区': [82.98, 46.75],
    '塔城市': [82.98, 46.75],
    '乌苏市': [84.68, 44.43],
    '额敏县': [83.63, 46.53],
    '沙湾县': [85.62, 44.33],
    '托里县': [83.6, 45.93],
    '裕民县': [82.98, 46.2],
    '和布克赛尔蒙古自治县': [85.72, 46.8],
    '阿勒泰地区': [88.13, 47.85],
    '阿勒泰市': [88.13, 47.85],
    '布尔津县': [86.85, 47.7],
    '富蕴县': [89.52, 47.0],
    '福海县': [87.5, 47.12],
    '哈巴河县': [86.42, 48.07],
    '青河县': [90.38, 46.67],
    '吉木乃县': [85.88, 47.43],
    '石河子市': [86.03, 44.3],
    '阿拉尔市': [81.28, 40.55],
    '图木舒克市': [79.13, 39.85],
    '五家渠市': [87.53, 44.17],
    '台北市': [121.5, 25.03],
    '高雄市': [120.28, 22.62],
    '基隆市': [121.73, 25.13],
    '台中市': [120.67, 24.15],
    '台南市': [120.2, 23.0],
    '新竹市': [120.95, 24.82],
    '嘉义市': [120.43, 23.48],
    '台北县': [121.47, 25.02],
    '宜兰县': [121.75, 24.77],
    '桃园县': [121.3, 24.97],
    '苗栗县': [120.8, 24.53],
    '台中县': [120.72, 24.25],
    '彰化县': [120.53, 24.08],
    '南投县': [120.67, 23.92],
    '云林县': [120.53, 23.72],
    '台南县': [120.32, 23.32],
    '高雄县': [120.37, 22.63],
    '屏东县': [120.48, 22.67],
    '台东县': [121.15, 22.75],
    '花莲县': [121.6, 23.98],
    '澎湖县': [119.58, 23.58]
}
====pyecharts.constants.py(file) end====

====pyecharts.custom.py(module) start====
====pyecharts.custom.py(module) end====

====pyecharts.custom.grid.py(file) start====

from pyecharts.option import grid
from pyecharts import template
from pyecharts.constants import PAGE_TITLE


class Grid(object):

    def __init__(self, page_title=PAGE_TITLE):
        self._chart = None
        self._js_dependencies = set()
        self._page_title = page_title

    def add(self, chart,
            grid_width=None,
            grid_height=None,
            grid_top=None,
            grid_bottom=None,
            grid_left=None,
            grid_right=None):
        if self._chart is None:
            self._chart = chart
            self._chart._option.update(grid=[])
            self._js_dependencies = chart._js_dependencies

            _grid = grid(
                grid_width, grid_height, grid_top, grid_bottom, grid_left, grid_right)
            if _grid:
                for _ in range(len(self._chart._option.get('series'))):
                    self._chart._option.get('grid').append(_grid)
        else:
            _series = (
                chart._option.get('series'),
                chart._option.get('xAxis', None),
                chart._option.get('yAxis', None),
                chart._option.get('legend')[0],
                chart._option.get('title')[0]
            )
            _index, _index_once, _xaxis, _yaxis, _legend, _title = self.__custom(_series)
            self._chart._option.get('legend').append(_legend)
            self._chart._option.get('title').append(_title)

            if _xaxis and _yaxis is not None:
                for _x in _xaxis:
                    _x.update(gridIndex=_index - 1)
                    self._chart._option.get('xAxis').append(_x)
                for _y in _yaxis:
                    _y.update(gridIndex=_index - 1)
                    self._chart._option.get('yAxis').append(_y)

                _flag = self._chart._option.get('series')[0].get('seriesId')
                _series_index = 0
                for s in self._chart._option.get('series'):
                    if _flag == s.get('seriesId'):
                        s.update(xAxisIndex=_series_index, yAxisIndex=_series_index)
                    else:
                        _series_index += 1
                        s.update(xAxisIndex=_series_index, yAxisIndex=_series_index)
                    _flag = s.get('seriesId')

            _grid = grid(
                grid_width, grid_height, grid_top,grid_bottom, grid_left, grid_right)
            for _ in range(_index_once):
                self._chart._option.get('grid').append(_grid)
            self._js_dependencies = self._js_dependencies.union(chart._js_dependencies)

    def __custom(self, series):
        _series, _xaxis, _yaxis, _legend, _title = series
        for s in _series:
            self._chart._option.get('series').append(s)
        return len(self._chart._option.get('series')), len(_series), \
               _xaxis, _yaxis, _legend, _title

    def render(self, path="render.html"):
        self._chart.render(path)

    def render_embed(self):
        return self._chart.render_embed()

    def show_config(self):
        self._chart.show_config()

    @property
    def chart(self):
        return self._chart

    @property
    def options(self):
        return self._chart._option

    def _repr_html_(self):
        return self._chart._repr_html_()

    def get_js_dependencies(self):
        return template.produce_html_script_list(self._js_dependencies)
====pyecharts.custom.grid.py(file) end====

====pyecharts.custom.overlap.py(file) start====

from pyecharts import template
from pyecharts.constants import PAGE_TITLE


class Overlap(object):

    def __init__(self, page_title=PAGE_TITLE):
        self._chart = None
        self._js_dependencies = set()
        self._page_title = page_title

    def add(self, chart,
            xaxis_index=0,
            yaxis_index=0,
            is_add_xaxis=False,
            is_add_yaxis=False):
        if self._chart is None:
            self._chart = chart
            self._series_id = chart._option.get('series')[0].get('seriesId')
            self._js_dependencies = chart._js_dependencies
        else:
            _series = (
                chart._option.get('legend')[0].get('data'),
                chart._option.get('series'),
                chart._option.get('xAxis')[0],
                chart._option.get('yAxis')[0],
                is_add_xaxis,
                is_add_yaxis,
                xaxis_index,
                yaxis_index
            )
            self.__custom(_series)
            self._js_dependencies = self._js_dependencies.union(chart._js_dependencies)
        self._option = self._chart._option

    def __custom(self, series):
        (_name, _series, _xaxis, _yaxis, is_add_xaxis, is_add_yaxis,
         _xaxis_index, _yaxis_index) = series
        for n in _name:
            self._chart._option.get('legend')[0].get('data').append(n)
        for s in _series:
            s.update(xAxisIndex=_xaxis_index, yAxisIndex=_yaxis_index,
                     seriesId=self._series_id)
            self._chart._option.get('series').append(s)

        if is_add_xaxis:
            self._chart._option.get('xAxis').append(_xaxis)
        if is_add_yaxis:
            self._chart._option.get('yAxis').append(_yaxis)

    def render(self, path="render.html"):
        self._chart.render(path)

    def render_embed(self):
        return self._chart.render_embed()

    def show_config(self):
        self._chart.show_config()

    @property
    def chart(self):
        return self._chart

    @property
    def options(self):
        return self._chart._option

    def _repr_html_(self):
        return self._chart._repr_html_()

    def get_js_dependencies(self):
        return template.produce_html_script_list(self._js_dependencies)
====pyecharts.custom.overlap.py(file) end====

====pyecharts.custom.page.py(file) start====

import pyecharts.constants as constants
from pyecharts.template import (
    produce_html_script_list)


class Page(object):
    def __init__(self, jshost=None, page_title=constants.PAGE_TITLE):
        self.__charts = []
        self._page_title = page_title
        self._jshost = jshost if jshost else constants.CONFIGURATION['HOST']

    def add(self, achart_or_charts):
        if isinstance(achart_or_charts, list):
            self.__charts.extend(achart_or_charts)
        else:
            self.__charts.append(achart_or_charts)

    def render(self, path="render.html"):
        raise Exception("Not Implemented")

    def get_js_dependencies(self):
        unordered_js_dependencies = self._merge_dependencies()
        return produce_html_script_list(unordered_js_dependencies)

    def _merge_dependencies(self):
        dependencies = set()
        for chart in self.__charts:
            dependencies = dependencies.union(chart._js_dependencies)
        if len(dependencies) > 1:
            dependencies.remove('echarts')
            dependencies = ['echarts'] + list(dependencies)
        return dependencies
====pyecharts.custom.page.py(file) end====

====pyecharts.custom.timeline.py(file) start====

import pprint
from pyecharts import template
from pyecharts.constants import PAGE_TITLE


class Timeline(object):

    def __init__(self, page_title=PAGE_TITLE,
                 is_auto_play=False,
                 is_loop_play=True,
                 is_rewind_play=False,
                 is_timeline_show=True,
                 timeline_play_interval=2000,
                 timeline_symbol="emptyCircle",
                 timeline_symbol_size=10,
                 timeline_left="auto",
                 timeline_right="auto",
                 timeline_top="auto",
                 timeline_bottom="atuo"):

        self._chart = None
        self._page_title = page_title
        self._js_dependencies = set()
        self._time_points = []
        self._timeline_options = {
            "baseOption": {
                "timeline": {
                    "axisType": "category",
                    "autoPlay": is_auto_play,
                    "loop": is_loop_play,
                    "rewind": is_rewind_play,
                    "show": is_timeline_show,
                    "symbol": timeline_symbol,
                    "symbolSize": timeline_symbol_size,
                    "playInterval": timeline_play_interval,
                    "left": timeline_left,
                    "right": timeline_right,
                    "top": timeline_top,
                    "bottom": timeline_bottom
            }},
            "options": []
        }

    def add(self, chart, time_point):
        self._chart = chart
        self._js_dependencies = self._js_dependencies.union(chart._js_dependencies)
        self.__check_components(chart)
        self._time_points.append(time_point)
        self._timeline_options.get('baseOption').update(
            legend=chart._option.get('legend'),
            backgroundColor=chart._option.get('backgroundColor')
        )
        self._timeline_options.get('baseOption').get('timeline').update(
            data=self._time_points
        )
        self._timeline_options.get('options').append({
            "series": chart._option.get('series'),
            "title": chart._option.get('title')
        })

    def show_config(self):
        pprint.pprint(self._timeline_options)

    def render(self, path="render.html"):
        self._chart._option = self._timeline_options
        self._chart.render(path)

    def render_embed(self):
        self._chart._option = self._timeline_options
        return self._chart.render_embed()

    @property
    def chart(self):
        return self._chart

    @property
    def options(self):
        return self._timeline_options

    def _repr_html_(self):
        return self._chart._repr_html_()

    def get_js_dependencies(self):
        return template.produce_html_script_list(self._js_dependencies)

    def __check_components(self, chart):
        _grid = chart._option.get('grid', None)
        if _grid is not None:
            self._timeline_options.get('baseOption').update(grid=_grid)

        _xaxis = chart._option.get('xAxis', None)
        if _xaxis is not None:
            self._timeline_options.get('baseOption').update(xAxis=_xaxis)

        _yaxis = chart._option.get('yAxis', None)
        if _yaxis is not None:
            self._timeline_options.get('baseOption').update(yAxis=_yaxis)

        _polar = chart._option.get('polar', None)
        if _polar is not None:
            self._timeline_options.get('baseOption').update(polar=_polar)

        _radiusAxis = chart._option.get('radiusAxis', None)
        if _radiusAxis is not None:
            self._timeline_options.get('baseOption').update(radiusAxis=_radiusAxis)

        _angleAxis = chart._option.get('angleAxis', None)
        if _angleAxis is not None:
            self._timeline_options.get('baseOption').update(angleAxis=_angleAxis)

        _radar = chart._option.get('radar', None)
        if _radar is not None:
            self._timeline_options.get('baseOption').update(radar=_radar)

        _visualMap = chart._option.get('visualMap', None)
        if _visualMap is not None:
            self._timeline_options.get('baseOption').update(visualMap=_visualMap)

        _geo = chart._option.get('geo', None)
        if _geo is not None:
            self._timeline_options.get('baseOption').update(geo=_geo)

        _datazoom = chart._option.get('dataZoom', None)
        if _geo is not None:
            self._timeline_options.get('baseOption').update(dataZoom=_datazoom)

        _parallelAxis = chart._option.get('parallelAxis', None)
        if _parallelAxis is not None:
            self._timeline_options.get('baseOption').update(parallelAxis=_parallelAxis)
====pyecharts.custom.timeline.py(file) end====

====pyecharts.option.py(file) start====
from __future__ import unicode_literals

import random

fs = []


def collectfuncs(func):
    fs.append(func)
    return func


@collectfuncs
def label(type=None,
          is_label_show=False,
          is_label_emphasis=True,
          label_pos=None,
          label_text_color="#000",
          label_text_size=12,
          label_formatter=None,
          label_emphasis_pos=None,
          label_emphasis_textcolor='#fff',
          label_emphasis_textsize=12,
          **kwargs):
    if label_pos is None:
        label_pos = "outside" if type in ["pie", "graph"] else "top"
    _label = {
        "normal": {
            "show": is_label_show,
            "position": label_pos,
            "textStyle": {
                "color": label_text_color,
                "fontSize": label_text_size
            }},
        "emphasis": {
            "show": is_label_emphasis,
            "position": label_emphasis_pos,
            "textStyle": {
                "color": label_emphasis_textcolor,
                "fontSize": label_emphasis_textsize,
            }}
    }

    if label_formatter is None:
        if type == "pie":
            label_formatter = "{b}: {d}%"
    if type != "graph":
        _label.get("normal").update(formatter=label_formatter)
    return _label


@collectfuncs
def color(colorlst=None,
          is_random=False,
          label_color=None,
          **kwargs):
    if colorlst is None:
        colorlst = []
    if label_color:
        for color in reversed(list(label_color)):
            colorlst.insert(0, color)
    if is_random:
        random.shuffle(colorlst)
    return colorlst


@collectfuncs
def line_style(type=None,
               line_width=1,
               line_opacity=1,
               line_curve=0,
               line_type="solid",
               line_color=None,
               **kwargs):
    if line_color is None and type == "graph":
        line_color = '#aaa'

    _line_style = {
        "normal": {
            "width": line_width,
            "opacity": line_opacity,
            "curveness": line_curve,
            "type": line_type,
            "color": line_color
        }
    }
    return _line_style


@collectfuncs
def split_line(is_splitline_show=True, **kwargs):
    _split_line = {
        "show": is_splitline_show,
        "lineStyle": line_style(**kwargs)
    }
    return _split_line


@collectfuncs
def axis_line(is_axisline_show=True, **kwargs):
    _axis_line = {
        "show": is_axisline_show,
        "lineStyle": line_style(**kwargs)
    }
    return _axis_line


@collectfuncs
def split_area(is_area_show=True, **kwargs):
    _split_area = {
        "show": is_area_show,
        "areaStyle": area_style(**kwargs)
    }
    return _split_area


@collectfuncs
def area_style(flag=False,
               area_opacity=None,
               area_color=None,
               **kwargs):
    if area_opacity is None:
        area_opacity = 0 if flag else 1
    _area_style = {
        "opacity": area_opacity,
        "color": area_color
    }
    return _area_style


@collectfuncs
def xy_axis(type=None,
            x_axis=None,
            xaxis_margin=8,
            xaxis_name_size=14,
            xaxis_name_gap=25,
            xaxis_name="",
            xaxis_name_pos="middle",
            xaxis_rotate=0,
            xaxis_min=None,
            xaxis_max=None,
            xaxis_type=None,
            xaxis_interval="auto",
            xaxis_force_interval=None,
            xaxis_pos=None,
            yaxis_margin=8,
            yaxis_name_size=14,
            yaxis_name_gap=25,
            yaxis_name="",
            yaxis_name_pos="middle",
            yaxis_rotate=0,
            yaxis_min=None,
            yaxis_max=None,
            yaxis_type=None,
            yaxis_interval="auto",
            yaxis_force_interval=None,
            yaxis_pos=None,
            yaxis_formatter="",
            is_convert=False,
            is_xaxis_inverse=False,
            is_yaxis_inverse=False,
            is_xaxislabel_align=False,
            is_yaxislabel_align=False,
            is_xaxis_boundarygap=True,
            is_yaxis_boundarygap=True,
            is_xaxis_show=True,
            is_yaxis_show=True,
            **kwargs):
    _xAxis = {
        "name": xaxis_name,
        "show": is_xaxis_show,
        "nameLocation": xaxis_name_pos,
        "nameGap": xaxis_name_gap,
        "nameTextStyle": {"fontSize": xaxis_name_size},
        "axisLabel": {
            "interval": xaxis_interval,
            "rotate": xaxis_rotate,
            "margin": xaxis_margin
        },
        "axisTick": {
            "alignWithLabel": is_xaxislabel_align
        },
        "inverse": is_xaxis_inverse,
        "position": xaxis_pos,
        "boundaryGap": is_xaxis_boundarygap,
        "min": xaxis_min,
        "max": xaxis_max
    }
    _yAxis = {
        "name": yaxis_name,
        "show": is_yaxis_show,
        "nameLocation": yaxis_name_pos,
        "nameGap": yaxis_name_gap,
        "nameTextStyle": {"fontSize": yaxis_name_size},
        "axisLabel": {
            "formatter": "{value} " + yaxis_formatter,
            "rotate": yaxis_rotate,
            "interval": yaxis_interval,
            "margin": yaxis_margin
        },
        "axisTick": {
            "alignWithLabel": is_yaxislabel_align
        },
        "inverse": is_yaxis_inverse,
        "position": yaxis_pos,
        "boundaryGap": is_yaxis_boundarygap,
        "min": yaxis_min,
        "max": yaxis_max
    }

    if xaxis_type is None:
        xaxis_type = "value" if type == "scatter" else "category"
    if yaxis_type is None:
        yaxis_type = "value"

    if is_convert:
        xaxis_type, yaxis_type = yaxis_type, xaxis_type
        _xAxis.update(type=xaxis_type)
        _yAxis.update(data=x_axis, type=yaxis_type)
    else:
        _xAxis.update(data=x_axis, type=xaxis_type)
        _yAxis.update(type=yaxis_type)

    if xaxis_force_interval is not None:
        _xAxis.update(interval=xaxis_force_interval)
    if yaxis_force_interval is not None:
        _yAxis.update(interval=yaxis_force_interval)

    return [_xAxis], [_yAxis]


def _mark(data,
          mark_point_symbol='pin',
          mark_point_symbolsize=50,
          mark_point_textcolor='#fff',
          mark_line_symbolsize=10,
          mark_line_valuedim=None,
          _is_markline=False,
          **kwargs):
    mark = {"data": []}
    if data:
        for d in list(data):
            if isinstance(d, dict):
                _coord = d.get('coord', None)
                _pname = d.get('name', None)
                _marktmp = {
                    "coord": _coord,
                    "name": _pname,
                    "symbol": mark_point_symbol,
                    "symbolSize": mark_point_symbolsize,
                    "label": {"normal": {
                        "textStyle": {"color": mark_point_textcolor}}
                    }}
                mark.get("data").append(_marktmp)
            else:
                _type, _name = "", ""
                if "max" in d:
                    _type, _name = "max", "Maximum"
                elif "min" in d:
                    _type, _name = "min", "Minimum"
                elif "average" in d:
                    _type, _name = "average", "mean-Value"

                if _is_markline:
                    _marktmp = {
                        "type": _type,
                        "name": _name,
                        'valueDim': mark_line_valuedim,
                    }
                    if _type:
                        mark.get("data").append(_marktmp)
                        mark.update(symbolSize=mark_line_symbolsize)
                else:
                    _marktmp = {"type": _type, "name": _name}
                    _marktmp.update(
                        symbol=mark_point_symbol,
                        symbolSize=mark_point_symbolsize,
                        label={"normal": {
                            "textStyle": {"color": mark_point_textcolor}}
                        })
                    if _type:
                        mark.get("data").append(_marktmp)
    return mark


@collectfuncs
def mark_point(mark_point=None, **kwargs):
    return _mark(mark_point, **kwargs)


@collectfuncs
def mark_line(mark_line=None, **kwargs):
    return _mark(mark_line, _is_markline=True, **kwargs)


@collectfuncs
def legend(is_legend_show=True,
           legend_orient="horizontal",
           legend_pos="center",
           legend_top='top',
           legend_selectedmode='multiple',
           legend_text_size=12,
           legend_text_color='#333',
           **kwargs):
    _legend = {
        "selectedMode": legend_selectedmode,
        "show": is_legend_show,
        "left": legend_pos,
        "top": legend_top,
        "orient": legend_orient,
        "textStyle": {
            "fontSize": legend_text_size,
            "color": legend_text_color,
        }
    }
    return _legend


@collectfuncs
def visual_map(visual_type='color',
               visual_range=None,
               visual_text_color=None,
               visual_range_text=None,
               visual_range_color=None,
               visual_range_size=None,
               visual_orient='vertical',
               visual_pos="left",
               visual_top="bottom",
               visual_split_number=5,
               visual_dimension=None,
               is_calculable=True,
               is_piecewise=False,
               **kwargs):
    _min, _max = 0, 100
    if visual_range:
        if len(visual_range) == 2:
            _min, _max = visual_range

    _tlow, _thigh = "low", "high"
    if visual_range_text:
        if len(visual_range_text) == 2:
            _tlow, _thigh = visual_range_text

    _inrange_op = {}
    if visual_type == 'color':
        range_color = ['#50a3ba', '#eac763', '#d94e5d']
        if visual_range_color:
            if len(visual_range_color) >= 2:
                range_color = visual_range_color
        _inrange_op.update(color=range_color)

    if visual_type == 'size':
        range_size = [20, 50]
        if visual_range_size:
            if len(visual_range_size) >= 2:
                range_size = visual_range_size
        _inrange_op.update(symbolSize=range_size)

    _type = "piecewise" if is_piecewise else "continuous"

    _visual_map = {
        "type": _type,
        "min": _min,
        "max": _max,
        "text": [_thigh, _tlow],
        "textStyle": {"color": visual_text_color},
        "inRange": _inrange_op,
        "calculable": is_calculable,
        "splitNumber": visual_split_number,
        "dimension": visual_dimension,
        "orient": visual_orient,
        "left": visual_pos,
        "top": visual_top,
        "showLabel": True,
    }
    return _visual_map


def gen_color():
    return "rgb(%s,%s,%s)" % (random.randint(0, 160),
                              random.randint(0, 160),
                              random.randint(0, 160))


@collectfuncs
def symbol(type=None, symbol="", **kwargs):
    if symbol is None:  # Radar
        symbol = 'none'
    elif type == "line" and symbol == "":  # Line
        symbol = "emptyCircle"
    elif symbol not in ('rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow'):
        symbol = 'circle'
    return symbol


@collectfuncs
def effect(effect_brushtype="stroke",
           effect_scale=2.5,
           effect_period=4,
           **kwargs):
    _effect = {
        "brushType": effect_brushtype,
        "scale": effect_scale,
        "period":effect_period
    }
    return _effect


@collectfuncs
def datazoom(is_datazoom_show=False,
             datazoom_type='slider',
             datazoom_range=None,
             datazoom_orient='horizontal',
             datazoom_xaxis_index=None,
             datazoom_yaxis_index=None,
             **kwargs):
    _min, _max = 50, 100
    if datazoom_range:
        if len(datazoom_range) == 2:
            _min, _max = datazoom_range
    if datazoom_type not in ("slider", "inside", "both"):
        datazoom_type = "slider"
    _datazoom = []
    _datazoom_config = {
        "show": is_datazoom_show,
        "type": "slider",
        "start": _min,
        "end": _max,
        "orient": datazoom_orient,
        "xAxisIndex": datazoom_xaxis_index,
        "yAxisIndex": datazoom_yaxis_index
    }
    if datazoom_type == "both":
        _datazoom.append(_datazoom_config.copy())
        datazoom_type = 'inside'
    _datazoom_config['type'] = datazoom_type
    _datazoom.append(_datazoom_config)
    return _datazoom


@collectfuncs
def grid(grid_width=None,
         grid_height=None,
         grid_top=None,
         grid_bottom=None,
         grid_left=None,
         grid_right=None,
         **kwargs):
    _grid = {}
    if grid_width is not None:
        _grid.update(width=grid_width)
    if grid_height is not None:
        _grid.update(height=grid_height)
    if grid_top is not None:
        _grid.update(top=grid_top)
    if grid_bottom is not None:
        _grid.update(bottom=grid_bottom)
    if grid_left is not None:
        _grid.update(left=grid_left)
    if grid_right is not None:
        _grid.update(right=grid_right)
    return _grid


@collectfuncs
def grid3D(grid3d_width=100,
           grid3d_height=100,
           grid3d_depth=100,
           grid3d_rotate_speed=10,
           grid3d_rotate_sensitivity=1,
           is_grid3d_rotate=False,
           **kwargs):
    _grid3D = {
        "boxWidth": grid3d_width,
        "boxHeight": grid3d_height,
        "boxDepth": grid3d_depth,
        "viewControl": {
            "autoRotate": is_grid3d_rotate,
            "autoRotateSpeed": grid3d_rotate_speed,
            "rotateSensitivity": grid3d_rotate_sensitivity
        }
    }
    return _grid3D


@collectfuncs
def xaxis3D(xaxis3d_type=None,
            xaxis3d_name="",
            xaxis3d_name_size=16,
            xaxis3d_name_gap=20,
            xaxis3d_min=None,
            xaxis3d_max=None,
            xaxis3d_interval="auto",
            xaxis3d_margin=8,
            **kwargs):
    _xaxis3D = {
        "name": xaxis3d_name,
        "nameGap": xaxis3d_name_gap,
        "nameTextStyle": {"fontSize": xaxis3d_name_size},
        "type": xaxis3d_type,
        "min": xaxis3d_min,
        "max": xaxis3d_max,
        "axisLabel": {
            "margin": xaxis3d_margin,
            "interval": xaxis3d_interval
        }
    }
    return _xaxis3D


@collectfuncs
def yaxis3D(yaxis3d_type=None,
            yaxis3d_name="",
            yaxis3d_name_size=16,
            yaxis3d_name_gap=20,
            yaxis3d_min=None,
            yaxis3d_max=None,
            yaxis3d_interval="auto",
            yaxis3d_margin=8,
            **kwargs):
    _yaxis3D = {
        "name": yaxis3d_name,
        "nameGap": yaxis3d_name_gap,
        "nameTextStyle": {"fontSize": yaxis3d_name_size},
        "type": yaxis3d_type,
        "min": yaxis3d_min,
        "max": yaxis3d_max,
        "axisLabel": {
            "margin": yaxis3d_margin,
            "interval": yaxis3d_interval
        }
    }
    return _yaxis3D


@collectfuncs
def zaxis3D(zaxis3d_type=None,
            zaxis3d_name="",
            zaxis3d_name_size=16,
            zaxis3d_name_gap=20,
            zaxis3d_min=None,
            zaxis3d_max=None,
            zaxis3d_margin=8,
            **kwargs):
    _zaxis3D = {
        "name": zaxis3d_name,
        "nameGap": zaxis3d_name_gap,
        "nameTextStyle": {"fontSize": zaxis3d_name_size},
        "type": zaxis3d_type,
        "min": zaxis3d_min,
        "max": zaxis3d_max,
        "axisLabel": {
            "margin": zaxis3d_margin,
        }
    }
    return _zaxis3D


@collectfuncs
def tooltip(type=None,
            tooltip_tragger="item",
            tooltip_tragger_on="mousemove|click",
            tooltip_axispointer_type="line",
            tooltip_formatter=None,
            tooltip_text_color="#fff",
            tooltip_font_size=14,
            **kwargs):
    if tooltip_formatter is None:
        if type == "gauge":
            tooltip_formatter = "{a} <br/>{b} : {c}%"
        elif type == "geo":
            tooltip_formatter = "{b}: {c}"

    _tooltip = {
        "trigger": tooltip_tragger,
        "triggerOn": tooltip_tragger_on,
        "axisPointer": {"type": tooltip_axispointer_type},
        "formatter": tooltip_formatter,
        "textStyle": {
            "color": tooltip_text_color,
            "fontSize": tooltip_font_size
        }
    }
    return _tooltip


@collectfuncs
def calendar(calendar_date_range=None,
             calendar_cell_size=None,
             **kwargs):

    if calendar_cell_size is None:
        calendar_cell_size = ['auto', 20]

    _calendar = {
        "range": calendar_date_range,
        "cellSize": calendar_cell_size
    }
    return _calendar


def get_all_options(**kwargs):
    _funcs = {}
    for f in fs:
        _funcs[f.__name__] = f(**kwargs)
    return _funcs
====pyecharts.option.py(file) end====

====pyecharts.template.py(file) start====
from __future__ import unicode_literals

import pyecharts.constants as constants
from pyecharts.utils import get_resource_dir


def produce_require_configuration(dependencies, jshost):
    _d = ensure_echarts_is_in_the_front(dependencies)
    require_conf_items = [
        "'%s': '%s/%s'" % (key,
                           jshost,
                           constants.DEFAULT_JS_LIBRARIES.get(key, key))
        for key in _d]
    require_libraries = ["'%s'" % key for key in _d]
    return dict(
        config_items=require_conf_items,
        libraries=require_libraries
    )


def produce_html_script_list(dependencies):
    _d = ensure_echarts_is_in_the_front(dependencies)
    script_list = [
        '%s' % constants.DEFAULT_JS_LIBRARIES.get(key, key)
        for key in _d]
    return script_list


def ensure_echarts_is_in_the_front(dependencies):
    if len(dependencies) > 1:
        dependencies.remove('echarts')
        dependencies = ['echarts'] + list(dependencies)
    elif len(dependencies) == 1:
        dependencies = list(dependencies)
    else:
        raise Exception("No js library found. Nothing works!")
    return dependencies


def online(host=constants.DEFAULT_HOST):
    constants.CONFIGURATION['HOST'] = host
====pyecharts.template.py(file) end====

====pyecharts.utils.py(file) start====
from __future__ import unicode_literals

import re
import os
import sys
import codecs


PY2 = sys.version_info[0] == 2

JS_PATTERN = re.compile(r'<!-- build -->(.*)<!-- endbuild -->',
                        re.IGNORECASE | re.MULTILINE | re.DOTALL)
JS_SRC_PATTERN = re.compile(r'src=\"(.*?)\"')


def freeze_js(html_content):
    matches = JS_PATTERN.finditer(html_content)

    if not matches:
        return html_content

    for match in reversed(tuple(matches)):
        src_matches = JS_SRC_PATTERN.findall(match.group(1))

        js_content = ""
        for src in src_matches:
            src = src.strip()
            src = src.split('/')
            file_path = os.path.join(
                get_resource_dir('templates'), *src)

            with codecs.open(file_path, "r", "utf-8") as f:
                js_content += f.read() + '\n'
        fmt = '<script type="text/javascript">{}</script>'
        js_content = fmt.format(js_content)
        html_content = (html_content[:match.start()] + js_content +
                        html_content[match.end():])

    return html_content


def get_resource_dir(folder):
    current_path = os.path.dirname(__file__)
    resource_path = os.path.join(current_path, folder)
    return resource_path


def write_utf8_html_file(file_name, html_content):
    if PY2:
        html = html_content.encode('utf-8')
        with open(file_name, "w+") as fout:
            fout.write(html)
    else:
        with open(file_name, "w+", encoding="utf-8") as fout:
            fout.write(html_content)
====pyecharts.utils.py(file) end====

====random.js(file) start====
// Javascript implementation of the random module
// Based on Ian Bicking's implementation of the Mersenne twister

var $module = (function($B){

_b_ = $B.builtins

var VERSION = 3

// Code copied from https://github.com/ianb/whrandom/blob/master/mersenne.js
// by Ian Bicking

// this program is a JavaScript version of Mersenne Twister,
// a straight conversion from the original program, mt19937ar.c,
// translated by y. okada on july 17, 2006.
// and modified a little at july 20, 2006, but there are not any substantial differences.
// modularized by Ian Bicking, March 25, 2013 (found original version at http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/VERSIONS/JAVASCRIPT/java-script.html)
// in this program, procedure descriptions and comments of original source code were not removed.
// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.
// lines commented with /* and */ are original comments.
// lines commented with // are additional comments in this JavaScript version.
/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

function RandomStream(seed) {

  /*jshint bitwise:false */
  /* Period parameters */
  //c//#define N 624
  //c//#define M 397
  //c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */
  //c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */
  //c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */
  var N = 624;
  var M = 397;
  var MATRIX_A = 0x9908b0df;   /* constant vector a */
  var UPPER_MASK = 0x80000000; /* most significant w-r bits */
  var LOWER_MASK = 0x7fffffff; /* least significant r bits */
  //c//static unsigned long mt[N]; /* the array for the state vector  */
  //c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
  var mt = new Array(N);   /* the array for the state vector  */
  var mti = N+1;           /* mti==N+1 means mt[N] is not initialized */

  function unsigned32 (n1) // returns a 32-bits unsiged integer from an operand to which applied a bit operator.
  {
    return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1;
  }

  function subtraction32 (n1, n2) // emulates lowerflow of a c 32-bits unsiged integer variable, instead of the operator -. these both arguments must be non-negative integers expressible using unsigned 32 bits.
  {
    return n1 < n2 ? unsigned32((0x100000000 - (n2 - n1)) & 0xffffffff) : n1 - n2;
  }

  function addition32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator +. these both arguments must be non-negative integers expressible using unsigned 32 bits.
  {
    return unsigned32((n1 + n2) & 0xffffffff);
  }

  function multiplication32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator *. these both arguments must be non-negative integers expressible using unsigned 32 bits.
  {
    var sum = 0;
    for (var i = 0; i < 32; ++i){
      if ((n1 >>> i) & 0x1){
        sum = addition32(sum, unsigned32(n2 << i));
      }
    }
    return sum;
  }

  /* initializes mt[N] with a seed */
  //c//void init_genrand(unsigned long s)
  function init_genrand(s) {
    //c//mt[0]= s & 0xffffffff;
    mt[0]= unsigned32(s & 0xffffffff);
    for (mti=1; mti<N; mti++) {
      mt[mti] =
      //c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);
      addition32(multiplication32(1812433253, unsigned32(mt[mti-1] ^ (mt[mti-1] >>> 30))), mti);
      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
      /* In the previous versions, MSBs of the seed affect   */
      /* only MSBs of the array mt[].                        */
      /* 2002/01/09 modified by Makoto Matsumoto             */
      //c//mt[mti] &= 0xffffffff;
      mt[mti] = unsigned32(mt[mti] & 0xffffffff);
      /* for >32 bit machines */
    }
  }

  /* initialize by an array with array-length */
  /* init_key is the array for initializing keys */
  /* key_length is its length */
  /* slight change for C++, 2004/2/26 */
  //c//void init_by_array(unsigned long init_key[], int key_length)
  function init_by_array(init_key, key_length) {
    //c//int i, j, k;
    var i, j, k;
    init_genrand(19650218);
    i=1; j=0;
    k = (N>key_length ? N : key_length);
    for (; k; k--) {
      //c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))
      //c// + init_key[j] + j; /* non linear */
      mt[i] = addition32(addition32(unsigned32(mt[i] ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1664525)), init_key[j]), j);
      mt[i] =
      //c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
      unsigned32(mt[i] & 0xffffffff);
      i++; j++;
      if (i>=N) { mt[0] = mt[N-1]; i=1; }
      if (j>=key_length) {
        j=0;
      }
    }
    for (k=N-1; k; k--) {
      //c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))
      //c//- i; /* non linear */
      mt[i] = subtraction32(unsigned32((mt[i]) ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1566083941)), i);
      //c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
      mt[i] = unsigned32(mt[i] & 0xffffffff);
      i++;
      if (i>=N) { mt[0] = mt[N-1]; i=1; }
    }
    mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
  }

  /* generates a random number on [0,0xffffffff]-interval */
  //c//unsigned long genrand_int32(void)
  function genrand_int32() {
    //c//unsigned long y;
    //c//static unsigned long mag01[2]={0x0UL, MATRIX_A};
    var y;
    var mag01 = [0x0, MATRIX_A];
    /* mag01[x] = x * MATRIX_A  for x=0,1 */

    if (mti >= N) { /* generate N words at one time */
      //c//int kk;
      var kk;

      if (mti == N+1) {   /* if init_genrand() has not been called, */
        init_genrand(Date.now()); /* a default initial seed is used */
      }

      for (kk=0;kk<N-M;kk++) {
        //c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
        //c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
        y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
        mt[kk] = unsigned32(mt[kk+M] ^ (y >>> 1) ^ mag01[y & 0x1]);
      }
      for (;kk<N-1;kk++) {
        //c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
        //c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
        y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
        mt[kk] = unsigned32(mt[kk+(M-N)] ^ (y >>> 1) ^ mag01[y & 0x1]);
      }
      //c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
      //c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
      y = unsigned32((mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK));
      mt[N-1] = unsigned32(mt[M-1] ^ (y >>> 1) ^ mag01[y & 0x1]);
      mti = 0;
    }

    y = mt[mti++];

    /* Tempering */
    //c//y ^= (y >> 11);
    //c//y ^= (y << 7) & 0x9d2c5680;
    //c//y ^= (y << 15) & 0xefc60000;
    //c//y ^= (y >> 18);
    y = unsigned32(y ^ (y >>> 11));
    y = unsigned32(y ^ ((y << 7) & 0x9d2c5680));
    y = unsigned32(y ^ ((y << 15) & 0xefc60000));
    y = unsigned32(y ^ (y >>> 18));

    return y;
  }

  /* generates a random number on [0,0x7fffffff]-interval */
  //c//long genrand_int31(void)
  function genrand_int31() {
    //c//return (genrand_int32()>>1);
    return (genrand_int32()>>>1);
  }

  /* generates a random number on [0,1]-real-interval */
  //c//double genrand_real1(void)
  function genrand_real1() {
    return genrand_int32()*(1.0/4294967295.0);
    /* divided by 2^32-1 */
  }

  /* generates a random number on [0,1)-real-interval */
  //c//double genrand_real2(void)
  function genrand_real2() {
    return genrand_int32()*(1.0/4294967296.0);
    /* divided by 2^32 */
  }

  /* generates a random number on (0,1)-real-interval */
  //c//double genrand_real3(void)
  function genrand_real3() {
    return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);
    /* divided by 2^32 */
  }

  /* generates a random number on [0,1) with 53-bit resolution*/
  //c//double genrand_res53(void)
  function genrand_res53() {
    //c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;
    var a=genrand_int32()>>>5, b=genrand_int32()>>>6;
    return (a*67108864.0+b)*(1.0/9007199254740992.0);
  }
  /* These real versions are due to Isaku Wada, 2002/01/09 added */

  var random = genrand_res53;

  random.seed = function (seed) {
    if (! seed) {
      seed = Date.now();
    }
    if (typeof seed != "number") {
      seed = parseInt(seed, 10);
    }
    if ((seed !== 0 && ! seed) || isNaN(seed)) {
      throw "Bad seed";
    }
    init_genrand(seed);
  };

  random.seed(seed);

  random.int31 = genrand_int31;
  random.real1 = genrand_real1;
  random.real2 = genrand_real2;
  random.real3 = genrand_real3;
  random.res53 = genrand_res53;

  // Added for compatibility with Python
  random.getstate = function(){return [VERSION, mt, mti]}

  random.setstate = function(state){
    mt = state[1]
    mti = state[2]
  }

  return random;

}

function _Random(){
    var _random = RandomStream()

    _b_ = $B.builtins

    var NV_MAGICCONST = 4 * Math.exp(-0.5)/Math.sqrt(2),
        gauss_next = null

    function _randbelow(x){
        return Math.floor(x*_random())
    }

    function _urandom(n){
        /*
        urandom(n) -> str
        Return n random bytes suitable for cryptographic use.
        */

        var randbytes= []
        for(i=0;i<n;i++){randbytes.push(parseInt(_random()*256))}
        return _b_.bytes(randbytes)
    }

    var res = {
        // magic constants
        NV_MAGICCONST: 1.71552776992141,
        TWOPI: 6.28318530718,
        LOG4: 1.38629436111989,
        SG_MAGICCONST: 2.50407739677627,

        choice: function(seq){
            var $ = $B.args('choice', 1,
                {seq:null},['seq'],arguments, {}, null, null),
                seq = $.seq
            var len, rank
            if(Array.isArray(seq)){len = seq.length}
            else{len = _b_.getattr(seq,'__len__')()}
            if(len==0){throw _b_.IndexError("Cannot choose from an empty sequence")}
            rank = parseInt(_random()*len)
            if(Array.isArray(seq)){return seq[rank]}
            else{return _b_.getattr(seq,'__getitem__')(rank)}
        },

        expovariate: function(lambd){
            /*
            Exponential distribution.

            lambd is 1.0 divided by the desired mean.  It should be
            nonzero.  (The parameter would be called "lambda", but that is
            a reserved word in Python.)  Returned values range from 0 to
            positive infinity if lambd is positive, and from negative
            infinity to 0 if lambd is negative.

            */
            // lambd: rate lambd = 1/mean
            // ('lambda' is a Python reserved word)

            // we use 1-random() instead of random() to preclude the
            // possibility of taking the log of zero.
            return -Math.log(1.0 - _random())/lambd
        },

        gammavariate: function(alpha, beta){
            /* Gamma distribution.  Not the gamma function!

            Conditions on the parameters are alpha > 0 and beta > 0.

            The probability distribution function is:

                        x ** (alpha - 1) * math.exp(-x / beta)
              pdf(x) =  --------------------------------------
                          math.gamma(alpha) * beta ** alpha

            */

            // alpha > 0, beta > 0, mean is alpha*beta, variance is alpha*beta**2

            // Warning: a few older sources define the gamma distribution in terms
            // of alpha > -1.0

            var $ = $B.args('gammavariate', 2,
                    {alpha:null, beta:null}, ['alpha', 'beta'],
                    arguments, {}, null, null),
                alpha = $.alpha,
                beta = $.beta,
                LOG4 = Math.log(4),
                SG_MAGICCONST = 1.0 + Math.log(4.5)

            if(alpha <= 0.0 || beta <= 0.0){
                throw _b_.ValueError('gammavariate: alpha and beta must be > 0.0')
            }

            if(alpha > 1.0){

                // Uses R.C.H. Cheng, "The generation of Gamma
                // variables with non-integral shape parameters",
                // Applied Statistics, (1977), 26, No. 1, p71-74

                var ainv = Math.sqrt(2.0 * alpha - 1.0),
                    bbb = alpha - LOG4,
                    ccc = alpha + ainv

                while(true){
                    var u1 = _random()
                    if(!((1e-7 < u1) && (u1 < .9999999))){
                        continue
                    }
                    var u2 = 1.0 - _random(),
                        v = Math.log(u1/(1.0-u1))/ainv,
                        x = alpha*Math.exp(v),
                        z = u1*u1*u2,
                        r = bbb+ccc*v-x
                    if((r + SG_MAGICCONST - 4.5*z >= 0.0) || r >= Math.log(z)){
                        return x * beta
                    }
                }
            }else if(alpha == 1.0){
                // expovariate(1)
                var u = _random()
                while(u <= 1e-7){u = _random()}
                return -Math.log(u) * beta
            }else{
                // alpha is between 0 and 1 (exclusive)

                // Uses ALGORITHM GS of Statistical Computing - Kennedy & Gentle

                while(true){
                    var u = _random(),
                        b = (Math.E + alpha)/Math.E,
                        p = b*u,
                        x
                    if(p <= 1.0){x = Math.pow(p, (1.0/alpha))}
                    else{x = -Math.log((b-p)/alpha)}
                    var u1 = _random()
                    if(p > 1.0){
                        if(u1 <= Math.pow(x, alpha - 1.0)){
                            break
                        }
                    }else if(u1 <= Math.exp(-x)){
                        break
                    }
                }
                return x * beta
            }
        },

        gauss:function(){

            /* Gaussian distribution.

            mu is the mean, and sigma is the standard deviation.  This is
            slightly faster than the normalvariate() function.

            Not thread-safe without a lock around calls.

            # When x and y are two variables from [0, 1), uniformly
            # distributed, then
            #
            #    cos(2*pi*x)*sqrt(-2*log(1-y))
            #    sin(2*pi*x)*sqrt(-2*log(1-y))
            #
            # are two *independent* variables with normal distribution
            # (mu = 0, sigma = 1).
            # (Lambert Meertens)
            # (corrected version; bug discovered by Mike Miller, fixed by LM)

            # Multithreading note: When two threads call this function
            # simultaneously, it is possible that they will receive the
            # same return value.  The window is very small though.  To
            # avoid this, you have to use a lock around all calls.  (I
            # didn't want to slow this down in the serial case by using a
            # lock here.)
            */

            var $ = $B.args('gauss', 2, {mu:null, sigma:null},
                    ['mu', 'sigma'], arguments, {}, null, null),
                mu = $.mu,
                sigma = $.sigma

            var z = gauss_next
            gauss_next = null
            if(z===null){
                var x2pi = _random() * Math.PI * 2,
                    g2rad = Math.sqrt(-2.0 * Math.log(1.0 - _random())),
                    z = Math.cos(x2pi) * g2rad
                gauss_next = Math.sin(x2pi) * g2rad
            }
            return mu + z*sigma
        },

        getrandbits: function(k){
            var $ = $B.args('getrandbits', 1,
                {k:null},['k'],arguments, {}, null, null),
                k = $B.$GetInt($.k)
            // getrandbits(k) -> x.  Generates a long int with k random bits.
            if(k <= 0){
                throw _b_.ValueError('number of bits must be greater than zero')
            }
            if(k != _b_.int(k)){
                throw _b_.TypeError('number of bits should be an integer')
            }
            var numbytes = (k + 7), // bits / 8 and rounded up
                x = _b_.int.$dict.from_bytes(_urandom(numbytes), 'big')
            return _b_.getattr(x, '__rshift__')(
                _b_.getattr(numbytes*8,'__sub__')(k))
        },

        getstate: function(){
            // Return internal state; can be passed to setstate() later.
            var $ = $B.args('getstate', 0, {}, [], arguments, {}, null, null)
            return _random.getstate()
        },

        normalvariate: function(mu, sigma){
            /*
            Normal distribution.

            mu is the mean, and sigma is the standard deviation.

            */

            // mu = mean, sigma = standard deviation

            // Uses Kinderman and Monahan method. Reference: Kinderman,
            // A.J. and Monahan, J.F., "Computer generation of random
            // variables using the ratio of uniform deviates", ACM Trans
            // Math Software, 3, (1977), pp257-260.

            var $=$B.args('normalvariate', 2,
                {mu:null, sigma:null}, ['mu', 'sigma'],
                arguments, {}, null, null),
                mu = $.mu,
                sigma = $.sigma

            while(true){
                var u1 = _random(),
                    u2 = 1.0 - _random(),
                    z = NV_MAGICCONST*(u1-0.5)/u2,
                    zz = z*z/4.0
                if(zz <= -Math.log(u2)){break}
            }
            return mu + z*sigma
        },

        paretovariate: function(){
            /* Pareto distribution.  alpha is the shape parameter.*/
            // Jain, pg. 495

            var $ = $B.args('paretovariate', 1, {alpha:null}, ['alpha'],
                        arguments, {}, null, null)

            var u = 1 - _random()
            return 1 / Math.pow(u,1/$.alpha)
        },

        randint: function(a, b){
            var $ = $B.args('randint', 2,
                {a:null, b:null},
                ['a', 'b'],
                arguments, {}, null, null)
            return parseInt(_random()*($.b-$.a+1)+$.a)
        },

        random: _random,

        randrange: function(){
            var $ = $B.args('randrange', 3,
                {x:null, stop:null, step:null},
                ['x', 'stop', 'step'],
                arguments, {stop:null, step:null}, null, null)
            if($.stop===null){
                var start = 0, stop = $.x, step = 1
            }else{
                var start = $.x, stop = $.stop, 
                    step = $.step===null ? 1 : $.step
                if(step==0){throw _b_.ValueError('step cannot be 0')}
            }
            if(typeof start=='number' && typeof stop == 'number' &&
                typeof step=='number'){
                return start+step*Math.floor(_random()*Math.floor((stop-start)/step))
            }else{
                var d = _b_.getattr(stop,'__sub__')(start)
                d = _b_.getattr(d, '__floordiv__')(step)
                // Force d to be a LongInt
                d = $B.LongInt(d)
                // d is a long integer with n digits ; to choose a random number
                // between 0 and d the most simple is to take a random digit
                // at each position, except the first one
                var s = d.value, _len = s.length,
                    res = Math.floor(_random()*(parseInt(s.charAt(0))+(_len==1 ? 0 : 1)))+''
                var same_start = res.charAt(0)==s.charAt(0)
                for(var i=1;i<_len;i++){
                    if(same_start){
                        // If it's the last digit, don't allow stop as valid
                        if(i==_len-1){
                            res += Math.floor(_random()*parseInt(s.charAt(i)))+''
                        }else{
                            res += Math.floor(_random()*(parseInt(s.charAt(i))+1))+''
                            same_start = res.charAt(i)==s.charAt(i)
                        }
                    }else{
                        res += Math.floor(_random()*10)+''
                    }
                }
                var offset = {__class__:$B.LongInt.$dict, value: res, 
                    pos: true}
                d = _b_.getattr(step, '__mul__')(offset)
                d = _b_.getattr(start, '__add__')(d)
                return _b_.int(d)
            }
        },

        sample: function(){
            /*
            Chooses k unique random elements from a population sequence or set.

            Returns a new list containing elements from the population while
            leaving the original population unchanged.  The resulting list is
            in selection order so that all sub-slices will also be valid random
            samples.  This allows raffle winners (the sample) to be partitioned
            into grand prize and second place winners (the subslices).

            Members of the population need not be hashable or unique.  If the
            population contains repeats, then each occurrence is a possible
            selection in the sample.

            To choose a sample in a range of integers, use range as an argument.
            This is especially fast and space efficient for sampling from a
            large population:   sample(range(10000000), 60)

            # Sampling without replacement entails tracking either potential
            # selections (the pool) in a list or previous selections in a set.

            # When the number of selections is small compared to the
            # population, then tracking selections is efficient, requiring
            # only a small set and an occasional reselection.  For
            # a larger number of selections, the pool tracking method is
            # preferred since the list takes less space than the
            # set and it doesn't suffer from frequent reselections.'

            */
            var $ = $B.args('sample',2,{population:null,k:null},
                ['population','k'], arguments,{},null,null),
                population = $.population,
                k = $.k

            if(!_b_.hasattr(population, '__len__')){
                throw _b_.TypeError("Population must be a sequence or set.  For dicts, use list(d).")
            }
            var n = _b_.getattr(population, '__len__')()

            if(k<0 || k>n){
                throw _b_.ValueError("Sample larger than population")
            }
            var result = [],
                setsize = 21        // size of a small set minus size of an empty list
            if(k > 5){
                setsize += Math.pow(4, Math.ceil(Math.log(k * 3, 4))) // table size for big sets
            }
            if(n <= setsize){
                // An n-length list is smaller than a k-length set
                if(Array.isArray(population)){
                    var pool = population.slice()
                }else{var pool = _b_.list(population)}
                for(var i=0;i<k;i++){ //invariant:  non-selected at [0,n-i)
                    var j = _randbelow(n-i)
                    result[i] = pool[j]
                    pool[j] = pool[n-i-1]   // move non-selected item into vacancy
                }
            }else{
                selected = {}
                for(var i=0;i<k;i++){
                    var j = _randbelow(n)
                    while(selected[j]!==undefined){
                        j = _randbelow(n)
                    }
                    selected[j] = true
                    result[i] = Array.isArray(population) ? population[j] :
                                    _b_.getattr(population, '__getitem__')(j)
                }
            }
            return result
        },

        seed: function(){
            /*
            Initialize internal state from hashable object.

            None or no argument seeds from current time or from an operating
            system specific randomness source if available.

            If *a* is an int, all bits are used.
            */
            var $=$B.args('seed',2,{a:null, version:null},['a', 'version'],
                    arguments,{a:new Date(), version:2},null,null),
                a = $.a,
                version = $.version

            if(version==1){a = _b_.hash(a)}
            else if(version==2){
                if(_b_.isinstance(a, _b_.str)){
                    a = _b_.int.$dict.from_bytes(_b_.bytes(a, 'utf-8'), 'big')
                }else if(_b_.isinstance(a, [_b_.bytes, _b_.bytearray])){
                    a = _b_.int.$dict.from_bytes(a, 'big')
                }else if(!_b_.isinstance(a, _b_.int)){
                    throw _b_.TypeError('wrong argument')
                }
                if(a.__class__===$B.LongInt.$dict){
                    // In this implementation, seed() only accepts safe integers
                    // Generate a random one from the underlying string value,
                    // using an arbitrary seed (99) to always return the same
                    // integer
                    var numbers = a.value, res = '', pos
                    _random.seed(99)
                    for(var i=0;i<17;i++){
                        pos = parseInt(_random()*numbers.length)
                        res += numbers.charAt(pos)
                    }
                    a = parseInt(res)
                }
            }else{
                throw ValueError('version can only be 1 or 2')
            }

            _random.seed(a)
            gauss_next = null
        },

        setstate: function(state){
            // Restore internal state from object returned by getstate().
            var $ = $B.args('setstate', 1, {state:null}, ['state'], 
                arguments, {}, null, null)
            var state = _random.getstate()
            if(!Array.isArray($.state)){
                throw _b_.TypeError('state must be a list, not '+
                    $B.get_class($.state).__name__)
            }
            if($.state.length<state.length){
                throw _b_.ValueError("need more than "+$.state.length+
                    " values to unpack")
            }else if($.state.length>state.length){
                throw _b_.ValueError("too many values to unpack (expected "+
                    state.length+")")
            }
            if($.state[0]!=3){
                throw _b_.ValueError("ValueError: state with version "+
                    $.state[0]+" passed to Random.setstate() of version 3")
            }
            var second = _b_.list($.state[1])
            if(second.length!==state[1].length){
                throw _b_.ValueError('state vector is the wrong size')
            }
            for(var i=0;i<second.length;i++){
                if(typeof second[i] != 'number'){
                    throw _b_.ValueError('state vector items must be integers')
                }
            }
            _random.setstate($.state)
        },

        shuffle: function(x, random){
            /*
            x, random=random.random -> shuffle list x in place; return None.

            Optional arg random is a 0-argument function returning a random
            float in [0.0, 1.0); by default, the standard random.random.
            */

            var $ = $B.args('shuffle',2,{x:null,random:null},
                ['x','random'],
                arguments,{random:null},null,null),
                x = $.x,
                random = $.random

            if(random===null){random=_random}

            if(Array.isArray(x)){
                for(var i=x.length-1;i>=0;i--){
                    var j = Math.floor(random() * (i+1)),
                        temp = x[j]
                    x[j] = x[i]
                    x[i] = temp
                }
            }else{
                var len = _b_.getattr(x, '__len__')(), temp,
                    x_get = _b_.getattr(x, '__getitem__'),
                    x_set = _b_.getattr(x, '__setitem__')

                for(i=len-1;i>=0;i--){
                    var j = Math.floor(random() * (i+1)),
                        temp = x_get(j)
                    x_set(j, x_get(i))
                    x_set(i, temp)
                }
            }
        },

        triangular: function(){
            /*
            Triangular distribution.

            Continuous distribution bounded by given lower and upper limits,
            and having a given mode value in-between.

            http://en.wikipedia.org/wiki/Triangular_distribution
            */
            var $=$B.args('triangular',3,
                {low:null, high:null, mode:null},
                ['low', 'high', 'mode'],
                arguments,{low:0, high:1, mode:null}, null, null),
                low = $.low,
                high = $.high,
                mode = $.mode

            var u = _random(),
                c = mode===null ? 0.5 : (mode - low) / (high - low)
            if(u > c){
                u = 1 - u
                c = 1 - c
                var temp = low
                low = high
                high = temp
            }
            return low + (high - low) * Math.pow(u * c, 0.5)
        },

        uniform: function(){
            var $ = $B.args('uniform',2,{a:null,b:null},['a','b'],
                arguments,{},null,null),
                a = $B.$GetInt($.a),
                b = $B.$GetInt($.b)

            return a + (b-a)*_random()
        },

        vonmisesvariate: function(mu, kappa){
            /* Circular data distribution.

            mu is the mean angle, expressed in radians between 0 and 2*pi, and
            kappa is the concentration parameter, which must be greater than or
            equal to zero.  If kappa is equal to zero, this distribution reduces
            to a uniform random angle over the range 0 to 2*pi.

            */
            // mu:    mean angle (in radians between 0 and 2*pi)
            // kappa: concentration parameter kappa (>= 0)
            // if kappa = 0 generate uniform random angle

            // Based upon an algorithm published in: Fisher, N.I.,
            // "Statistical Analysis of Circular Data", Cambridge
            // University Press, 1993.

            // Thanks to Magnus Kessler for a correction to the
            // implementation of step 4.

            var $=$B.args('vonmisesvariate', 2,
                    {mu: null, kappa:null}, ['mu', 'kappa'],
                    arguments, {}, null, null),
                mu = $.mu,
                kappa = $.kappa,
                TWOPI = 2*Math.PI

            if(kappa <= 1e-6){return TWOPI * _random()}

            var s = 0.5 / kappa,
                r = s + Math.sqrt(1.0 + s * s)

            while(true){
                var u1 = _random(),
                    z = Math.cos(Math.PI * u1),
                    d = z / (r + z),
                    u2 = _random()
                if((u2 < 1.0 - d * d) || 
                    (u2 <= (1.0 - d) * Math.exp(d))){
                        break
                }
            }
            var q = 1.0 / r,
                f = (q + z) / (1.0 + q * z),
                u3 = _random()
            if(u3 > 0.5){var theta = (mu + Math.acos(f)) % TWOPI}
            else{var theta = (mu - Math.acos(f)) % TWOPI}
            return theta
        },

        weibullvariate: function(){
            /*Weibull distribution.

            alpha is the scale parameter and beta is the shape parameter.

            */
            // Jain, pg. 499; bug fix courtesy Bill Arms

            var $ = $B.args('weibullvariate', 2, {alpha:null, beta:null},
                    ['alpha', 'beta'], arguments, {}, null, null),
                alpha = $.alpha,
                beta = $.beta

            var u = 1 - _random()
            return alpha * Math.pow(-Math.log(u), 1/beta)
        },

        VERSION: VERSION
    }

    res.lognormvariate = function(){
        /*
        Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        */

        return Math.exp(res.normalvariate.apply(null, arguments))
    }

    res.betavariate = function(){
        /* Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        # This version due to Janne Sinkkonen, and matches all the std
        # texts (e.g., Knuth Vol 2 Ed 3 pg 134 "the beta distribution").
        */

        var $ = $B.args('betavariate', 2, {alpha:null, beta:null},
                ['alpha', 'beta'], arguments, {}, null, null),
            alpha = $.alpha,
            beta = $.beta

        var y = res.gammavariate(alpha, 1)
        if(y == 0){return _b_.float(0)}
        else{return y / (y + res.gammavariate(beta, 1))}
    }

    return res

}

function Random(){
    var obj = {__class__: Random.$dict}
    Random.$dict.__init__(obj)
    return obj
}
Random.__class__ = $B.$factory
Random.$dict = {
    __class__: $B.$type,
    __name__: 'Random',
    $factory: Random,
    __init__: function(self){self.$r = _Random()},
    __getattribute__: function(self, attr){return self.$r[attr]}
}
Random.$dict.__mro__ = [$B.builtins.object.$dict]

var $module = _Random()

$module.Random = Random

$module.SystemRandom = function(){
    var f = function(){return {__class__:f.$dict}}
    f.__class__ = $B.$factory
    f.$dict = {
        __class__: $B.$type,
        __name__: 'SystemRandom',
        $factory: f,
        __getattribute__: function(){
            throw $B.builtins.NotImplementedError()
        }
    }
    f.$dict.__mro__ = [$B.builtins.object.$dict]
    return f()
}

return $module

})(__BRYTHON__)

====random.js(file) end====

====re.py(file) start====


r"""Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like "A", "a", or "0", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    "."      Matches any character except a newline.
    "^"      Matches the start of the string.
    "$"      Matches the end of the string or just before the newline at
             the end of the string.
    "*"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    "+"      Matches 1 or more (greedy) repetitions of the preceding RE.
    "?"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    "\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A "^" as the first character indicates a complementing set.
    "|"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of "\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \number  Matches the contents of the group of the same number.
    \A       Matches only at the start of the string.
    \Z       Matches only at the end of the string.
    \b       Matches the empty string, but only at the start or end of a word.
    \B       Matches the empty string, but not at the start or end of a word.
    \d       Matches any decimal digit; equivalent to the set [0-9] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode digits.
    \D       Matches any non-digit character; equivalent to [^\d].
    \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode whitespace characters.
    \S       Matches any non-whitespace character; equivalent to [^\s].
    \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]
             in bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the
             range of Unicode alphanumeric characters (letters plus digits
             plus underscore).
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \W       Matches the complement of \w.
    \\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    A  ASCII       For string patterns, make \w, \W, \b, \B, \d, \D
                   match the corresponding ASCII character categories
                   (rather than the whole Unicode categories, which is the
                   default).
                   For bytes patterns, this flag is the only available
                   behaviour and needn't be specified.
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale.
    M  MULTILINE   "^" matches the beginning of lines (after a newline)
                   as well as the string.
                   "$" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      "." matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     For compatibility only. Ignored for string patterns (it
                   is the default), and forbidden for bytes patterns.

This module also defines an exception 'error'.

"""

import sre_compile
import sre_parse

__all__=["match","search","sub","subn","split","findall",
"compile","purge","template","escape","A","I","L","M","S","X",
"U","ASCII","IGNORECASE","LOCALE","MULTILINE","DOTALL","VERBOSE",
"UNICODE","error"]

__version__="2.2.1"

A=ASCII=sre_compile. SRE_FLAG_ASCII
I=IGNORECASE=sre_compile. SRE_FLAG_IGNORECASE
L=LOCALE=sre_compile. SRE_FLAG_LOCALE
U=UNICODE=sre_compile. SRE_FLAG_UNICODE
M=MULTILINE=sre_compile. SRE_FLAG_MULTILINE
S=DOTALL=sre_compile. SRE_FLAG_DOTALL
X=VERBOSE=sre_compile. SRE_FLAG_VERBOSE

T=TEMPLATE=sre_compile. SRE_FLAG_TEMPLATE
DEBUG=sre_compile. SRE_FLAG_DEBUG

error=sre_compile. error

def match(pattern,string,flags=0):
 ''

 return _compile(pattern,flags). match(string)

def search(pattern,string,flags=0):
 ''

 return _compile(pattern,flags). search(string)

def sub(pattern,repl,string,count=0,flags=0):
 ''

 return _compile(pattern,flags). sub(repl,string,count)

def subn(pattern,repl,string,count=0,flags=0):
 ''

 return _compile(pattern,flags). subn(repl,string,count)

def split(pattern,string,maxsplit=0,flags=0):
 ''

 return _compile(pattern,flags). split(string,maxsplit)

def findall(pattern,string,flags=0):
 ''

 return _compile(pattern,flags). findall(string)

def finditer(pattern,string,flags=0):
 ''

 return _compile(pattern,flags). finditer(string)

def compile(pattern,flags=0):
 ''

 return _compile(pattern,flags)

def purge():
 ''
 _cache. clear()
 _cache_repl. clear()

def template(pattern,flags=0):
 ''
 return _compile(pattern,flags |T)

_alphanum_str=frozenset(
"_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890")
_alphanum_bytes=frozenset(
b"_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890")

def escape(pattern):
 ''

 if isinstance(pattern,str):
  alphanum=_alphanum_str
  s=list(pattern)
  for i,c in enumerate(pattern):
   if c not in alphanum:
    if c =="\000":
     s[i]="\\000"
    else :
     s[i]="\\"+c
  return"". join(s)
 else :
  alphanum=_alphanum_bytes
  s=[]
  esc=ord(b"\\")
  for c in pattern:
   if c in alphanum:
    s. append(c)
   else :
    if c ==0:
     s. extend(b"\\000")
    else :
     s. append(esc)
     s. append(c)
  return bytes(s)

_cache={}
_cache_repl={}

_pattern_type=type(sre_compile. compile("",0))

_MAXCACHE=512
def _compile(pattern,flags):

 try :

  return _cache["%s:%s:%s"%(type(pattern),pattern,flags)]
 except KeyError:
  pass

 if isinstance(pattern,_pattern_type):
  if flags:
   raise ValueError(
   "Cannot process flags argument with a compiled pattern")
  return pattern
 if not sre_compile. isstring(pattern):
  raise TypeError("first argument must be string or compiled pattern")
 p=sre_compile. compile(pattern,flags)

 if len(_cache)>=_MAXCACHE:
  _cache. clear()

 _cache["%s:%s:%s"%(type(pattern),pattern,flags)]=p
 return p

def _compile_repl(repl,pattern):

 try :

  return _cache_repl["%s:%s"%(repl,pattern)]
 except KeyError:
  pass
 p=sre_parse. parse_template(repl,pattern)
 if len(_cache_repl)>=_MAXCACHE:
  _cache_repl. clear()
 _cache_repl["%s:%s"%(repl,pattern)]=p

 return p

def _expand(pattern,match,template):

 template=sre_parse. parse_template(template,pattern)
 return sre_parse. expand_template(template,match)

def _subx(pattern,template):

 template=_compile_repl(template,pattern)
 if not template[0]and len(template[1])==1:

  return template[1][0]
 def filter(match,template=template):
  return sre_parse. expand_template(template,match)
 return filter

import copyreg

def _pickle(p):
 return _compile,(p. pattern,p. flags)

copyreg. pickle(_pattern_type,_pickle,_compile)

class Scanner:
 def __init__(self,lexicon,flags=0):
  from sre_constants import BRANCH,SUBPATTERN
  self. lexicon=lexicon

  p=[]
  s=sre_parse. Pattern()
  s. flags=flags
  for phrase,action in lexicon:
   p. append(sre_parse. SubPattern(s,[
   (SUBPATTERN,(len(p)+1,sre_parse. parse(phrase,flags))),
   ]))
  s. groups=len(p)+1
  p=sre_parse. SubPattern(s,[(BRANCH,(None ,p))])
  self. scanner=sre_compile. compile(p)
 def scan(self,string):
  result=[]
  append=result. append
  match=self. scanner. scanner(string). match
  i=0
  while 1:
   m=match()
   if not m:
    break
   j=m. end()
   if i ==j:
    break
   action=self. lexicon[m. lastindex -1][1]
   if callable(action):
    self. match=m
    action=action(self,m. group())
   if action is not None :
    append(action)
   i=j
  return result,string[i:]
====re.py(file) end====

====reprlib.py(file) start====
''

__all__=["Repr","repr","recursive_repr"]

import builtins
from itertools import islice
try :
 from _thread import get_ident
except ImportError:
 from _dummy_thread import get_ident

def recursive_repr(fillvalue='...'):
 ''

 def decorating_function(user_function):
  repr_running=set()

  def wrapper(self):
   key=id(self),get_ident()
   if key in repr_running:
    return fillvalue
   repr_running. add(key)
   try :
    result=user_function(self)
   finally :
    repr_running. discard(key)
   return result

  wrapper. __module__=getattr(user_function,'__module__')
  wrapper. __doc__=getattr(user_function,'__doc__')
  wrapper. __name__=getattr(user_function,'__name__')
  wrapper. __annotations__=getattr(user_function,'__annotations__',{})
  return wrapper

 return decorating_function

class Repr:

 def __init__(self):
  self. maxlevel=6
  self. maxtuple=6
  self. maxlist=6
  self. maxarray=5
  self. maxdict=4
  self. maxset=6
  self. maxfrozenset=6
  self. maxdeque=6
  self. maxstring=30
  self. maxlong=40
  self. maxother=30

 def repr(self,x):
  return self. repr1(x,self. maxlevel)

 def repr1(self,x,level):
  typename=type(x). __name__
  if' 'in typename:
   parts=typename. split()
   typename='_'. join(parts)
  if hasattr(self,'repr_'+typename):
   return getattr(self,'repr_'+typename)(x,level)
  else :
   return self. repr_instance(x,level)

 def _repr_iterable(self,x,level,left,right,maxiter,trail=''):
  n=len(x)
  if level <=0 and n:
   s='...'
  else :
   newlevel=level -1
   repr1=self. repr1
   pieces=[repr1(elem,newlevel)for elem in islice(x,maxiter)]
   if n >maxiter:pieces. append('...')
   s=', '. join(pieces)
   if n ==1 and trail:right=trail+right
  return'%s%s%s'%(left,s,right)

 def repr_tuple(self,x,level):
  return self. _repr_iterable(x,level,'(',')',self. maxtuple,',')

 def repr_list(self,x,level):
  return self. _repr_iterable(x,level,'[',']',self. maxlist)

 def repr_array(self,x,level):
  header="array('%s', ["%x. typecode
  return self. _repr_iterable(x,level,header,'])',self. maxarray)

 def repr_set(self,x,level):
  x=_possibly_sorted(x)
  return self. _repr_iterable(x,level,'set([','])',self. maxset)

 def repr_frozenset(self,x,level):
  x=_possibly_sorted(x)
  return self. _repr_iterable(x,level,'frozenset([','])',
  self. maxfrozenset)

 def repr_deque(self,x,level):
  return self. _repr_iterable(x,level,'deque([','])',self. maxdeque)

 def repr_dict(self,x,level):
  n=len(x)
  if n ==0:return'{}'
  if level <=0:return'{...}'
  newlevel=level -1
  repr1=self. repr1
  pieces=[]
  for key in islice(_possibly_sorted(x),self. maxdict):
   keyrepr=repr1(key,newlevel)
   valrepr=repr1(x[key],newlevel)
   pieces. append('%s: %s'%(keyrepr,valrepr))
  if n >self. maxdict:pieces. append('...')
  s=', '. join(pieces)
  return'{%s}'%(s,)

 def repr_str(self,x,level):
  s=builtins. repr(x[:self. maxstring])
  if len(s)>self. maxstring:
   i=max(0,(self. maxstring -3)//2)
   j=max(0,self. maxstring -3 -i)
   s=builtins. repr(x[:i]+x[len(x)-j:])
   s=s[:i]+'...'+s[len(s)-j:]
  return s

 def repr_int(self,x,level):
  s=builtins. repr(x)
  if len(s)>self. maxlong:
   i=max(0,(self. maxlong -3)//2)
   j=max(0,self. maxlong -3 -i)
   s=s[:i]+'...'+s[len(s)-j:]
  return s

 def repr_instance(self,x,level):
  try :
   s=builtins. repr(x)

  except Exception:
   return'<%s instance at %x>'%(x. __class__. __name__,id(x))
  if len(s)>self. maxother:
   i=max(0,(self. maxother -3)//2)
   j=max(0,self. maxother -3 -i)
   s=s[:i]+'...'+s[len(s)-j:]
  return s

def _possibly_sorted(x):

 try :
  return sorted(x)
 except Exception:
  return list(x)

aRepr=Repr()
repr=aRepr. repr
====reprlib.py(file) end====

====sre_compile.py(file) start====


import sys
import _sre
import sre_parse
from sre_constants import *
from _sre import MAXREPEAT

assert _sre. MAGIC ==MAGIC,"SRE module mismatch"

if _sre. CODESIZE ==2:
 MAXCODE=65535
else :
 MAXCODE=0xFFFFFFFF

def _identityfunction(x):
 return x

_LITERAL_CODES=set([LITERAL,NOT_LITERAL])
_REPEATING_CODES=set([REPEAT,MIN_REPEAT,MAX_REPEAT])
_SUCCESS_CODES=set([SUCCESS,FAILURE])
_ASSERT_CODES=set([ASSERT,ASSERT_NOT])

def _compile(code,pattern,flags):

 emit=code. append
 _len=len
 LITERAL_CODES=_LITERAL_CODES
 REPEATING_CODES=_REPEATING_CODES
 SUCCESS_CODES=_SUCCESS_CODES
 ASSERT_CODES=_ASSERT_CODES
 for op,av in pattern:

  if op in LITERAL_CODES:
   if flags&SRE_FLAG_IGNORECASE:
    emit(OPCODES[OP_IGNORE[op]])
    emit(_sre. getlower(av,flags))
   else :
    emit(OPCODES[op])
    emit(av)
  elif op is IN:
   if flags&SRE_FLAG_IGNORECASE:
    emit(OPCODES[OP_IGNORE[op]])
    def fixup(literal,flags=flags):
     return _sre. getlower(literal,flags)
   else :
    emit(OPCODES[op])
    fixup=_identityfunction
   skip=_len(code);emit(0)
   _compile_charset(av,flags,code,fixup)
   code[skip]=_len(code)-skip
  elif op is ANY:
   if flags&SRE_FLAG_DOTALL:
    emit(OPCODES[ANY_ALL])
   else :
    emit(OPCODES[ANY])
  elif op in REPEATING_CODES:
   if flags&SRE_FLAG_TEMPLATE:
    raise error("internal: unsupported template operator")
    emit(OPCODES[REPEAT])
    skip=_len(code);emit(0)
    emit(av[0])
    emit(av[1])
    _compile(code,av[2],flags)
    emit(OPCODES[SUCCESS])
    code[skip]=_len(code)-skip
   elif _simple(av)and op is not REPEAT:
    if op is MAX_REPEAT:
     emit(OPCODES[REPEAT_ONE])
    else :
     emit(OPCODES[MIN_REPEAT_ONE])
    skip=_len(code);emit(0)
    emit(av[0])
    emit(av[1])
    _compile(code,av[2],flags)
    emit(OPCODES[SUCCESS])
    code[skip]=_len(code)-skip
   else :
    emit(OPCODES[REPEAT])
    skip=_len(code);emit(0)
    emit(av[0])
    emit(av[1])
    _compile(code,av[2],flags)
    code[skip]=_len(code)-skip
    if op is MAX_REPEAT:
     emit(OPCODES[MAX_UNTIL])
    else :
     emit(OPCODES[MIN_UNTIL])
  elif op is SUBPATTERN:
   if av[0]:
    emit(OPCODES[MARK])
    emit((av[0]-1)*2)

   _compile(code,av[1],flags)
   if av[0]:
    emit(OPCODES[MARK])
    emit((av[0]-1)*2+1)
  elif op in SUCCESS_CODES:
   emit(OPCODES[op])
  elif op in ASSERT_CODES:
   emit(OPCODES[op])
   skip=_len(code);emit(0)
   if av[0]>=0:
    emit(0)
   else :
    lo,hi=av[1]. getwidth()
    if lo !=hi:
     raise error("look-behind requires fixed-width pattern")
    emit(lo)
   _compile(code,av[1],flags)
   emit(OPCODES[SUCCESS])
   code[skip]=_len(code)-skip
  elif op is CALL:
   emit(OPCODES[op])
   skip=_len(code);emit(0)
   _compile(code,av,flags)
   emit(OPCODES[SUCCESS])
   code[skip]=_len(code)-skip
  elif op is AT:
   emit(OPCODES[op])
   if flags&SRE_FLAG_MULTILINE:
    av=AT_MULTILINE. get(av,av)
   if flags&SRE_FLAG_LOCALE:
    av=AT_LOCALE. get(av,av)
   elif flags&SRE_FLAG_UNICODE:
    av=AT_UNICODE. get(av,av)
   emit(ATCODES[av])
  elif op is BRANCH:
   emit(OPCODES[op])
   tail=[]
   tailappend=tail. append
   for av in av[1]:
    skip=_len(code);emit(0)

    _compile(code,av,flags)
    emit(OPCODES[JUMP])
    tailappend(_len(code));emit(0)
    code[skip]=_len(code)-skip
   emit(0)
   for tail in tail:
    code[tail]=_len(code)-tail
  elif op is CATEGORY:
   emit(OPCODES[op])
   if flags&SRE_FLAG_LOCALE:
    av=CH_LOCALE[av]
   elif flags&SRE_FLAG_UNICODE:
    av=CH_UNICODE[av]
   emit(CHCODES[av])
  elif op is GROUPREF:
   if flags&SRE_FLAG_IGNORECASE:
    emit(OPCODES[OP_IGNORE[op]])
   else :
    emit(OPCODES[op])
   emit(av -1)
  elif op is GROUPREF_EXISTS:
   emit(OPCODES[op])
   emit(av[0]-1)
   skipyes=_len(code);emit(0)
   _compile(code,av[1],flags)
   if av[2]:
    emit(OPCODES[JUMP])
    skipno=_len(code);emit(0)
    code[skipyes]=_len(code)-skipyes+1
    _compile(code,av[2],flags)
    code[skipno]=_len(code)-skipno
   else :
    code[skipyes]=_len(code)-skipyes+1
  else :
   raise ValueError("unsupported operand type",op)

def _compile_charset(charset,flags,code,fixup=None ):

 emit=code. append
 if fixup is None :
  fixup=_identityfunction
 for op,av in _optimize_charset(charset,fixup):
  emit(OPCODES[op])
  if op is NEGATE:
   pass
  elif op is LITERAL:
   emit(fixup(av))
  elif op is RANGE:
   emit(fixup(av[0]))
   emit(fixup(av[1]))
  elif op is CHARSET:
   code. extend(av)
  elif op is BIGCHARSET:
   code. extend(av)
  elif op is CATEGORY:
   if flags&SRE_FLAG_LOCALE:
    emit(CHCODES[CH_LOCALE[av]])
   elif flags&SRE_FLAG_UNICODE:
    emit(CHCODES[CH_UNICODE[av]])
   else :
    emit(CHCODES[av])
  else :
   raise error("internal: unsupported set operator")
 emit(OPCODES[FAILURE])

def _optimize_charset(charset,fixup):

 out=[]
 outappend=out. append
 charmap=[0]*256
 try :
  for op,av in charset:
   if op is NEGATE:
    outappend((op,av))
   elif op is LITERAL:
    charmap[fixup(av)]=1
   elif op is RANGE:
    for i in range(fixup(av[0]),fixup(av[1])+1):
     charmap[i]=1
   elif op is CATEGORY:

    return charset
 except IndexError:

  return _optimize_unicode(charset,fixup)

 i=p=n=0
 runs=[]
 runsappend=runs. append
 for c in charmap:
  if c:
   if n ==0:
    p=i
   n=n+1
  elif n:
   runsappend((p,n))
   n=0
  i=i+1
 if n:
  runsappend((p,n))
 if len(runs)<=2:

  for p,n in runs:
   if n ==1:
    outappend((LITERAL,p))
   else :
    outappend((RANGE,(p,p+n -1)))
  if len(out)<len(charset):
   return out
 else :

  data=_mk_bitmap(charmap)
  outappend((CHARSET,data))
  return out
 return charset

def _mk_bitmap(bits):
 data=[]
 dataappend=data. append
 if _sre. CODESIZE ==2:
  start=(1,0)
 else :
  start=(1,0)
 m,v=start
 for c in bits:
  if c:
   v=v+m
  m=m+m
  if m >MAXCODE:
   dataappend(v)
   m,v=start
 return data

def _optimize_unicode(charset,fixup):
 try :
  import array
 except ImportError:
  return charset
 charmap=[0]*65536
 negate=0
 try :
  for op,av in charset:
   if op is NEGATE:
    negate=1
   elif op is LITERAL:
    charmap[fixup(av)]=1
   elif op is RANGE:
    for i in range(fixup(av[0]),fixup(av[1])+1):
     charmap[i]=1
   elif op is CATEGORY:

    return charset
 except IndexError:

  return charset
 if negate:
  if sys. maxunicode !=65535:

   return charset
  for i in range(65536):
   charmap[i]=not charmap[i]
 comps={}
 mapping=[0]*256
 block=0
 data=[]
 for i in range(256):
  chunk=tuple(charmap[i *256:(i+1)*256])
  new=comps. setdefault(chunk,block)
  mapping[i]=new
  if new ==block:
   block=block+1
   data=data+_mk_bitmap(chunk)
 header=[block]
 if _sre. CODESIZE ==2:
  code='H'
 else :
  code='I'

 mapping=array. array('b',mapping). tobytes()

 mapping=array. array(code,mapping)
 assert mapping. itemsize ==_sre. CODESIZE
 assert len(mapping)*mapping. itemsize ==256
 header=header+mapping. tolist()
 data[0:0]=header
 return [(BIGCHARSET,data)]

def _simple(av):

 lo,hi=av[2]. getwidth()
 if lo ==0 and hi ==MAXREPEAT:
  raise error("nothing to repeat")
 return lo ==hi ==1 and av[2][0][0]!=SUBPATTERN

def _compile_info(code,pattern,flags):

 lo,hi=pattern. getwidth()

 if lo ==0:
  return

 prefix=[]
 prefixappend=prefix. append
 prefix_skip=0
 charset=[]
 charsetappend=charset. append
 if not (flags&SRE_FLAG_IGNORECASE):

  for op,av in pattern. data:

   if op is LITERAL:
    if len(prefix)==prefix_skip:
     prefix_skip=prefix_skip+1
    prefixappend(av)
   elif op is SUBPATTERN and len(av[1])==1:
    op,av=av[1][0]
    if op is LITERAL:
     prefixappend(av)
    else :
     break
   else :
    break

  if not prefix and pattern. data:
   op,av=pattern. data[0]
   if op is SUBPATTERN and av[1]:
    op,av=av[1][0]
    if op is LITERAL:
     charsetappend((op,av))
    elif op is BRANCH:
     c=[]
     cappend=c. append
     for p in av[1]:
      if not p:
       break
      op,av=p[0]
      if op is LITERAL:
       cappend((op,av))
      else :
       break
     else :
      charset=c
   elif op is BRANCH:
    c=[]
    cappend=c. append
    for p in av[1]:
     if not p:
      break
     op,av=p[0]
     if op is LITERAL:
      cappend((op,av))
     else :
      break
    else :
     charset=c
   elif op is IN:
    charset=av

 emit=code. append
 emit(OPCODES[INFO])
 skip=len(code);emit(0)

 mask=0
 if prefix:
  mask=SRE_INFO_PREFIX
  if len(prefix)==prefix_skip ==len(pattern. data):
   mask=mask+SRE_INFO_LITERAL
 elif charset:
  mask=mask+SRE_INFO_CHARSET
 emit(mask)

 if lo <MAXCODE:
  emit(lo)
 else :
  emit(MAXCODE)
  prefix=prefix[:MAXCODE]
 if hi <MAXCODE:
  emit(hi)
 else :
  emit(0)

 if prefix:
  emit(len(prefix))
  emit(prefix_skip)
  code. extend(prefix)

  table=[-1]+([0]*len(prefix))
  for i in range(len(prefix)):
   table[i+1]=table[i]+1
   while table[i+1]>0 and prefix[i]!=prefix[table[i+1]-1]:
    table[i+1]=table[table[i+1]-1]+1
  code. extend(table[1:])
 elif charset:
  _compile_charset(charset,flags,code)
 code[skip]=len(code)-skip

def isstring(obj):
 return isinstance(obj,(str,bytes))

def _code(p,flags):

 flags=p. pattern. flags |flags
 code=[]

 _compile_info(code,p,flags)

 _compile(code,p. data,flags)

 code. append(OPCODES[SUCCESS])

 return code

def compile(p,flags=0):

 if isstring(p):
  pattern=p
  p=sre_parse. parse(p,flags)
 else :
  pattern=None

 code=_code(p,flags)

 if p. pattern. groups >100:
  raise AssertionError(
  "sorry, but this version only supports 100 named groups"
  )

 groupindex=p. pattern. groupdict
 indexgroup=[None ]*p. pattern. groups
 for k,i in groupindex. items():
  indexgroup[i]=k

 return _sre. compile(
 pattern,flags |p. pattern. flags,code,
 p. pattern. groups -1,
 groupindex,indexgroup
 )
====sre_compile.py(file) end====

====sre_constants.py(file) start====


MAGIC=20031017

class error(Exception):
 pass

FAILURE="failure"
SUCCESS="success"

ANY="any"
ANY_ALL="any_all"
ASSERT="assert"
ASSERT_NOT="assert_not"
AT="at"
BIGCHARSET="bigcharset"
BRANCH="branch"
CALL="call"
CATEGORY="category"
CHARSET="charset"
GROUPREF="groupref"
GROUPREF_IGNORE="groupref_ignore"
GROUPREF_EXISTS="groupref_exists"
IN="in"
IN_IGNORE="in_ignore"
INFO="info"
JUMP="jump"
LITERAL="literal"
LITERAL_IGNORE="literal_ignore"
MARK="mark"
MAX_REPEAT="max_repeat"
MAX_UNTIL="max_until"
MIN_REPEAT="min_repeat"
MIN_UNTIL="min_until"
NEGATE="negate"
NOT_LITERAL="not_literal"
NOT_LITERAL_IGNORE="not_literal_ignore"
RANGE="range"
REPEAT="repeat"
REPEAT_ONE="repeat_one"
SUBPATTERN="subpattern"
MIN_REPEAT_ONE="min_repeat_one"

AT_BEGINNING="at_beginning"
AT_BEGINNING_LINE="at_beginning_line"
AT_BEGINNING_STRING="at_beginning_string"
AT_BOUNDARY="at_boundary"
AT_NON_BOUNDARY="at_non_boundary"
AT_END="at_end"
AT_END_LINE="at_end_line"
AT_END_STRING="at_end_string"
AT_LOC_BOUNDARY="at_loc_boundary"
AT_LOC_NON_BOUNDARY="at_loc_non_boundary"
AT_UNI_BOUNDARY="at_uni_boundary"
AT_UNI_NON_BOUNDARY="at_uni_non_boundary"

CATEGORY_DIGIT="category_digit"
CATEGORY_NOT_DIGIT="category_not_digit"
CATEGORY_SPACE="category_space"
CATEGORY_NOT_SPACE="category_not_space"
CATEGORY_WORD="category_word"
CATEGORY_NOT_WORD="category_not_word"
CATEGORY_LINEBREAK="category_linebreak"
CATEGORY_NOT_LINEBREAK="category_not_linebreak"
CATEGORY_LOC_WORD="category_loc_word"
CATEGORY_LOC_NOT_WORD="category_loc_not_word"
CATEGORY_UNI_DIGIT="category_uni_digit"
CATEGORY_UNI_NOT_DIGIT="category_uni_not_digit"
CATEGORY_UNI_SPACE="category_uni_space"
CATEGORY_UNI_NOT_SPACE="category_uni_not_space"
CATEGORY_UNI_WORD="category_uni_word"
CATEGORY_UNI_NOT_WORD="category_uni_not_word"
CATEGORY_UNI_LINEBREAK="category_uni_linebreak"
CATEGORY_UNI_NOT_LINEBREAK="category_uni_not_linebreak"

OPCODES=[

FAILURE,SUCCESS,

ANY,ANY_ALL,
ASSERT,ASSERT_NOT,
AT,
BRANCH,
CALL,
CATEGORY,
CHARSET,BIGCHARSET,
GROUPREF,GROUPREF_EXISTS,GROUPREF_IGNORE,
IN,IN_IGNORE,
INFO,
JUMP,
LITERAL,LITERAL_IGNORE,
MARK,
MAX_UNTIL,
MIN_UNTIL,
NOT_LITERAL,NOT_LITERAL_IGNORE,
NEGATE,
RANGE,
REPEAT,
REPEAT_ONE,
SUBPATTERN,
MIN_REPEAT_ONE

]

ATCODES=[
AT_BEGINNING,AT_BEGINNING_LINE,AT_BEGINNING_STRING,AT_BOUNDARY,
AT_NON_BOUNDARY,AT_END,AT_END_LINE,AT_END_STRING,
AT_LOC_BOUNDARY,AT_LOC_NON_BOUNDARY,AT_UNI_BOUNDARY,
AT_UNI_NON_BOUNDARY
]

CHCODES=[
CATEGORY_DIGIT,CATEGORY_NOT_DIGIT,CATEGORY_SPACE,
CATEGORY_NOT_SPACE,CATEGORY_WORD,CATEGORY_NOT_WORD,
CATEGORY_LINEBREAK,CATEGORY_NOT_LINEBREAK,CATEGORY_LOC_WORD,
CATEGORY_LOC_NOT_WORD,CATEGORY_UNI_DIGIT,CATEGORY_UNI_NOT_DIGIT,
CATEGORY_UNI_SPACE,CATEGORY_UNI_NOT_SPACE,CATEGORY_UNI_WORD,
CATEGORY_UNI_NOT_WORD,CATEGORY_UNI_LINEBREAK,
CATEGORY_UNI_NOT_LINEBREAK
]

def makedict(list):
 d={}
 i=0
 for item in list:
  d[item]=i
  i=i+1
 return d

OPCODES=makedict(OPCODES)
ATCODES=makedict(ATCODES)
CHCODES=makedict(CHCODES)

OP_IGNORE={
GROUPREF:GROUPREF_IGNORE,
IN:IN_IGNORE,
LITERAL:LITERAL_IGNORE,
NOT_LITERAL:NOT_LITERAL_IGNORE
}

AT_MULTILINE={
AT_BEGINNING:AT_BEGINNING_LINE,
AT_END:AT_END_LINE
}

AT_LOCALE={
AT_BOUNDARY:AT_LOC_BOUNDARY,
AT_NON_BOUNDARY:AT_LOC_NON_BOUNDARY
}

AT_UNICODE={
AT_BOUNDARY:AT_UNI_BOUNDARY,
AT_NON_BOUNDARY:AT_UNI_NON_BOUNDARY
}

CH_LOCALE={
CATEGORY_DIGIT:CATEGORY_DIGIT,
CATEGORY_NOT_DIGIT:CATEGORY_NOT_DIGIT,
CATEGORY_SPACE:CATEGORY_SPACE,
CATEGORY_NOT_SPACE:CATEGORY_NOT_SPACE,
CATEGORY_WORD:CATEGORY_LOC_WORD,
CATEGORY_NOT_WORD:CATEGORY_LOC_NOT_WORD,
CATEGORY_LINEBREAK:CATEGORY_LINEBREAK,
CATEGORY_NOT_LINEBREAK:CATEGORY_NOT_LINEBREAK
}

CH_UNICODE={
CATEGORY_DIGIT:CATEGORY_UNI_DIGIT,
CATEGORY_NOT_DIGIT:CATEGORY_UNI_NOT_DIGIT,
CATEGORY_SPACE:CATEGORY_UNI_SPACE,
CATEGORY_NOT_SPACE:CATEGORY_UNI_NOT_SPACE,
CATEGORY_WORD:CATEGORY_UNI_WORD,
CATEGORY_NOT_WORD:CATEGORY_UNI_NOT_WORD,
CATEGORY_LINEBREAK:CATEGORY_UNI_LINEBREAK,
CATEGORY_NOT_LINEBREAK:CATEGORY_UNI_NOT_LINEBREAK
}

SRE_FLAG_TEMPLATE=1
SRE_FLAG_IGNORECASE=2
SRE_FLAG_LOCALE=4
SRE_FLAG_MULTILINE=8
SRE_FLAG_DOTALL=16
SRE_FLAG_UNICODE=32
SRE_FLAG_VERBOSE=64
SRE_FLAG_DEBUG=128
SRE_FLAG_ASCII=256

SRE_INFO_PREFIX=1
SRE_INFO_LITERAL=2
SRE_INFO_CHARSET=4

if __name__ =="__main__":
 def dump(f,d,prefix):
  items=sorted(d. items(),key=lambda a:a[1])
  for k,v in items:
   f. write("#define %s_%s %s\n"%(prefix,k. upper(),v))
 f=open("sre_constants.h","w")
 f. write("""\
/*
 * Secret Labs' Regular Expression Engine
 *
 * regular expression matching engine
 *
 * NOTE: This file is generated by sre_constants.py.  If you need
 * to change anything in here, edit sre_constants.py and run it.
 *
 * Copyright (c) 1997-2001 by Secret Labs AB.  All rights reserved.
 *
 * See the _sre.c file for information on usage and redistribution.
 */

""")

 f. write("#define SRE_MAGIC %d\n"%MAGIC)

 dump(f,OPCODES,"SRE_OP")
 dump(f,ATCODES,"SRE")
 dump(f,CHCODES,"SRE")

 f. write("#define SRE_FLAG_TEMPLATE %d\n"%SRE_FLAG_TEMPLATE)
 f. write("#define SRE_FLAG_IGNORECASE %d\n"%SRE_FLAG_IGNORECASE)
 f. write("#define SRE_FLAG_LOCALE %d\n"%SRE_FLAG_LOCALE)
 f. write("#define SRE_FLAG_MULTILINE %d\n"%SRE_FLAG_MULTILINE)
 f. write("#define SRE_FLAG_DOTALL %d\n"%SRE_FLAG_DOTALL)
 f. write("#define SRE_FLAG_UNICODE %d\n"%SRE_FLAG_UNICODE)
 f. write("#define SRE_FLAG_VERBOSE %d\n"%SRE_FLAG_VERBOSE)

 f. write("#define SRE_INFO_PREFIX %d\n"%SRE_INFO_PREFIX)
 f. write("#define SRE_INFO_LITERAL %d\n"%SRE_INFO_LITERAL)
 f. write("#define SRE_INFO_CHARSET %d\n"%SRE_INFO_CHARSET)

 f. close()
 print("done")
====sre_constants.py(file) end====

====sre_parse.py(file) start====


import sys

from sre_constants import *
from _sre import MAXREPEAT

SPECIAL_CHARS=".\\[{()*+?^$|"
REPEAT_CHARS="*+?{"

DIGITS=set("0123456789")

OCTDIGITS=set("01234567")
HEXDIGITS=set("0123456789abcdefABCDEF")

WHITESPACE=set(" \t\n\r\v\f")

ESCAPES={
r"\a":(LITERAL,ord("\a")),
r"\b":(LITERAL,ord("\b")),
r"\f":(LITERAL,ord("\f")),
r"\n":(LITERAL,ord("\n")),
r"\r":(LITERAL,ord("\r")),
r"\t":(LITERAL,ord("\t")),
r"\v":(LITERAL,ord("\v")),
r"\\":(LITERAL,ord("\\"))
}

CATEGORIES={
r"\A":(AT,AT_BEGINNING_STRING),
r"\b":(AT,AT_BOUNDARY),
r"\B":(AT,AT_NON_BOUNDARY),
r"\d":(IN,[(CATEGORY,CATEGORY_DIGIT)]),
r"\D":(IN,[(CATEGORY,CATEGORY_NOT_DIGIT)]),
r"\s":(IN,[(CATEGORY,CATEGORY_SPACE)]),
r"\S":(IN,[(CATEGORY,CATEGORY_NOT_SPACE)]),
r"\w":(IN,[(CATEGORY,CATEGORY_WORD)]),
r"\W":(IN,[(CATEGORY,CATEGORY_NOT_WORD)]),
r"\Z":(AT,AT_END_STRING),
}

FLAGS={

"i":SRE_FLAG_IGNORECASE,
"L":SRE_FLAG_LOCALE,
"m":SRE_FLAG_MULTILINE,
"s":SRE_FLAG_DOTALL,
"x":SRE_FLAG_VERBOSE,

"a":SRE_FLAG_ASCII,
"t":SRE_FLAG_TEMPLATE,
"u":SRE_FLAG_UNICODE,
}

class Pattern:

 def __init__(self):
  self. flags=0
  self. open=[]
  self. groups=1
  self. groupdict={}
 def opengroup(self,name=None ):
  gid=self. groups
  self. groups=gid+1
  if name is not None :
   ogid=self. groupdict. get(name,None )
   if ogid is not None :
    raise error("redefinition of group name %s as group %d; "
    "was group %d"%(repr(name),gid,ogid))
   self. groupdict[name]=gid
  self. open. append(gid)
  return gid
 def closegroup(self,gid):
  self. open. remove(gid)
 def checkgroup(self,gid):
  return gid <self. groups and gid not in self. open

class SubPattern:

 def __init__(self,pattern,data=None ):
  self. pattern=pattern
  if data is None :
   data=[]
  self. data=data
  self. width=None
 def __iter__(self):
  return iter(self. data)

 def dump(self,level=0):
  nl=1
  seqtypes=(tuple,list)
  for op,av in self. data:
   print(level *"  "+op,end=' ');nl=0
   if op =="in":

    print();nl=1
    for op,a in av:
     print((level+1)*"  "+op,a)
   elif op =="branch":
    print();nl=1
    i=0
    for a in av[1]:
     if i >0:
      print(level *"  "+"or")
     a. dump(level+1);nl=1
     i=i+1
   elif isinstance(av,seqtypes):
    for a in av:
     if isinstance(a,SubPattern):
      if not nl:print()
      a. dump(level+1);nl=1
     else :
      print(a,end=' ');nl=0
   else :
    print(av,end=' ');nl=0
   if not nl:print()
 def __repr__(self):
  return repr(self. data)
 def __len__(self):
  return len(self. data)
 def __delitem__(self,index):
  del self. data[index]
 def __getitem__(self,index):
  if isinstance(index,slice):
   return SubPattern(self. pattern,self. data[index])
  return self. data[index]
 def __setitem__(self,index,code):
  self. data[index]=code
 def insert(self,index,code):
  self. data. insert(index,code)
 def append(self,code):
  self. data. append(code)
 def getwidth(self):

  if self. width:
   return self. width
  lo=hi=0
  UNITCODES=(ANY,RANGE,IN,LITERAL,NOT_LITERAL,CATEGORY)
  REPEATCODES=(MIN_REPEAT,MAX_REPEAT)
  for op,av in self. data:
   if op is BRANCH:
    i=sys. maxsize
    j=0
    for av in av[1]:
     l,h=av. getwidth()
     i=min(i,l)
     j=max(j,h)
    lo=lo+i
    hi=hi+j
   elif op is CALL:
    i,j=av. getwidth()
    lo=lo+i
    hi=hi+j
   elif op is SUBPATTERN:
    i,j=av[1]. getwidth()
    lo=lo+i
    hi=hi+j
   elif op in REPEATCODES:
    i,j=av[2]. getwidth()
    lo=lo+int(i)*av[0]
    hi=hi+int(j)*av[1]
   elif op in UNITCODES:
    lo=lo+1
    hi=hi+1
   elif op ==SUCCESS:
    break
  self. width=int(min(lo,sys. maxsize)),int(min(hi,sys. maxsize))
  return self. width

class Tokenizer:
 def __init__(self,string):
  self. istext=isinstance(string,str)
  self. string=string
  self. index=0
  self. __next()
 def __next(self):
  if self. index >=len(self. string):
   self. next=None
   return
  char=self. string[self. index:self. index+1]

  if char and not self. istext:
   char=chr(char[0])
  if char =="\\":
   try :
    c=self. string[self. index+1]
   except IndexError:
    raise error("bogus escape (end of line)")
   if not self. istext:
    c=chr(c)
   char=char+c
  self. index=self. index+len(char)
  self. next=char
 def match(self,char,skip=1):
  if char ==self. next:
   if skip:
    self. __next()
   return 1
  return 0
 def get(self):
  this=self. next
  self. __next()
  return this
 def getwhile(self,n,charset):
  result=''
  for _ in range(n):
   c=self. next
   if c not in charset:
    break
   result +=c
   self. __next()
  return result
 def tell(self):
  return self. index,self. next
 def seek(self,index):
  self. index,self. next=index

def isident(char):
 return"a"<=char <="z"or"A"<=char <="Z"or char =="_"

def isdigit(char):
 return"0"<=char <="9"

def isname(name):

 if not isident(name[0]):
  return False
 for char in name[1:]:
  if not isident(char)and not isdigit(char):
   return False
 return True

def _class_escape(source,escape):

 code=ESCAPES. get(escape)
 if code:
  return code
 code=CATEGORIES. get(escape)
 if code and code[0]==IN:
  return code
 try :
  c=escape[1:2]
  if c =="x":

   escape +=source. getwhile(2,HEXDIGITS)
   if len(escape)!=4:
    raise ValueError
   return LITERAL,int(escape[2:],16)&0xff
  elif c =="u"and source. istext:

   escape +=source. getwhile(4,HEXDIGITS)
   if len(escape)!=6:
    raise ValueError
   return LITERAL,int(escape[2:],16)
  elif c =="U"and source. istext:

   escape +=source. getwhile(8,HEXDIGITS)
   if len(escape)!=10:
    raise ValueError
   c=int(escape[2:],16)
   chr(c)
   return LITERAL,c
  elif c in OCTDIGITS:

   escape +=source. getwhile(2,OCTDIGITS)
   return LITERAL,int(escape[1:],8)&0xff
  elif c in DIGITS:
   raise ValueError
  if len(escape)==2:
   return LITERAL,ord(escape[1])
 except ValueError:
  pass
 raise error("bogus escape: %s"%repr(escape))

def _escape(source,escape,state):

 code=CATEGORIES. get(escape)
 if code:
  return code
 code=ESCAPES. get(escape)
 if code:
  return code
 try :
  c=escape[1:2]
  if c =="x":

   escape +=source. getwhile(2,HEXDIGITS)
   if len(escape)!=4:
    raise ValueError
   return LITERAL,int(escape[2:],16)&0xff
  elif c =="u"and source. istext:

   escape +=source. getwhile(4,HEXDIGITS)
   if len(escape)!=6:
    raise ValueError
   return LITERAL,int(escape[2:],16)
  elif c =="U"and source. istext:

   escape +=source. getwhile(8,HEXDIGITS)
   if len(escape)!=10:
    raise ValueError
   c=int(escape[2:],16)
   chr(c)
   return LITERAL,c
  elif c =="0":

   escape +=source. getwhile(2,OCTDIGITS)
   return LITERAL,int(escape[1:],8)&0xff
  elif c in DIGITS:

   if source. next in DIGITS:
    escape=escape+source. get()
    if (escape[1]in OCTDIGITS and escape[2]in OCTDIGITS and
    source. next in OCTDIGITS):

     escape=escape+source. get()
     return LITERAL,int(escape[1:],8)&0xff

   group=int(escape[1:])
   if group <state. groups:
    if not state. checkgroup(group):
     raise error("cannot refer to open group")
    return GROUPREF,group
   raise ValueError
  if len(escape)==2:
   return LITERAL,ord(escape[1])
 except ValueError:
  pass
 raise error("bogus escape: %s"%repr(escape))

def _parse_sub(source,state,nested=1):

 items=[]
 itemsappend=items. append
 sourcematch=source. match
 while 1:
  itemsappend(_parse(source,state))
  if sourcematch("|"):
   continue
  if not nested:
   break
  if not source. next or sourcematch(")",0):
   break
  else :
   raise error("pattern not properly closed")

 if len(items)==1:
  return items[0]

 subpattern=SubPattern(state)
 subpatternappend=subpattern. append

 while 1:
  prefix=None
  for item in items:
   if not item:
    break
   if prefix is None :
    prefix=item[0]
   elif item[0]!=prefix:
    break
  else :

   for item in items:
    del item[0]
   subpatternappend(prefix)
   continue
  break

 for item in items:
  if len(item)!=1 or item[0][0]!=LITERAL:
   break
 else :

  set=[]
  setappend=set. append
  for item in items:
   setappend(item[0])
  subpatternappend((IN,set))
  return subpattern

 subpattern. append((BRANCH,(None ,items)))
 return subpattern

def _parse_sub_cond(source,state,condgroup):
 item_yes=_parse(source,state)
 if source. match("|"):
  item_no=_parse(source,state)
  if source. match("|"):
   raise error("conditional backref with more than two branches")
 else :
  item_no=None
 if source. next and not source. match(")",0):
  raise error("pattern not properly closed")
 subpattern=SubPattern(state)
 subpattern. append((GROUPREF_EXISTS,(condgroup,item_yes,item_no)))
 return subpattern

_PATTERNENDERS=set("|)")
_ASSERTCHARS=set("=!<")
_LOOKBEHINDASSERTCHARS=set("=!")
_REPEATCODES=set([MIN_REPEAT,MAX_REPEAT])

def _parse(source,state):

 subpattern=SubPattern(state)

 subpatternappend=subpattern. append
 sourceget=source. get
 sourcematch=source. match
 _len=len
 PATTERNENDERS=_PATTERNENDERS
 ASSERTCHARS=_ASSERTCHARS
 LOOKBEHINDASSERTCHARS=_LOOKBEHINDASSERTCHARS
 REPEATCODES=_REPEATCODES

 while 1:

  if source. next in PATTERNENDERS:
   break
  this=sourceget()
  if this is None :
   break

  if state. flags&SRE_FLAG_VERBOSE:

   if this in WHITESPACE:
    continue
   if this =="#":
    while 1:
     this=sourceget()
     if this in (None ,"\n"):
      break
    continue

  if this and this[0]not in SPECIAL_CHARS:
   subpatternappend((LITERAL,ord(this)))

  elif this =="[":

   set=[]
   setappend=set. append

   if sourcematch("^"):
    setappend((NEGATE,None ))

   start=set[:]
   while 1:
    this=sourceget()
    if this =="]"and set !=start:
     break
    elif this and this[0]=="\\":
     code1=_class_escape(source,this)
    elif this:
     code1=LITERAL,ord(this)
    else :
     raise error("unexpected end of regular expression")
    if sourcematch("-"):

     this=sourceget()
     if this =="]":
      if code1[0]is IN:
       code1=code1[1][0]
      setappend(code1)
      setappend((LITERAL,ord("-")))
      break
     elif this:
      if this[0]=="\\":
       code2=_class_escape(source,this)
      else :
       code2=LITERAL,ord(this)
      if code1[0]!=LITERAL or code2[0]!=LITERAL:
       raise error("bad character range")
      lo=code1[1]
      hi=code2[1]
      if hi <lo:
       raise error("bad character range")
      setappend((RANGE,(lo,hi)))
     else :
      raise error("unexpected end of regular expression")
    else :
     if code1[0]is IN:
      code1=code1[1][0]
     setappend(code1)

   if _len(set)==1 and set[0][0]is LITERAL:
    subpatternappend(set[0])
   elif _len(set)==2 and set[0][0]is NEGATE and set[1][0]is LITERAL:
    subpatternappend((NOT_LITERAL,set[1][1]))
   else :

    subpatternappend((IN,set))

  elif this and this[0]in REPEAT_CHARS:

   if this =="?":
    min,max=0,1
   elif this =="*":
    min,max=0,MAXREPEAT

   elif this =="+":
    min,max=1,MAXREPEAT
   elif this =="{":
    if source. next =="}":
     subpatternappend((LITERAL,ord(this)))
     continue
    here=source. tell()
    min,max=0,MAXREPEAT
    lo=hi=""
    while source. next in DIGITS:
     lo=lo+source. get()
    if sourcematch(","):
     while source. next in DIGITS:
      hi=hi+sourceget()
    else :
     hi=lo
    if not sourcematch("}"):
     subpatternappend((LITERAL,ord(this)))
     source. seek(here)
     continue
    if lo:
     min=int(lo)
     if min >=MAXREPEAT:
      raise OverflowError("the repetition number is too large")
    if hi:
     max=int(hi)
     if max >=MAXREPEAT:
      raise OverflowError("the repetition number is too large")
     if max <min:
      raise error("bad repeat interval")
   else :
    raise error("not supported")

   if subpattern:
    item=subpattern[-1:]
   else :
    item=None
   if not item or (_len(item)==1 and item[0][0]==AT):
    raise error("nothing to repeat")
   if item[0][0]in REPEATCODES:
    raise error("multiple repeat")
   if sourcematch("?"):
    subpattern[-1]=(MIN_REPEAT,(min,max,item))
   else :
    subpattern[-1]=(MAX_REPEAT,(min,max,item))

  elif this ==".":
   subpatternappend((ANY,None ))

  elif this =="(":
   group=1
   name=None
   condgroup=None
   if sourcematch("?"):
    group=0

    if sourcematch("P"):

     if sourcematch("<"):

      name=""
      while 1:
       char=sourceget()
       if char is None :
        raise error("unterminated name")
       if char ==">":
        break
       name=name+char
      group=1
      if not name:
       raise error("missing group name")
      if not isname(name):
       raise error("bad character in group name")
     elif sourcematch("="):

      name=""
      while 1:
       char=sourceget()
       if char is None :
        raise error("unterminated name")
       if char ==")":
        break
       name=name+char
      if not name:
       raise error("missing group name")
      if not isname(name):
       raise error("bad character in group name")
      gid=state. groupdict. get(name)
      if gid is None :
       raise error("unknown group name")
      subpatternappend((GROUPREF,gid))
      continue
     else :
      char=sourceget()
      if char is None :
       raise error("unexpected end of pattern")
      raise error("unknown specifier: ?P%s"%char)
    elif sourcematch(":"):

     group=2
    elif sourcematch("#"):

     while 1:
      if source. next is None or source. next ==")":
       break
      sourceget()
     if not sourcematch(")"):
      raise error("unbalanced parenthesis")
     continue
    elif source. next in ASSERTCHARS:

     char=sourceget()
     dir=1
     if char =="<":
      if source. next not in LOOKBEHINDASSERTCHARS:
       raise error("syntax error")
      dir=-1
      char=sourceget()
     p=_parse_sub(source,state)
     if not sourcematch(")"):
      raise error("unbalanced parenthesis")
     if char =="=":
      subpatternappend((ASSERT,(dir,p)))
     else :
      subpatternappend((ASSERT_NOT,(dir,p)))
     continue
    elif sourcematch("("):

     condname=""
     while 1:
      char=sourceget()
      if char is None :
       raise error("unterminated name")
      if char ==")":
       break
      condname=condname+char
     group=2
     if not condname:
      raise error("missing group name")
     if isname(condname):
      condgroup=state. groupdict. get(condname)
      if condgroup is None :
       raise error("unknown group name")
     else :
      try :
       condgroup=int(condname)
      except ValueError:
       raise error("bad character in group name")
    else :

     if not source. next in FLAGS:
      raise error("unexpected end of pattern")
     while source. next in FLAGS:
      state. flags=state. flags |FLAGS[sourceget()]
   if group:

    if group ==2:

     group=None
    else :
     group=state. opengroup(name)
    if condgroup:
     p=_parse_sub_cond(source,state,condgroup)
    else :
     p=_parse_sub(source,state)
    if not sourcematch(")"):
     raise error("unbalanced parenthesis")
    if group is not None :
     state. closegroup(group)
    subpatternappend((SUBPATTERN,(group,p)))
   else :
    while 1:
     char=sourceget()
     if char is None :
      raise error("unexpected end of pattern")
     if char ==")":
      break
     raise error("unknown extension")

  elif this =="^":
   subpatternappend((AT,AT_BEGINNING))

  elif this =="$":
   subpattern. append((AT,AT_END))

  elif this and this[0]=="\\":
   code=_escape(source,this,state)
   subpatternappend(code)

  else :
   raise error("parser error")

 return subpattern

def fix_flags(src,flags):

 if isinstance(src,str):
  if not flags&SRE_FLAG_ASCII:
   flags |=SRE_FLAG_UNICODE
  elif flags&SRE_FLAG_UNICODE:
   raise ValueError("ASCII and UNICODE flags are incompatible")
 else :
  if flags&SRE_FLAG_UNICODE:
   raise ValueError("can't use UNICODE flag with a bytes pattern")
 return flags

def parse(str,flags=0,pattern=None ):

 source=Tokenizer(str)

 if pattern is None :
  pattern=Pattern()
 pattern. flags=flags
 pattern. str=str
 p=_parse_sub(source,pattern,0)
 p. pattern. flags=fix_flags(str,p. pattern. flags)

 tail=source. get()
 if tail ==")":
  raise error("unbalanced parenthesis")
 elif tail:
  raise error("bogus characters at end of regular expression")

 if flags&SRE_FLAG_DEBUG:
  p. dump()

 if not (flags&SRE_FLAG_VERBOSE)and p. pattern. flags&SRE_FLAG_VERBOSE:

  return parse(str,p. pattern. flags)

 return p

def parse_template(source,pattern):

 s=Tokenizer(source)
 sget=s. get
 p=[]
 a=p. append
 def literal(literal,p=p,pappend=a):
  if p and p[-1][0]is LITERAL:
   p[-1]=LITERAL,p[-1][1]+literal
  else :
   pappend((LITERAL,literal))
 sep=source[:0]
 if isinstance(sep,str):
  makechar=chr
 else :
  makechar=chr
 while 1:
  this=sget()
  if this is None :
   break
  if this and this[0]=="\\":

   c=this[1:2]
   if c =="g":
    name=""
    if s. match("<"):
     while 1:
      char=sget()
      if char is None :
       raise error("unterminated group name")
      if char ==">":
       break
      name=name+char
    if not name:
     raise error("missing group name")
    try :
     index=int(name)
     if index <0:
      raise error("negative group number")
    except ValueError:
     if not isname(name):
      raise error("bad character in group name")
     try :
      index=pattern. groupindex[name]
     except KeyError:
      raise IndexError("unknown group name")
    a((MARK,index))
   elif c =="0":
    if s. next in OCTDIGITS:
     this=this+sget()
     if s. next in OCTDIGITS:
      this=this+sget()
    literal(makechar(int(this[1:],8)&0xff))
   elif c in DIGITS:
    isoctal=False
    if s. next in DIGITS:
     this=this+sget()
     if (c in OCTDIGITS and this[2]in OCTDIGITS and
     s. next in OCTDIGITS):
      this=this+sget()
      isoctal=True
      literal(makechar(int(this[1:],8)&0xff))
    if not isoctal:
     a((MARK,int(this[1:])))
   else :
    try :
     this=makechar(ESCAPES[this][1])
    except KeyError:
     pass
    literal(this)
  else :
   literal(this)

 i=0
 groups=[]
 groupsappend=groups. append
 literals=[None ]*len(p)
 if isinstance(source,str):
  encode=lambda x:x
 else :

  encode=lambda x:x. encode('latin-1')
 for c,s in p:
  if c is MARK:
   groupsappend((i,s))

  else :
   literals[i]=encode(s)
  i=i+1
 return groups,literals

def expand_template(template,match):
 g=match. group
 sep=match. string[:0]
 groups,literals=template
 literals=literals[:]
 try :
  for index,group in groups:
   literals[index]=s=g(group)
   if s is None :
    raise error("unmatched group")
 except IndexError:
  raise error("invalid group reference")
 return sep. join(literals)

====sre_parse.py(file) end====

====stat.py(file) start====
''

ST_MODE=0
ST_INO=1
ST_DEV=2
ST_NLINK=3
ST_UID=4
ST_GID=5
ST_SIZE=6
ST_ATIME=7
ST_MTIME=8
ST_CTIME=9

def S_IMODE(mode):
 ''

 return mode&0o7777

def S_IFMT(mode):
 ''

 return mode&0o170000

S_IFDIR=0o040000
S_IFCHR=0o020000
S_IFBLK=0o060000
S_IFREG=0o100000
S_IFIFO=0o010000
S_IFLNK=0o120000
S_IFSOCK=0o140000

def S_ISDIR(mode):
 ''
 return S_IFMT(mode)==S_IFDIR

def S_ISCHR(mode):
 ''
 return S_IFMT(mode)==S_IFCHR

def S_ISBLK(mode):
 ''
 return S_IFMT(mode)==S_IFBLK

def S_ISREG(mode):
 ''
 return S_IFMT(mode)==S_IFREG

def S_ISFIFO(mode):
 ''
 return S_IFMT(mode)==S_IFIFO

def S_ISLNK(mode):
 ''
 return S_IFMT(mode)==S_IFLNK

def S_ISSOCK(mode):
 ''
 return S_IFMT(mode)==S_IFSOCK

S_ISUID=0o4000
S_ISGID=0o2000
S_ENFMT=S_ISGID
S_ISVTX=0o1000
S_IREAD=0o0400
S_IWRITE=0o0200
S_IEXEC=0o0100
S_IRWXU=0o0700
S_IRUSR=0o0400
S_IWUSR=0o0200
S_IXUSR=0o0100
S_IRWXG=0o0070
S_IRGRP=0o0040
S_IWGRP=0o0020
S_IXGRP=0o0010
S_IRWXO=0o0007
S_IROTH=0o0004
S_IWOTH=0o0002
S_IXOTH=0o0001

UF_NODUMP=0x00000001
UF_IMMUTABLE=0x00000002
UF_APPEND=0x00000004
UF_OPAQUE=0x00000008
UF_NOUNLINK=0x00000010
UF_COMPRESSED=0x00000020
UF_HIDDEN=0x00008000
SF_ARCHIVED=0x00010000
SF_IMMUTABLE=0x00020000
SF_APPEND=0x00040000
SF_NOUNLINK=0x00100000
SF_SNAPSHOT=0x00200000

_filemode_table=(
((S_IFLNK,"l"),
(S_IFREG,"-"),
(S_IFBLK,"b"),
(S_IFDIR,"d"),
(S_IFCHR,"c"),
(S_IFIFO,"p")),

((S_IRUSR,"r"),),
((S_IWUSR,"w"),),
((S_IXUSR |S_ISUID,"s"),
(S_ISUID,"S"),
(S_IXUSR,"x")),

((S_IRGRP,"r"),),
((S_IWGRP,"w"),),
((S_IXGRP |S_ISGID,"s"),
(S_ISGID,"S"),
(S_IXGRP,"x")),

((S_IROTH,"r"),),
((S_IWOTH,"w"),),
((S_IXOTH |S_ISVTX,"t"),
(S_ISVTX,"T"),
(S_IXOTH,"x"))
)

def filemode(mode):
 ''
 perm=[]
 for table in _filemode_table:
  for bit,char in table:
   if mode&bit ==bit:
    perm. append(char)
    break
  else :
   perm. append("-")
 return"". join(perm)
====stat.py(file) end====

====sys.py(file) start====

from _sys import *

_getframe=Getframe
from javascript import JSObject
from browser import window

brython_debug_mode=__BRYTHON__. debug

base_exec_prefix=__BRYTHON__. brython_path

base_prefix=__BRYTHON__. brython_path

builtin_module_names=__BRYTHON__. builtin_module_names

byteorder='little'

def exc_info():
 exc=__BRYTHON__. current_exception
 if exc is None :
  return (None ,None ,None )
 return (exc. __class__,exc,exc. traceback)

exec_prefix=__BRYTHON__. brython_path

executable=__BRYTHON__. brython_path+'/brython.js'

def exit(i=None ):
 raise SystemExit('')

class flag_class:
 def __init__(self):
  self. debug=0
  self. inspect=0
  self. interactive=0
  self. optimize=0
  self. dont_write_bytecode=0
  self. no_user_site=0
  self. no_site=0
  self. ignore_environment=0
  self. verbose=0
  self. bytes_warning=0
  self. quiet=0
  self. hash_randomization=1

flags=flag_class()

def getfilesystemencoding(*args,**kw):
 ''

 return'utf-8'

def getrecursionlimit():
 return 200

maxsize=2 **63 -1

maxunicode=1114111

platform="brython"

prefix=__BRYTHON__. brython_path

version='.'. join(str(x)for x in __BRYTHON__. version_info[:3])
version +=" (default, %s) \n[Javascript 1.5] on Brython"%__BRYTHON__. compiled_date
hexversion=0x03000000

class __version_info(object):
 def __init__(self,version_info):
  self. version_info=version_info
  self. major=version_info[0]
  self. minor=version_info[1]
  self. micro=version_info[2]
  self. releaselevel=version_info[3]
  self. serial=version_info[4]

 def __getitem__(self,index):
  if isinstance(self. version_info[index],list):
   return tuple(self. version_info[index])
  return self. version_info[index]

 def hexversion(self):
  try :
   return'0%d0%d0%d'%(self. major,self. minor,self. micro)
  finally :
   return'0%d0000'%(self. major)

 def __str__(self):
  _s="sys.version(major=%d, minor=%d, micro=%d, releaselevel='%s', serial=%d)"
  return _s %(self. major,self. minor,self. micro,
  self. releaselevel,self. serial)

 def __eq__(self,other):
  if isinstance(other,tuple):
   return (self. major,self. minor,self. micro)==other

  raise Error("Error! I don't know how to compare!")

 def __ge__(self,other):
  if isinstance(other,tuple):
   return (self. major,self. minor,self. micro)>=other

  raise Error("Error! I don't know how to compare!")

 def __gt__(self,other):
  if isinstance(other,tuple):
   return (self. major,self. minor,self. micro)>other

  raise Error("Error! I don't know how to compare!")

 def __le__(self,other):
  if isinstance(other,tuple):
   return (self. major,self. minor,self. micro)<=other

  raise Error("Error! I don't know how to compare!")

 def __lt__(self,other):
  if isinstance(other,tuple):
   return (self. major,self. minor,self. micro)<other

  raise Error("Error! I don't know how to compare!")

 def __ne__(self,other):
  if isinstance(other,tuple):
   return (self. major,self. minor,self. micro)!=other

  raise Error("Error! I don't know how to compare!")

version_info=__version_info(__BRYTHON__. version_info)

class _implementation:
 def __init__(self):
  self. name='brython'
  self. version=__version_info(__BRYTHON__. implementation)
  self. hexversion=self. version. hexversion()
  self. cache_tag=None

 def __repr__(self):
  return"namespace(name='%s' version=%s hexversion='%s')"%(self. name,self. version,self. hexversion)

 def __str__(self):
  return"namespace(name='%s' version=%s hexversion='%s')"%(self. name,self. version,self. hexversion)

implementation=_implementation()

class _hash_info:
 def __init__(self):
  self. width=32,
  self. modulus=2147483647
  self. inf=314159
  self. nan=0
  self. imag=1000003
  self. algorithm='siphash24'
  self. hash_bits=64
  self. seed_bits=128
  cutoff=0

 def __repr(self):

  return"sys.hash_info(width=32, modulus=2147483647, inf=314159, nan=0, imag=1000003, algorithm='siphash24', hash_bits=64, seed_bits=128, cutoff=0)"

hash_info=_hash_info()

warnoptions=[]

def getfilesystemencoding():
 return'utf-8'

__stdout__=__BRYTHON__. stdout
__stderr__=__BRYTHON__. stderr
__stdin__=__BRYTHON__. stdin

del JSObject
del _implementation
====sys.py(file) end====

====time.py(file) start====
from browser import window

date=window. Date. new

now=window. Date. now

_STRUCT_TM_ITEMS=9

def _get_day_of_year(arg):
 ''

 ml=[31,28,31,30,31,30,31,31,30,31,30,31]
 if arg[0]%4 ==0:
  ml[1]+=1
 i=1
 yday=0
 while i <arg[1]:
  yday +=ml[i -1]
  i +=1
 yday +=arg[2]
 return yday

def _get_week_of_year(arg):
 ''

 d1=date(arg[0],arg[1]-1,arg[2])
 d0=date(arg[0],0,1)
 firstday=d0. getDay()
 if firstday ==0:firstday=7
 firstweek=8 -firstday
 doy=arg[7]
 if firstday !=1:
  doy=doy -firstweek
 if doy %7 ==0:
  week_number=doy //7
 else :
  week_number=doy //7+1
 return week_number

def _check_struct_time(t):
 mm=t[1]
 if mm ==0:mm=1
 if -1 >mm >13:raise ValueError("month out of range")

 dd=t[2]
 if dd ==0:dd=1
 if -1 >dd >32:raise ValueError("day of month out of range")

 hh=t[3]
 if -1 >hh >24:raise ValueError("hour out of range")

 minu=t[4]
 if -1 >minu >60:raise ValueError("minute out of range")

 ss=t[5]
 if -1 >ss >62:raise ValueError("seconds out of range")

 wd=t[6]%7
 if wd <-2:raise ValueError("day of week out of range")

 dy=t[7]
 if dy ==0:dy=1
 if -1 >dy >367:raise ValueError("day of year out of range")

 return t[0],mm,dd,hh,minu,ss,wd,dy,t[-1]

def _is_dst(secs=None ):
 ''
 d=date()
 if secs is not None :
  d=date(secs *1000)

 jan=date(d. getFullYear(),0,1)
 jul=date(d. getFullYear(),6,1)
 dst=int(d. getTimezoneOffset()<max(abs(jan. getTimezoneOffset()),abs(jul. getTimezoneOffset())))
 return dst

def _get_tzname():
 ''
 d=date()
 d=d. toTimeString()
 try :
  d=d. split('(')[1]. split(')')[0]
  return (d,'NotAvailable')
 except :
  return ('','')

def _set_altzone():
 d=date()
 jan=date(d. getFullYear(),0,1)
 jul=date(d. getFullYear(),6,1)
 result=timezone -(jan. getTimezoneOffset()-jul. getTimezoneOffset())*60
 return result

def _check_input(t):
 if t and isinstance(t,struct_time)and len(t. args)==9:
  t=t. args
 elif t and isinstance(t,tuple)and len(t)==9:
  t=t
 elif t and isinstance(t,struct_time)and len(t. args)!=9:
  raise TypeError("function takes exactly 9 arguments ({} given)". format(len(t. args)))
 elif t and isinstance(t,tuple)and len(t)!=9:
  raise TypeError("function takes exactly 9 arguments ({} given)". format(len(t)))
 elif t and not isinstance(t,(tuple,struct_time)):
  raise TypeError("Tuple or struct_time argument required")
 else :
  t=localtime(). args
 return t

daylight=_is_dst()
timezone=date(). getTimezoneOffset()*60
tzname=_get_tzname()
altzone=_set_altzone()if daylight else timezone

def asctime(t=None ):
 weekdays={0:"Mon",1:"Tue",2:"Wed",3:"Thu",
 4:"Fri",5:"Sat",6:"Sun"}
 months={1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',
 7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}

 t=_check_input(t)
 t=_check_struct_time(t)

 result="%s %s %2d %02d:%02d:%02d %d"%(
 weekdays[t[6]],months[t[1]],t[2],t[3],t[4],t[5],t[0])
 return result

def ctime(timestamp=None ):
 return asctime(localtime(timestamp))

def gmtime(secs=None ):
 d=date()
 if secs is not None :
  d=date(secs *1000)
 wday=d. getUTCDay()-1 if d. getUTCDay()-1 >=0 else 6
 tmp=struct_time([d. getUTCFullYear(),
 d. getUTCMonth()+1,d. getUTCDate(),
 d. getUTCHours(),d. getUTCMinutes(),d. getUTCSeconds(),
 wday,0,0])
 tmp. args[7]=_get_day_of_year(tmp. args)
 return tmp

def localtime(secs=None ):
 d=date()
 if secs is not None :
  d=date(secs *1000)
 dst=_is_dst(secs)
 wday=d. getDay()-1 if d. getDay()-1 >=0 else 6
 tmp=struct_time([d. getFullYear(),
 d. getMonth()+1,d. getDate(),
 d. getHours(),d. getMinutes(),d. getSeconds(),
 wday,0,dst])
 tmp. args[7]=_get_day_of_year(tmp. args)
 return tmp

def mktime(t):
 if isinstance(t,struct_time):
  d1=date(t. tm_year,t. tm_mon -1,t. tm_mday,
  t. tm_hour,t. tm_min,t. tm_sec,0). getTime()
 elif isinstance(t,tuple):
  d1=date(t[0],t[1]-1,t[2],t[3],t[4],t[5],0). getTime()
 else :
  raise ValueError("Tuple or struct_time argument required")
 d2=date(0). getTime()
 return (d1 -d2)/1000.

def monotonic():
 return now()/1000.

def perf_counter():
 return now()/1000.

def process_time():
 return now()/1000.

def time():
 return float(date(). getTime()/1000)

def sleep(secs):
 ''

 raise NotImplementedError("Blocking functions like time.sleep() are not "
 "supported in the browser. Use functions in module browser.timer "
 "instead.")

def strftime(_format,t=None ):

 def ns(t,nb):

  res=str(t)
  while len(res)<nb:
   res='0'+res
  return res

 t=_check_input(t)
 t=_check_struct_time(t)

 YY=ns(t[0],4)
 yy=ns(t[0],4)[2:]
 mm=ns(t[1],2)
 dd=ns(t[2],2)
 HH=t[3]
 HH24=ns(HH,2)
 HH12=ns(HH %12,2)
 if HH12 ==0:HH12=12
 AMPM='AM'if 0 <=HH <12 else'PM'
 MM=ns(t[4],2)
 SS=ns(t[5],2)
 DoY=ns(t[7],3)
 w=t[6]+1 if t[6]<6 else 0
 W=ns(_get_week_of_year(t),2)

 abb_weekdays=['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
 full_weekdays=['Sunday','Monday','Tuesday','Wednesday',
 'Thursday','Friday','Saturday']
 abb_months=['Jan','Feb','Mar','Apr','May','Jun',
 'Jul','Aug','Sep','Oct','Nov','Dec']
 full_months=['January','February','March','April','May','June',
 'July','August','September','October','November','December']

 res=_format
 res=res. replace("%H",HH24)
 res=res. replace("%I",HH12)
 res=res. replace("%p",AMPM)
 res=res. replace("%M",MM)
 res=res. replace("%S",SS)
 res=res. replace("%Y",YY)
 res=res. replace("%y",yy)
 res=res. replace("%m",mm)
 res=res. replace("%d",dd)
 res=res. replace("%a",abb_weekdays[w])
 res=res. replace("%A",full_weekdays[w])
 res=res. replace("%b",abb_months[int(mm)-1])
 res=res. replace("%B",full_months[int(mm)-1])
 res=res. replace("%j",DoY)
 res=res. replace("%w",str(w))
 res=res. replace("%W",W)
 res=res. replace("%x",mm+'/'+dd+'/'+yy)
 res=res. replace("%X",HH24+':'+MM+':'+SS)
 res=res. replace("%c",abb_weekdays[w]+' '+abb_months[int(mm)-1]+
 ' '+dd+' '+HH24+':'+MM+':'+SS+' '+YY)
 res=res. replace("%%",'%')

 return res

class struct_time:

 def __init__(self,args):

  if len(args)!=9:
   raise TypeError("time.struct_time() takes a 9-sequence (%s-sequence given)"%len(args))

  self. args=args

 @property
 def tm_year(self):
  return self. args[0]

 @property
 def tm_mon(self):
  return self. args[1]

 @property
 def tm_mday(self):
  return self. args[2]

 @property
 def tm_hour(self):
  return self. args[3]

 @property
 def tm_min(self):
  return self. args[4]

 @property
 def tm_sec(self):
  return self. args[5]

 @property
 def tm_wday(self):
  return self. args[6]

 @property
 def tm_yday(self):
  return self. args[7]

 @property
 def tm_isdst(self):
  return self. args[8]

 def __getitem__(self,i):
  return self. args[i]

 def __iter__(self):
  return iter(self. args)

 def __repr__(self):
  return ("time.structime(tm_year={}, tm_mon={}, tm_day={}, "+  "tm_hour={}, tm_min={}, tm_sec={}, tm_wday={}, "+  "tm_yday={}, tm_isdst={})"). format(*self. args)

 def __str__(self):
  return self. __repr__()

def to_struct_time(*arg):
 arg=list(arg)

 ml=[31,28,31,30,31,30,31,31,30,31,30,31]
 if arg[0]%4 ==0:
  ml[1]+=1

 i=1
 yday=0
 while i <arg[1]:
  yday +=ml[i -1]
  i +=1
 yday +=arg[2]
 arg. append(yday)
 arg. append(-1)
 return struct_time(tuple(arg))

def wait(secs):

 pass

def strptime(string,_format):
 import _strptime
 return _strptime. _strptime_datetime(to_struct_time,string,_format)

_clock_msg="""Browser cannot access CPU. See '%s'"""
def _clock_xx(url):
 raise NotImplementedError(_clock_msg %url)
clock=time
clock_getres=lambda :_clock_xx("https://docs.python.org/3/library/time.html#time.clock_getres")
clock_gettime=lambda :_clock_xx("https://docs.python.org/3/library/time.html#time.clock_gettime")
clock_settime=lambda :_clock_xx("https://docs.python.org/3/library/time.html#time.clock_settime")
CLOCK_HIGHRES=_clock_msg %"https://docs.python.org/3/library/time.html#time.CLOCK_HIGHRES"
CLOCK_MONOTONIC=_clock_msg %"https://docs.python.org/3/library/time.html#time.CLOCK_MONOTONIC"
CLOCK_MONOTONIC_RAW=_clock_msg %"https://docs.python.org/3/library/time.html#time.CLOCK_MONOTONIC_RAW"
CLOCK_PROCESS_CPUTIME_ID=_clock_msg %"https://docs.python.org/3/library/time.html#time.CLOCK_PROCESS_CPUTIME_ID"
CLOCK_REALTIME=_clock_msg %"https://docs.python.org/3/library/time.html#time.CLOCK_REALTIME"
CLOCK_THREAD_CPUTIME_ID=_clock_msg %"https://docs.python.org/3/library/time.html#time.CLOCK_THREAD_CPUTIME_ID"

def get_clock_info(cl):
 from collections import namedtuple
 ClockInfo=namedtuple('ClockInfo',['adjustable','implementation','monotonic','resolution'])

 if cl =='monotonic':
  return ClockInfo(adjustable=False ,
  implementation='window.performance.now',
  monotonic=True ,
  resolution=0.000001)
 elif cl =='perf_counter'or cl =='process_time':
  return ClockInfo(adjustable=False ,
  implementation='date.getTime',
  monotonic=False ,
  resolution=0.001)
 else :
  _clock_xx("https://docs.python.org/3/library/time.html#time.get_clock_info")

def tzset():
 raise NotImplementedError()
====time.py(file) end====

====traceback.py(file) start====
import sys
from browser import console

def _restore_current(exc):
 ''

 __BRYTHON__. current_exception=exc

def print_exc(file=sys. stderr):
 exc=__BRYTHON__. current_exception
 if isinstance(exc,SyntaxError):
  file. write('\n module %s line %s'%(exc. args[1],exc. args[2]))
  offset=exc. args[3]
  file. write('\n  '+exc. args[4])
  file. write('\n  '+offset *' '+'^')
 else :
  file. write(exc. info)
 msg=exc. __name__
 if exc. args:
  msg +=': %s'%exc. args[0]
 file. write(msg+'\n')
 _restore_current(exc)

def format_exc(limit=None ,chain=True ):
 exc=__BRYTHON__. current_exception
 res=exc. info+'\n'+exc. __name__
 if exc. args:
  res +=': '+exc. args[0]
 _restore_current(exc)
 return res+'\n'

def format_exception(_type,value,tb,limit=None ,chain=True ):
 return ['%s\n'%_type,'%s\n'%value]

def extract_tb(tb,limit=None ):
 return tb====traceback.py(file) end====

====uuid.py(file) start====
''

__author__='Ka-Ping Yee <ping@zesty.ca>'

RESERVED_NCS,RFC_4122,RESERVED_MICROSOFT,RESERVED_FUTURE=[
'reserved for NCS compatibility','specified in RFC 4122',
'reserved for Microsoft compatibility','reserved for future definition']

int_=int
bytes_=bytes

class UUID(object):
 ''

 def __init__(self,hex=None ,bytes=None ,bytes_le=None ,fields=None ,
 int=None ,version=None ):
  ''

  if [hex,bytes,bytes_le,fields,int]. count(None )!=4:
   raise TypeError('need one of hex, bytes, bytes_le, fields, or int')
  if hex is not None :
   hex=hex. replace('urn:',''). replace('uuid:','')
   hex=hex. strip('{}'). replace('-','')
   if len(hex)!=32:
    raise ValueError('badly formed hexadecimal UUID string')
   int=int_(hex,16)
  if bytes_le is not None :
   if len(bytes_le)!=16:
    raise ValueError('bytes_le is not a 16-char string')
   bytes=(bytes_(reversed(bytes_le[0:4]))+
   bytes_(reversed(bytes_le[4:6]))+
   bytes_(reversed(bytes_le[6:8]))+
   bytes_le[8:])
  if bytes is not None :
   if len(bytes)!=16:
    raise ValueError('bytes is not a 16-char string')
   assert isinstance(bytes,bytes_),repr(bytes)
   int=int_. from_bytes(bytes,byteorder='big')
  if fields is not None :
   if len(fields)!=6:
    raise ValueError('fields is not a 6-tuple')
   (time_low,time_mid,time_hi_version,
   clock_seq_hi_variant,clock_seq_low,node)=fields
   if not 0 <=time_low <1 <<32:
    raise ValueError('field 1 out of range (need a 32-bit value)')
   if not 0 <=time_mid <1 <<16:
    raise ValueError('field 2 out of range (need a 16-bit value)')
   if not 0 <=time_hi_version <1 <<16:
    raise ValueError('field 3 out of range (need a 16-bit value)')
   if not 0 <=clock_seq_hi_variant <1 <<8:
    raise ValueError('field 4 out of range (need an 8-bit value)')
   if not 0 <=clock_seq_low <1 <<8:
    raise ValueError('field 5 out of range (need an 8-bit value)')
   if not 0 <=node <1 <<48:
    raise ValueError('field 6 out of range (need a 48-bit value)')
   clock_seq=(clock_seq_hi_variant <<8)|clock_seq_low
   int=((time_low <<96)|(time_mid <<80)|
   (time_hi_version <<64)|(clock_seq <<48)|node)
  if int is not None :
   if not 0 <=int <1 <<128:
    raise ValueError('int is out of range (need a 128-bit value)')
  if version is not None :
   if not 1 <=version <=5:
    raise ValueError('illegal version number')

   int &=~(0xc000 <<48)
   int |=0x8000 <<48

   int &=~(0xf000 <<64)
   int |=version <<76
  self. __dict__['int']=int

 def __eq__(self,other):
  if isinstance(other,UUID):
   return self. int ==other. int
  return NotImplemented

 def __ne__(self,other):
  if isinstance(other,UUID):
   return self. int !=other. int
  return NotImplemented

 def __lt__(self,other):
  if isinstance(other,UUID):
   return self. int <other. int
  return NotImplemented

 def __gt__(self,other):
  if isinstance(other,UUID):
   return self. int >other. int
  return NotImplemented

 def __le__(self,other):
  if isinstance(other,UUID):
   return self. int <=other. int
  return NotImplemented

 def __ge__(self,other):
  if isinstance(other,UUID):
   return self. int >=other. int
  return NotImplemented

 def __hash__(self):
  return hash(self. int)

 def __int__(self):
  return self. int

 def __repr__(self):
  return'UUID(%r)'%str(self)

 def __setattr__(self,name,value):
  raise TypeError('UUID objects are immutable')

 def __str__(self):
  hex='%032x'%self. int
  return'%s-%s-%s-%s-%s'%(
  hex[:8],hex[8:12],hex[12:16],hex[16:20],hex[20:])

 @property
 def bytes(self):
  bytes=bytearray()
  for shift in range(0,128,8):
   bytes. insert(0,(self. int >>shift)&0xff)
  return bytes_(bytes)

 @property
 def bytes_le(self):
  bytes=self. bytes
  return (bytes_(reversed(bytes[0:4]))+
  bytes_(reversed(bytes[4:6]))+
  bytes_(reversed(bytes[6:8]))+
  bytes[8:])

 @property
 def fields(self):
  return (self. time_low,self. time_mid,self. time_hi_version,
  self. clock_seq_hi_variant,self. clock_seq_low,self. node)

 @property
 def time_low(self):
  return self. int >>96

 @property
 def time_mid(self):
  return (self. int >>80)&0xffff

 @property
 def time_hi_version(self):
  return (self. int >>64)&0xffff

 @property
 def clock_seq_hi_variant(self):
  return (self. int >>56)&0xff

 @property
 def clock_seq_low(self):
  return (self. int >>48)&0xff

 @property
 def time(self):
  return (((self. time_hi_version&0x0fff)<<48)|
  (self. time_mid <<32)|self. time_low)

 @property
 def clock_seq(self):
  return (((self. clock_seq_hi_variant&0x3f)<<8)|
  self. clock_seq_low)

 @property
 def node(self):
  return self. int&0xffffffffffff

 @property
 def hex(self):
  return'%032x'%self. int

 @property
 def urn(self):
  return'urn:uuid:'+str(self)

 @property
 def variant(self):
  if not self. int&(0x8000 <<48):
   return RESERVED_NCS
  elif not self. int&(0x4000 <<48):
   return RFC_4122
  elif not self. int&(0x2000 <<48):
   return RESERVED_MICROSOFT
  else :
   return RESERVED_FUTURE

 @property
 def version(self):

  if self. variant ==RFC_4122:
   return int((self. int >>76)&0xf)

def _find_mac(command,args,hw_identifiers,get_index):
 import os,shutil
 executable=shutil. which(command)
 if executable is None :
  path=os. pathsep. join(('/sbin','/usr/sbin'))
  executable=shutil. which(command,path=path)
  if executable is None :
   return None

 try :

  cmd='LC_ALL=C %s %s 2>/dev/null'%(executable,args)
  with os. popen(cmd)as pipe:
   for line in pipe:
    words=line. lower(). split()
    for i in range(len(words)):
     if words[i]in hw_identifiers:
      try :
       return int(
       words[get_index(i)]. replace(':',''),16)
      except (ValueError,IndexError):

       pass
 except OSError:
  pass

def _ifconfig_getnode():
 ''

 for args in ('','-a','-av'):
  mac=_find_mac('ifconfig',args,['hwaddr','ether'],lambda i:i+1)
  if mac:
   return mac

 import socket
 ip_addr=socket. gethostbyname(socket. gethostname())

 mac=_find_mac('arp','-an',[ip_addr],lambda i:-1)
 if mac:
  return mac

 mac=_find_mac('lanscan','-ai',['lan0'],lambda i:0)
 if mac:
  return mac

 return None

def _ipconfig_getnode():
 ''
 import os,re
 dirs=['',r'c:\windows\system32',r'c:\winnt\system32']
 try :
  import ctypes
  buffer=ctypes. create_string_buffer(300)
  ctypes. windll. kernel32. GetSystemDirectoryA(buffer,300)
  dirs. insert(0,buffer. value. decode('mbcs'))
 except :
  pass

def _netbios_getnode():
 ''

 import win32wnet,netbios
 ncb=netbios. NCB()
 ncb. Command=netbios. NCBENUM
 ncb. Buffer=adapters=netbios. LANA_ENUM()
 adapters. _pack()
 if win32wnet. Netbios(ncb)!=0:
  return
 adapters. _unpack()
 for i in range(adapters. length):
  ncb. Reset()
  ncb. Command=netbios. NCBRESET
  ncb. Lana_num=ord(adapters. lana[i])
  if win32wnet. Netbios(ncb)!=0:
   continue
  ncb. Reset()
  ncb. Command=netbios. NCBASTAT
  ncb. Lana_num=ord(adapters. lana[i])
  ncb. Callname='*'. ljust(16)
  ncb. Buffer=status=netbios. ADAPTER_STATUS()
  if win32wnet. Netbios(ncb)!=0:
   continue
  status. _unpack()
  bytes=status. adapter_address
  return ((bytes[0]<<40)+(bytes[1]<<32)+(bytes[2]<<24)+
  (bytes[3]<<16)+(bytes[4]<<8)+bytes[5])

_uuid_generate_random=_uuid_generate_time=_UuidCreate=None
try :
 import ctypes,ctypes. util

 for libname in ['uuid','c']:
  try :
   lib=ctypes. CDLL(ctypes. util. find_library(libname))
  except :
   continue
  if hasattr(lib,'uuid_generate_random'):
   _uuid_generate_random=lib. uuid_generate_random
  if hasattr(lib,'uuid_generate_time'):
   _uuid_generate_time=lib. uuid_generate_time
   if _uuid_generate_random is not None :
    break

 import sys
 if sys. platform =='darwin':
  import os
  if int(os. uname(). release. split('.')[0])>=9:
   _uuid_generate_random=_uuid_generate_time=None

 try :
  lib=ctypes. windll. rpcrt4
 except :
  lib=None
 _UuidCreate=getattr(lib,'UuidCreateSequential',
 getattr(lib,'UuidCreate',None ))
except :
 pass

def _unixdll_getnode():
 ''
 _buffer=ctypes. create_string_buffer(16)
 _uuid_generate_time(_buffer)
 return UUID(bytes=bytes_(_buffer. raw)). node

def _windll_getnode():
 ''
 _buffer=ctypes. create_string_buffer(16)
 if _UuidCreate(_buffer)==0:
  return UUID(bytes=bytes_(_buffer. raw)). node

def _random_getnode():
 ''
 import random
 return random. randrange(0,1 <<48)|0x010000000000

_node=None

def getnode():
 ''

 global _node
 if _node is not None :
  return _node

 import sys
 if sys. platform =='win32':
  getters=[_windll_getnode,_netbios_getnode,_ipconfig_getnode]
 else :
  getters=[_unixdll_getnode,_ifconfig_getnode]

 for getter in getters+[_random_getnode]:
  try :
   _node=getter()
  except :
   continue
  if _node is not None :
   return _node

_last_timestamp=None

def uuid1(node=None ,clock_seq=None ):
 ''

 if _uuid_generate_time and node is clock_seq is None :
  _buffer=ctypes. create_string_buffer(16)
  _uuid_generate_time(_buffer)
  return UUID(bytes=bytes_(_buffer. raw))

 global _last_timestamp
 import time
 nanoseconds=int(time. time()*1e9)

 timestamp=int(nanoseconds /100)+0x01b21dd213814000
 if _last_timestamp is not None and timestamp <=_last_timestamp:
  timestamp=_last_timestamp+1
 _last_timestamp=timestamp
 if clock_seq is None :
  import random
  clock_seq=random. randrange(1 <<14)
 time_low=timestamp&0xffffffff
 time_mid=(timestamp >>32)&0xffff
 time_hi_version=(timestamp >>48)&0x0fff
 clock_seq_low=clock_seq&0xff
 clock_seq_hi_variant=(clock_seq >>8)&0x3f
 if node is None :
  node=getnode()
 return UUID(fields=(time_low,time_mid,time_hi_version,
 clock_seq_hi_variant,clock_seq_low,node),version=1)

def uuid3(namespace,name):
 ''
 from hashlib import md5
 hash=md5(namespace. bytes+bytes(name,"utf-8")). digest()
 return UUID(bytes=hash[:16],version=3)

def uuid4():
 ''

 if _uuid_generate_random:
  _buffer=ctypes. create_string_buffer(16)
  _uuid_generate_random(_buffer)
  return UUID(bytes=bytes_(_buffer. raw))

 try :
  import os
  return UUID(bytes=os. urandom(16),version=4)
 except :
  import random
  bytes=bytes_(random. randrange(256)for i in range(16))
  return UUID(bytes=bytes,version=4)

def uuid5(namespace,name):
 ''
 from hashlib import sha1
 hash=sha1(namespace. bytes+bytes(name,"utf-8")). digest()
 return UUID(bytes=hash[:16],version=5)

NAMESPACE_DNS=UUID('6ba7b810-9dad-11d1-80b4-00c04fd430c8')
NAMESPACE_URL=UUID('6ba7b811-9dad-11d1-80b4-00c04fd430c8')
NAMESPACE_OID=UUID('6ba7b812-9dad-11d1-80b4-00c04fd430c8')
NAMESPACE_X500=UUID('6ba7b814-9dad-11d1-80b4-00c04fd430c8')
====uuid.py(file) end====

